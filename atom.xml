<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rabcnops</title>
  
  <subtitle>Welcome to my tech blog</subtitle>
  <link href="https://blog.rabcnops.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.rabcnops.cn/"/>
  <updated>2023-08-12T07:48:41.793Z</updated>
  <id>https://blog.rabcnops.cn/</id>
  
  <author>
    <name>Rab</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一文教你如何创建 Python 虚拟环境</title>
    <link href="https://blog.rabcnops.cn/posts/articles/42d77d78.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/42d77d78.html</id>
    <published>2023-08-12T07:00:00.000Z</published>
    <updated>2023-08-12T07:48:41.793Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/pyme.png" alt="pyme"></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实这都是 Python 基础该掌握的，今天博客记录一下，方便自己或其他人阅读。虚拟环境的好处在于达到环境上的隔离，如：不同的项目有自己独特的环境，有自己项目的第三方包等等，而如果所有项目的环境都在一起，那势必会造成环境冲突。因此对于开发人员而言，学会配置虚拟环境显然是有很必要的。</p><h2 id="一、配置虚拟环境"><a href="#一、配置虚拟环境" class="headerlink" title="一、配置虚拟环境"></a>一、配置虚拟环境</h2><h3 id="1-1-Windows"><a href="#1-1-Windows" class="headerlink" title="1.1 Windows"></a><font color="red">1.1 Windows</font></h3><p><strong>1、虚拟工具安装</strong></p><ul><li><p>cmd 终端窗口安装虚拟环境管理工具</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv virtualenvwrapper-win</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下图可见，当你安装virtualenvwrapper-win时，也会自动安装virtualenv</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230812132508454.png" alt="image-20230812132508454"></p></li><li><p>验证是否安装</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230812133644852.png" alt="image-20230812133644852"></p></li><li><p>添加环境变量（可选）</p><blockquote><p>默认情况下，使用 mkvirtualenv 创建虚拟环境后，会在C盘用户目录下的 Envs 文件夹中生成相应的虚拟环境。</p><p>因此我们可以添加 WORKON_HOME 环境变量来指定你的虚拟环境路径，当我们没有指定虚拟环境目录的时候，就会默认创建在环境变量 WORKON_HOME 指定的目录中。</p><p>当我们创建虚拟环境且指定了其他虚拟环境目录（不管是否配置了 WORKON_HOME 环境变量），最终会在我们指定的路径下创建虚拟环境。</p></blockquote><p><code>计算机右键 &gt; 属性 &gt; 高级系统设置 &gt; 环境变量 &gt; 系统变量 &gt; 新建</code></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230812145922425.png" alt="image-20230812145922425"></p></li></ul><p><strong>2、创建虚拟环境</strong></p><blockquote><p>工具安装完成后，就可以来创建虚拟环境里</p></blockquote><ul><li><p>cmd 命令行方式</p><blockquote><p>你要在哪里创建虚拟环境，你就进入哪个目录执行该命令即可</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv myvenv3</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230812143726134.png" alt="image-20230812143726134"></p><p>这个时候，就可以用我们的 Pycharm 集成开发工具来打开我们的虚拟环境：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230812151229768.png" alt="image-20230812151229768"></p><p>紧接着往下配置：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230812150508601.png" alt="image-20230812150508601"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230812150623295.png" alt="image-20230812150623295"></p><p>点击 Create 后，我们打开终端，就可看见当前的</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230812150935831.png" alt="image-20230812150935831"></p></li><li><p>Pycharm 客户端方式</p><blockquote><p><code>File</code> - - &gt; <code>New Project</code> - - &gt; <code>Pure Python</code> - - &gt; <code>New environment using</code></p><p>选择要创建虚拟环境的目录，客户端方式会为我们自动创建虚拟环境，无需我们手动安装工具和创建虚拟环境以及上面的各种点点操作。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230812134239484.png" alt="image-20230812134239484"></p></li></ul><h3 id="1-2-Linux"><a href="#1-2-Linux" class="headerlink" title="1.2 Linux"></a><font color="red">1.2 Linux</font></h3><p><strong>1、虚拟工具安装</strong></p><ul><li><p>shell 终端执行安装</p><blockquote><p>与 Windows不同的是 Linux 下 virtualenvwrapper 不需要后缀 -win</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv virtualenvwrapper</span><br></pre></td></tr></table></figure></li><li><p>验证是否安装</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p><blockquote><p>在 .bashrc、.bash_profile 或 .zshrc 文件中添加如下三行内容</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export WORKON_HOME=~/.virtualenvs</span><br><span class="line">export VIRTUALENVWRAPPER_PYTHON=/usr/<span class="built_in">bin</span>/python3</span><br><span class="line">source /usr/local/<span class="built_in">bin</span>/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment"># WORKON_HOME：虚拟环境的存储位置</span></span><br><span class="line"><span class="comment"># VIRTUALENVWRAPPER_PYTHON：指定 Python 解释器的路径</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></li></ul><p><strong>2、创建虚拟环境</strong></p><p>同 Windows 操作。</p><h2 id="二、常用管理命令"><a href="#二、常用管理命令" class="headerlink" title="二、常用管理命令"></a>二、常用管理命令</h2><p><strong>1、创建新的虚拟环境</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv &lt;your_env_name&gt;</span><br></pre></td></tr></table></figure><p><strong>2、查看所有虚拟环境</strong></p><blockquote><p>仅限于查看通过命令行方式创建的虚拟环境。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure><p><strong>3、进入虚拟环境</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon /yourpath/&lt;your_env_name&gt;</span><br></pre></td></tr></table></figure><p><strong>4、退出虚拟环境</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p><strong>5、删除虚拟环境</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmvirtualenv &lt;your_env_name&gt;</span><br></pre></td></tr></table></figure><h2 id="三、FAQ"><a href="#三、FAQ" class="headerlink" title="三、FAQ"></a>三、FAQ</h2><p><strong>virtualenv 和 virtualenvwrapper 的区别</strong></p><ol><li>virtualenv 是一个独立的 Python 包，它提供了创建和管理虚拟环境的功能。你可以使用 virtualenv 命令来创建虚拟环境，并使用 activate 命令来激活虚拟环境。virtualenv 可以在任何操作系统上使用。</li><li>virtualenvwrapper 是 virtualenv 的一个扩展工具，它提供了更方便的命令和功能来管理虚拟环境。它是基于 virtualenv 构建的，并提供了一组额外的命令，如 mkvirtualenv（创建虚拟环境）、workon（激活虚拟环境）、lsvirtualenv（列出虚拟环境）等。virtualenvwrapper 还提供了一些钩子和扩展功能，使得管理多个虚拟环境更加容易。virtualenvwrapper 主要在 Linux 和 macOS 上使用，但也可以在 Windows 上使用。</li></ol><p>总结来说，virtualenv 是一个基本的虚拟环境管理工具，而 virtualenvwrapper 是对 virtualenv 的扩展，提供了更多的便利功能和命令来管理虚拟环境。选择使用哪个工具取决于你的需求和个人偏好。</p><p>-–END</p>]]></content>
    
    
    <summary type="html">一文教你如何创建 Python 虚拟环境。</summary>
    
    
    
    <category term="Python" scheme="https://blog.rabcnops.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://blog.rabcnops.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中 let 和 var 的区别</title>
    <link href="https://blog.rabcnops.cn/posts/articles/8acdfc09.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/8acdfc09.html</id>
    <published>2023-08-11T10:00:00.000Z</published>
    <updated>2023-08-11T10:09:54.110Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230811170942387.png" alt="image-20230811170942387"></p><hr><p>首先，let 和 var 都是用于声明变量的关键字，在老版 JavaScript 中也许你会见到 var 方式来声明变量，而现如今几乎都是使用 let 进行声明，接下来看看这两个关键字之间的区别。</p><p><strong>1、作用域</strong></p><ul><li><p><font color="red">var</font></p><blockquote><p>var 声明的变量在函数内部有效，如果在函数内部使用 var 声明一个变量，那么该变量在整个函数内部都是可见的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 10</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 输出: 20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><font color="red">let</font></p><blockquote><p>let 声明的变量在块级作用域内有效，如果在块级作用域内使用let声明一个变量，那么该变量只在该块级作用域内可见。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 10</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 报错: ReferenceError: y is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>小结</strong></p><blockquote><p>使用 var 声明的变量具有函数作用域，而使用 let 声明的变量具有块级作用域。</p></blockquote></li></ul><p><strong>2、变量提升</strong></p><ul><li><p><font color="red">var</font></p><blockquote><p>var声明的变量会在其作用域内的顶部被提升，即可以在声明之前使用变量。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p><font color="red">let</font></p><blockquote><p>let声明的变量不会被提升，即在声明之前使用变量会导致引用错误。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 报错: ReferenceError: x is not defined</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>小结</strong></p><blockquote><p>使用 var 声明的变量存在变量提升，而使用 let 声明的变量不存在变量提升。</p></blockquote></li></ul><p><strong>3、重复声明</strong></p><ul><li><p><font color="red">var</font></p><blockquote><p>使用var重复声明同一个变量不会报错，而是会覆盖之前的值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 20</span></span><br></pre></td></tr></table></figure></li><li><p><font color="red">let</font></p><blockquote><p>使用let重复声明同一个变量会导致语法错误。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">20</span>; <span class="comment">// 报错: SyntaxError: Identifier &#x27;x&#x27; has already been declared</span></span><br></pre></td></tr></table></figure></li><li><p><strong>小结</strong></p><blockquote><p>使用 var 可以重复声明同一个变量，而使用 let 不允许在同一个作用域内重复声明同一个变量。</p></blockquote></li></ul><p>—END</p>]]></content>
    
    
    <summary type="html">JavaScript 中 let 和 var 的区别。</summary>
    
    
    
    <category term="JavaScript" scheme="https://blog.rabcnops.cn/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="https://blog.rabcnops.cn/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus 联邦集群配置及应用</title>
    <link href="https://blog.rabcnops.cn/posts/articles/299d2304.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/299d2304.html</id>
    <published>2023-07-10T08:41:00.000Z</published>
    <updated>2023-07-10T08:44:16.590Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/prometheus.jpeg" alt="prometheus"></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>什么是 <code>Prometheus 联邦集群</code>？又是在什么样的场景下应用呢？首先，我们知道 Prometheus 是一个强大的监控平台，它是针对容器和微服务的开源监控预警工具，功能稳健，而且现在很多大厂都在使用一套监控系统（像网易、360等）。</p><p>一般地，对于初创型公司或中小型公司而言，单机部署基本上已经满足需求。而对于大规模监控而言，如：两个数据中心，其内部服务器的内网并不互通，此时单机部署的情景是无法满足我们需求的，而如果你每个数据中心都部署一套完整的监控体系，那你的数据很难进行集中管理。一般像这种夸机房、夸数据中心的情况我们就会采用 prometheus 的联邦集群模式，来进行数据集中管理、监控及告警。</p><h2 id="一、Prometheus-联邦配置"><a href="#一、Prometheus-联邦配置" class="headerlink" title="一、Prometheus 联邦配置"></a>一、Prometheus 联邦配置</h2><p>本次我以两台 Prometheus 实例进行简单演示：</p><ul><li>实例1：172.xxx.xxx.31&#x2F;20</li><li>实例2：172.xxx.xxx.250&#x2F;20</li></ul><p>说明：实例 1 为主，实例2为从，实例 1 会从实例 2 采集数据，并最终在实例 1 进行整合。</p><h3 id="1-1-安装-Prometheus"><a href="#1-1-安装-Prometheus" class="headerlink" title="1.1 安装 Prometheus"></a>1.1 安装 Prometheus</h3><blockquote><p>实例 1、2 均安装 Prometheus 服务（实例）</p></blockquote><p>这里安装过程省略，我之前的文章已经有介绍，没必要重复同样工作。</p><p>需要注意的是，实例 1 我认为你已经是安装好了 Prometheus 的整个系统（包括 alertmanaget、钉钉&#x2F;微信等接口），实例 2 只需要安装一个 Prometheus 实例即可，无需再安装任何插件。</p><h3 id="1-2-配置-Prometheus"><a href="#1-2-配置-Prometheus" class="headerlink" title="1.2 配置 Prometheus"></a>1.2 配置 Prometheus</h3><p><strong>1、实例 1 配置</strong></p><blockquote><p>在 Prometheus 实例（主）配置 Prometheus 实例（从）</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim prometheus.yml</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  - job_name: <span class="string">&#x27;prometheus-federate-xahmat&#x27;</span></span><br><span class="line">    honor_labels: <span class="literal">true</span></span><br><span class="line">    metrics_path: <span class="string">&#x27;/federate&#x27;</span></span><br><span class="line">    params:</span><br><span class="line">     <span class="string">&#x27;match[]&#x27;</span>:</span><br><span class="line">      - <span class="string">&#x27;&#123;job=~&quot;.*&quot;&#125;&#x27;</span></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">&quot;公网IP:9090&quot;</span>]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>配置说明：</p><ul><li>job_name：自定义工作名；</li><li>honor_labels：保持原标签不变；</li><li>metrics_path：匹配 URL（即配置完成后可通过此 URL 来验证是否采集到实例 2 上的数据）；</li><li>params：匹配（可进行正则匹配），下面的 <code>&#123;job=~&quot;.*&quot;&#125;</code> 采集所有来自实例 2 的指标数据，根据实际情况自定义即可；</li><li>static_configs：即实例 2 的地址（IP+Port）这里的 IP 为实例 2 的公网 IP，如果有多个实例，依次往下添加即可。</li></ul><p><strong>2、实例 2 配置</strong></p><blockquote><p>实例 2 就是正常的配置，如在实例 2 内网下的各 Host 中部署 export 数据采集插件等，不做演示，我前面也有提到。</p></blockquote><p>如：我这里安装 node_export 插件来采集 Hos 基本数据，如下编写动态主机发现文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ./node_file/node_xahmat_discovery.json</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">        <span class="string">&quot;targets&quot;</span>: [<span class="string">&quot;172.xxx.xxx.250:9100&quot;</span>],</span><br><span class="line">        <span class="string">&quot;labels&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;instance&quot;</span>: <span class="string">&quot;172.xxx.xxx.250&quot;</span>,</span><br><span class="line">                <span class="string">&quot;server_type&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;Test-XahmatCMS&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">        <span class="string">&quot;targets&quot;</span>: [<span class="string">&quot;172.xxx.xxx.251:9100&quot;</span>],</span><br><span class="line">        <span class="string">&quot;labels&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;instance&quot;</span>: <span class="string">&quot;172.xxx.xxx.251&quot;</span>,</span><br><span class="line">                <span class="string">&quot;server_type&quot;</span>: <span class="string">&quot;produce&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;Produce-Xahmatserver&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">        <span class="string">&quot;targets&quot;</span>: [<span class="string">&quot;172.xxx.xxx.249:9100&quot;</span>],</span><br><span class="line">        <span class="string">&quot;labels&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;instance&quot;</span>: <span class="string">&quot;172.xxx.xxx.249&quot;</span>,</span><br><span class="line">                <span class="string">&quot;server_type&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;Test-Xahmatserver&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>注意1：Prometheus 主配置文件中的动态主机发现路径必须与你上面编写的文件路径保持一致（如下），否则无法获取数据。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  - job_name: <span class="string">&#x27;xahmat项目&#x27;</span></span><br><span class="line">    file_sd_configs:</span><br><span class="line">      - files:</span><br><span class="line">        - ./node_file/node_xahmat_discovery.json</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>注意2：如果你修改了 Prometheus 主配置文件，你需要重启 Prometheus 服务或热加载一下 Prometheus 服务（如下）使生效。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:9090/-/reload</span><br></pre></td></tr></table></figure><h2 id="二、Prometheus-联邦验证"><a href="#二、Prometheus-联邦验证" class="headerlink" title="二、Prometheus 联邦验证"></a>二、Prometheus 联邦验证</h2><p><strong>1、数据验证</strong></p><p>在实例 1（主）上验证实例 2 的数据是否已经采集：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230710155031007.png" alt="image-20230710155031007"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230710154929994.png" alt="image-20230710154929994"></p><p><strong>2、面板展示</strong></p><p>数据无误后可在 Grafana 面板进行数据展示：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230710162448752.png" alt="image-20230710162448752"></p><p>至此，Prometheus 的联邦配置已完成！</p><p>—END</p>]]></content>
    
    
    <summary type="html">Prometheus 联邦集群配置及应用。</summary>
    
    
    
    <category term="监控系统" scheme="https://blog.rabcnops.cn/categories/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Prometheus" scheme="https://blog.rabcnops.cn/categories/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/Prometheus/"/>
    
    
    <category term="Prometheus" scheme="https://blog.rabcnops.cn/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>一文搞懂 Python 递归函数</title>
    <link href="https://blog.rabcnops.cn/posts/articles/9ee398b7.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/9ee398b7.html</id>
    <published>2023-06-21T10:00:00.000Z</published>
    <updated>2023-06-21T10:34:47.852Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/mypython-1.png" alt="mypython-1"></p><hr><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>什么是递归函数？如果你是计算机相关专业，我想你应该了解 DNS 的递归查询，实际上两者工作模式差不多。在 Python 开发语言中递归函数就是 - - &gt; 函数自己调自己。但要注意，递归函数一旦启动就会无休止执行下去，因此我们需要在适当&#x2F;理想的条件下终止递归操作。下面通过一个简单的案例进行演示，无需深入的底层原理分析。</p><h2 id="二、案例"><a href="#二、案例" class="headerlink" title="二、案例"></a>二、案例</h2><p><strong>1、需求</strong></p><p>通过递归函数，实现 1~5 数字相加之和（为了方便图示，简单求和即可）。</p><p><strong>2、编程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数定义</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 当满足条件时终止调用</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 函数调用（自己调用自己）</span></span><br><span class="line">        <span class="keyword">return</span> n + <span class="built_in">sum</span>(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取返回值</span></span><br><span class="line">result = <span class="built_in">sum</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1~5之和为：&quot;</span>, result, sep=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230621180401479.png" alt="image-20230621180401479"></p><p><strong>3、流程分析</strong></p><blockquote><p>看图即可</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/diguihanshu.png" alt="diguihanshu"></p><p>-–END</p>]]></content>
    
    
    <summary type="html">一文搞懂 Python 递归函数。</summary>
    
    
    
    <category term="Python" scheme="https://blog.rabcnops.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://blog.rabcnops.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 常用内置函数与匿名函数的应用</title>
    <link href="https://blog.rabcnops.cn/posts/articles/56f600ec.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/56f600ec.html</id>
    <published>2023-06-21T08:00:00.000Z</published>
    <updated>2023-06-21T08:07:42.901Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/mypython-1.png" alt="mypython-1"></p><hr><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>我们知道，Python 函数总体可分为两类，一类是标准函数，一类是匿名函数。其中标准函数中又可细分为内置标准函数、自定义标准函数。接下来列举一些常用的<code>内置函数</code>与匿名函数的实际应用。</p><h2 id="二、常用内置函数"><a href="#二、常用内置函数" class="headerlink" title="二、常用内置函数"></a>二、常用内置函数</h2><h3 id="2-1-max"><a href="#2-1-max" class="headerlink" title="2.1 max()"></a>2.1 max()</h3><p><strong>1、常规用法</strong></p><p><code>max()</code> 函数的比较方法是遍历可迭代数据类型进行 <code>&gt;</code> 比较，获取可迭代数据类型的最大值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">m = <span class="built_in">max</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;列表的最大值为：&#x27;</span>, m)</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221112457418.png" alt="image-20230221112457418"></p><p><strong>2、结合 <code>key</code> 使用</strong></p><p>如果我的列表里面嵌套字典，又如何比较呢？答案：<code>max() 函数设置 key</code>，具体如下。</p><p>两个数字可以直接比较大小，而两个字典是无法直接比较大小的，这个时候就可以结合匿名函数来获取返回值来进行比较。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list2 = [&#123;<span class="string">&#x27;a&#x27;</span> : <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span> : <span class="number">20</span>&#125;, &#123;<span class="string">&#x27;a&#x27;</span> : <span class="number">13</span>, <span class="string">&#x27;b&#x27;</span> : <span class="number">20</span>&#125;, &#123;<span class="string">&#x27;a&#x27;</span> : <span class="number">9</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">20</span>&#125;, &#123;<span class="string">&#x27;a&#x27;</span> : <span class="number">29</span>, <span class="string">&#x27;b&#x27;</span> : <span class="number">20</span>&#125;]</span><br><span class="line">m = <span class="built_in">max</span>(list2, key = <span class="keyword">lambda</span> x : x[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;列表的最大值为：&#x27;</span>, m)</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221112929656.png" alt="image-20230221112929656"></p><p>在 max() 函数底层，key 默认为 None，如果要指定 key，那 key 必须是一个函数，如下图解释：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221113211123.png" alt="image-20230221113211123"></p><p>因此，这里就凸显出匿名函数的优势了，就不需要额外定义函数了。</p><h3 id="2-2-enumerate"><a href="#2-2-enumerate" class="headerlink" title="2.2 enumerate()"></a>2.2 enumerate()</h3><p>使用内置函数 enumerate() 遍历数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标（一般用在 for 循环当中）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line"><span class="built_in">enumerate</span>(sequence, [start=<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释</span></span><br><span class="line">sequence -- 一个序列、迭代器或其他支持迭代对象。</span><br><span class="line">start -- 下标起始位置的值。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">返回 <span class="built_in">enumerate</span>(枚举) 对象。</span><br></pre></td></tr></table></figure><p>简单案例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">seasons = [<span class="string">&#x27;Spring&#x27;</span>, <span class="string">&#x27;Summer&#x27;</span>, <span class="string">&#x27;Fall&#x27;</span>, <span class="string">&#x27;Winter&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">enumerate</span>(seasons))     <span class="comment"># 可见输出是一个枚举对象</span></span><br><span class="line"><span class="comment"># 下标默认从0开始</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons)))  <span class="comment"># 将枚举对象强转为列表对象</span></span><br><span class="line"><span class="comment"># 设置下标从1开始</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons, start=<span class="number">1</span>)))   <span class="comment"># 设置索引下标开始位置</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221122015129.png" alt="image-20230221122015129"></p><p>普通的 for 循环：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">seq = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> seq:</span><br><span class="line">    <span class="built_in">print</span>(i, seq[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221122159341.png" alt="image-20230221122159341"></p><p>for 循环使用 enumerate：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, element <span class="keyword">in</span> <span class="built_in">enumerate</span>(seq):</span><br><span class="line">    <span class="built_in">print</span>(i, element)</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221122159341.png" alt="image-20230221122159341"></p><h3 id="2-3-map"><a href="#2-3-map" class="headerlink" title="2.3 map()"></a>2.3 map()</h3><p>如使用 map() 函数对列表中元素做运算操作。</p><p>不使用 <code>map()</code> 函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, i <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    list1[index] = i + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221141759047.png" alt="image-20230221141759047"></p><p>使用 <code>map()</code> 函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用map()内置函数实现列表做加法运算</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x + <span class="number">2</span>, list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221141759047.png" alt="image-20230221141759047"></p><p><mark>可见，两者的功能完全一样。</mark></p><p>如果我只对基数+1，偶数不变，如何实现？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用map()内置函数实现列表做加法运算</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> x + <span class="number">1</span>, list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221143318606.png" alt="image-20230221143318606"></p><h3 id="3-4-reduce"><a href="#3-4-reduce" class="headerlink" title="3.4 reduce()"></a>3.4 reduce()</h3><p>对序列中的元素进行加减乘除运算的函数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用map()内置函数实现列表做加法运算</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">tuple1 = (<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x, y: x + y, tuple1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221144256222.png" alt="image-20230221144256222"></p><p>内部实现原理：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221144343984.png" alt="image-20230221144343984"></p><p><mark>需要注意，reduce 必须且至少要传入两个参数，否则报错（因为这个函数的功能是实现两个参数依次相加），如下：</mark></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用map()内置函数实现列表做加法运算</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">tuple1 = (<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>)</span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x, y: x + y, tuple1)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">tuple2 = (<span class="number">1</span>)</span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x, y: x + y, tuple2)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221144836442.png" alt="image-20230221144836442"></p><p>正确做法是：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用map()内置函数实现列表做加法运算</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">tuple1 = (<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>)</span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x, y: x + y, tuple1)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">tuple2 = (<span class="number">1</span>,)  <span class="comment"># 即便你不输入任何内容，你也要把元素置为空（从内部实现原理initial就知道）</span></span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x, y: x + y, tuple2)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221145613502.png" alt="image-20230221145613502"></p><p>当然，你可以指定 initial 值，当你只有一个元素的时候，你可以来进行指定。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用map()内置函数实现列表做加法运算</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">tuple1 = (<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>)</span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x, y: x + y, tuple1)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">tuple2 = (<span class="number">1</span>,)  <span class="comment"># 即便你不输入任何内容，你也要把元素置为空（从内部实现原理initial就知道）</span></span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x, y: x + y, tuple2, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221145732309.png" alt="image-20230221145732309"></p><p><mark>那这个 10 是指的 x 呢，还是 y 呢？我们做一遍减法运算就知道：</mark></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用map()内置函数实现列表做加法运算</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">tuple1 = (<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>)</span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x, y: x + y, tuple1)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">tuple2 = (<span class="number">1</span>,)  <span class="comment"># 即便你不输入任何内容，你也要把元素置为空（从内部实现原理initial就知道）</span></span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x, y: x - y, tuple2, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221145940527.png" alt="image-20230221145940527"></p><p>可见 initial 初始值指的是 x（即排在第一位）。</p><h3 id="2-5-filter"><a href="#2-5-filter" class="headerlink" title="2.5 filter()"></a>2.5 filter()</h3><p>过滤操作，比如将列表中 &gt; 10 的数全部过滤出来。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">2</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</span><br><span class="line">result = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &gt; <span class="number">10</span>, list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221150735703.png" alt="image-20230221150735703"></p><p>其内部相当于以下操作：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">2</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">list1</span>):</span><br><span class="line">    list2 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">10</span>:</span><br><span class="line">            list2.append(i)</span><br><span class="line">    <span class="keyword">return</span> list2</span><br><span class="line"></span><br><span class="line">f = func(list1)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure><p>找出所有年龄大于20岁的学生：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">21</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;steven&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">27</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出所有年龄大于20岁的学生</span></span><br><span class="line">result = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x[<span class="string">&#x27;age&#x27;</span>] &gt; <span class="number">20</span>, students)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221152546266.png" alt="image-20230221152546266"></p><h3 id="2-6-sorted"><a href="#2-6-sorted" class="headerlink" title="2.6 sorted()"></a>2.6 sorted()</h3><p>用于排序（从小到大&#x2F;从大到小）。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">21</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;steven&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">27</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按年龄从小到大排序（升序）</span></span><br><span class="line">result = <span class="built_in">sorted</span>(students, key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按年龄从大到小排序（倒序）</span></span><br><span class="line">result = <span class="built_in">sorted</span>(students, key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;age&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230221154446482.png" alt="image-20230221154446482"></p><p><mark>以上的这些常用内置函数都用到了匿名函数，可见匿名函数的重要性与实用性。</mark></p>]]></content>
    
    
    <summary type="html">Python 常用内置函数与匿名函数的应用。</summary>
    
    
    
    <category term="Python" scheme="https://blog.rabcnops.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://blog.rabcnops.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>官方都不告诉你的 Windows ISO 下载方式</title>
    <link href="https://blog.rabcnops.cn/posts/articles/29a76d20.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/29a76d20.html</id>
    <published>2023-06-14T12:20:00.000Z</published>
    <updated>2023-06-14T12:24:06.866Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230614183145530.png" alt="image-20230614183145530"></p><hr><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>我们都知道，在日常生活中，经常会遇到各种操作系统的安装，如 Windows、Linux 等，一般都会通过 ISO 来安装。而在很多第三方地址中下载的 ISO 镜像通常会捆绑一些<code>流氓</code>软件，很是难受。那官方的纯净 ISO 包怎么下载呢？接着往下看。</p><p>搜索官方 ISO 镜像文件，点击进去你会发现：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230614175615509.png" alt="image-20230614175615509"></p><p>并没有 ISO 下载的按钮，只有<code>在线升级/PE 媒介制作</code>下载的按钮，如下图：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230614175929311.png" alt="image-20230614175929311"></p><p>那这个时候怎么调出 ISO 的下载按钮呢？接下来演示一下。</p><h2 id="二、下载"><a href="#二、下载" class="headerlink" title="二、下载"></a>二、下载</h2><p><strong>1、F12 进入开发者模式</strong></p><blockquote><p>下图第二步选择完成后，需要刷新一下当前网页，才会显示<code>选择版本</code>这个选项。</p><p>版本选择这里，我们选择 <code>multi-edition ISO</code> 这个版本，因为这个版本**集成了专业版和家庭版。**如果是在当前系统下升级安装，安装程序自动选择与当前系统版本对应得版本安装。如果是全新安装，安装开始时可以手动选择安装专业版还是家庭版。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230614181055343.png" alt="image-20230614181055343"></p><p><strong>2、版本选择完成后点击 <code>确认</code></strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230614181413406.png" alt="image-20230614181413406"></p><p><strong>3、上一步确认后会接着让你选择 ISO 的语言</strong></p><blockquote><p>我们选择<code>简体中文</code>，并点击确认</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230614181544079.png" alt="image-20230614181544079"></p><p><strong>4、上一步确认之后，就会显示镜像下载按钮</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230614181728965.png" alt="image-20230614181728965"></p><p>我们可以直接点击你所需的位数下载即可，也可以退出 F12，然后右键通过迅雷下载：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230614182219518.png" alt="image-20230614182219518"></p><p>下载完成就可以将 ISO 镜像烧录到你的 PE 盘了！</p><p>-–END</p>]]></content>
    
    
    <summary type="html">官方都不告诉你的 Windows ISO 下载方式。</summary>
    
    
    
    <category term="Windows" scheme="https://blog.rabcnops.cn/categories/Windows/"/>
    
    
    <category term="OS" scheme="https://blog.rabcnops.cn/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>基于 Kafka 构建 EL(F)K 高并发分布式日志系统</title>
    <link href="https://blog.rabcnops.cn/posts/articles/ac3cbe0c.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/ac3cbe0c.html</id>
    <published>2023-06-07T08:13:00.000Z</published>
    <updated>2023-06-07T08:21:10.107Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626161553527.png" alt="image-20220626161553527"></p><blockquote><p>主讲：rab</p><p>职位：DevOps工程师</p><p>Date：2022&#x2F;06&#x2F;07</p></blockquote><hr><h2 id="一、ELK-介绍"><a href="#一、ELK-介绍" class="headerlink" title="一、ELK 介绍"></a>一、ELK 介绍</h2><h3 id="1-1-什么是-ELK-？"><a href="#1-1-什么是-ELK-？" class="headerlink" title="1.1 什么是 ELK ？"></a>1.1 什么是 ELK ？</h3><p><strong>ELK</strong>（Elasticsearch、Logstash、Kibana），即三款开源软件首字母缩写，ELK 不是一个软件，而是一套开源的解决方案。</p><h3 id="1-2-为什么选择-ELK-？"><a href="#1-2-为什么选择-ELK-？" class="headerlink" title="1.2 为什么选择 ELK ？"></a>1.2 为什么选择 ELK ？</h3><p>通过日志排查，发现问题根源并解决问题：</p><p><strong>1、单台或几台服务器日志查看</strong></p><p>我们可以通过 linux命令，<code>tail、cat、grep、awk</code>等过滤去查询定位日志查问题。</p><p><strong>2、几十台或几百台服务器日志查看</strong></p><p>此时再通过<code>tail、cat、grep、awk</code>等过滤去查询定位日志查问题是不现实的，时间成本是非常高的，因此我们就会选择这一套开源的解决方案。</p><h3 id="1-3-ELK-具备哪些特点？"><a href="#1-3-ELK-具备哪些特点？" class="headerlink" title="1.3 ELK 具备哪些特点？"></a>1.3 ELK 具备哪些特点？</h3><ul><li>收集－能够采集多种来源的日志数据；</li><li>传输－能够稳定的把日志数据传输到中央系统；</li><li>存储－如何存储日志数据；</li><li>分析－可以支持 UI 分析；</li><li>警告－能够提供错误报告，监控机制。</li></ul><h3 id="1-4-ELK-组件介绍"><a href="#1-4-ELK-组件介绍" class="headerlink" title="1.4 ELK 组件介绍"></a>1.4 ELK 组件介绍</h3><h4 id="1-4-1-Elasticsearch"><a href="#1-4-1-Elasticsearch" class="headerlink" title="1.4.1 Elasticsearch"></a>1.4.1 Elasticsearch</h4><p><code>Elasticsearch</code>是一个实时的分布式搜索、分析引擎，使用 Java 语言开发，可进行全文检索、结构化检索及分析。</p><p><strong>主要特点：</strong></p><ul><li>面向文档的数据存储；</li><li>高可用、易扩展；</li><li>支持 Json 等各种文档格式；</li><li>支持集群、分片和复制。</li></ul><h4 id="1-4-2-Logstash"><a href="#1-4-2-Logstash" class="headerlink" title="1.4.2 Logstash"></a>1.4.2 Logstash</h4><p><code>Logstash</code>是一个实时的数据收集引擎，使用 JRuby 语言开发。</p><p><strong>主要特点：</strong></p><ul><li>几乎可以访问任何数据；</li><li>可以和多种外部应用结合;</li><li>支持弹性扩展。</li></ul><p><strong>主要组成：</strong></p><ul><li>Shipper－发送日志数据</li><li>Broker－收集数据，缺省内置 Redis</li><li>Indexer－数据写入</li></ul><h4 id="1-4-3-Kibana"><a href="#1-4-3-Kibana" class="headerlink" title="1.4.3 Kibana"></a>1.4.3 Kibana</h4><p><code>Kibana</code>是一款基于 <code>Apache</code>开源协议，使用 <code>JavaScript</code>语言编写，为 <code>Elasticsearch</code> 提供分析和可视化的 Web 平台。</p><p><strong>主要特点：</strong></p><ul><li>快速索引检索；</li><li>数据交互；</li><li>可生成各种维度数据图表。</li></ul><h2 id="二、架构及应用场景"><a href="#二、架构及应用场景" class="headerlink" title="二、架构及应用场景"></a>二、架构及应用场景</h2><h3 id="2-1-基础架构"><a href="#2-1-基础架构" class="headerlink" title="2.1 基础架构"></a>2.1 基础架构</h3><p>在这种架构中，只有一个 Logstash、Elasticsearch 和 Kibana 实例。</p><p><strong>基础架构1：</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220623183334183.png" alt="image-20220623183334183"></p><p><strong>基础架构2：</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220623183357191.png" alt="image-20220623183357191"></p><p><strong>流程：</strong></p><p>Logstash 收集日志并过滤加工数据 ——&gt; Elasticsearch 做数据持久化 ——&gt; Kibana 展示</p><p><strong>场景：</strong></p><ul><li>这种结构因为需要在各个服务器上部署 Logstash，而它比较消耗 CPU 和内存资源；</li><li>所以比较适合计算资源充足的服务器，否则容易造成服务器性能下降，甚至可能导致无法正常工作。</li></ul><h3 id="2-2-高可用架构"><a href="#2-2-高可用架构" class="headerlink" title="2.2 高可用架构"></a>2.2 高可用架构</h3><p>在这种架构中，将轻量级的 FileBeat 代替了 Logstash 来做日志收集，并引入了消息队列机制，且各部分都做了集群。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220627141707143.png" alt="image-20220627141707143"></p><p><strong>流程：</strong></p><p>FileBeat 收集日志 ——&gt; 输出到消息队列 ——&gt; Logstash 获取消息队列数据 ——&gt; Elasticsearch 做数据持久化 ——&gt;  Kibana 展示</p><p><strong>场景：</strong></p><ul><li>这种架构适合于日志规模比较庞大的情况；</li><li>但由于 <code>Logstash</code> 日志解析节点和 <code>Elasticsearch</code> 的负荷比较重，可将他们配置为集群模式，以分担负荷；</li><li>引入消息队列是为了：均衡网络传输、降低网络闭塞。避免数据丢失。</li></ul><h2 id="三、VM-部署-ELK-集群"><a href="#三、VM-部署-ELK-集群" class="headerlink" title="三、VM 部署 ELK 集群"></a>三、VM 部署 ELK 集群</h2><blockquote><p>ELK 中文社区资源下载：<a href="https://elasticsearch.cn/download/#seg-3">https://elasticsearch.cn/download/#seg-3</a></p><p>ELK 官方资源下载：<a href="https://www.elastic.co/cn/downloads/">https://www.elastic.co/cn/downloads/</a></p></blockquote><h3 id="3-1-主机规划"><a href="#3-1-主机规划" class="headerlink" title="3.1 主机规划"></a>3.1 主机规划</h3><table><thead><tr><th>Service</th><th>Version</th><th>角色</th></tr></thead><tbody><tr><td>192.168.56.133 - 2C&#x2F;2G 30G - es-1</td><td>6.8.23</td><td>ES 分布式存储</td></tr><tr><td>192.168.56.134 - 2C&#x2F;2G 30G - es-2</td><td>-</td><td>-</td></tr><tr><td>192.168.56.135 - 2C&#x2F;2G 30G - es-3</td><td>-</td><td>-</td></tr><tr><td>192.168.56.137 - 2C&#x2F;2G 30G - kafka-1 zookeeper-1</td><td>ZK：3.7.1<br />Kafka：3.1.1</td><td>Kafka 消息队列</td></tr><tr><td>192.168.56.138 - 2C&#x2F;2G 30G - kafka-2 zookeeper-2</td><td>-</td><td>-</td></tr><tr><td>192.168.56.139 - 2C&#x2F;2G 30G - kafka-3 zookeeper-3</td><td>-</td><td>-</td></tr><tr><td>192.168.56.140 - 1C&#x2F;2G 30G - logstash-1</td><td>6.8.23</td><td>Logstash 分流</td></tr><tr><td>192.168.56.141 - 1C&#x2F;2G 30G - logstash-2</td><td>-</td><td>-</td></tr><tr><td>192.168.56.136 - 2C&#x2F;2G 30G - kabana - nginx</td><td>6.8.23</td><td>web 前端数据展示</td></tr><tr><td>192.168.56.136 - 2C&#x2F;2G 30G - kabana</td><td>-</td><td>-</td></tr></tbody></table><blockquote><p>采集插件（Filebeat）版本：6.8.23 </p><p>ELK 各插件版本最好保持一致，否则可能会导致一些采集异常。</p></blockquote><h3 id="3-2-应用部署"><a href="#3-2-应用部署" class="headerlink" title="3.2 应用部署"></a>3.2 应用部署</h3><blockquote><p>集群场景下的服务器，需对时间进行同步，服务器时间同步方法：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装ntp服务</span></span><br><span class="line">yum -y install ntp ntpdate</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同步网络时间服务器</span></span><br><span class="line">ntpdate 0.asia.pool.ntp.org</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将系统时间写入硬件时间（防止重启后时间被重置）</span></span><br><span class="line">hwclock --systohc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其他网络时间服务器</span></span><br><span class="line">time.nist.gov</span><br><span class="line">time.nuri.net</span><br><span class="line">0.asia.pool.ntp.org</span><br><span class="line">1.asia.pool.ntp.org</span><br><span class="line">2.asia.pool.ntp.org</span><br><span class="line">3.asia.pool.ntp.org</span><br></pre></td></tr></table></figure><h3 id="3-3-ES-集群"><a href="#3-3-ES-集群" class="headerlink" title="3.3 ES 集群"></a>3.3 ES 集群</h3><blockquote><p>三台 ES 服务器同时操作</p></blockquote><p><strong>1、修改服务器主机名</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname es-1</span><br><span class="line">hostnamectl set-hostname es-2</span><br><span class="line">hostnamectl set-hostname es-3</span><br></pre></td></tr></table></figure><p><strong>2、互作本地解析</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.56.133 es-1</span><br><span class="line">192.168.56.134 es-2</span><br><span class="line">192.168.56.135 es-3</span><br></pre></td></tr></table></figure><p><strong>3、创建数据目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data</span><br></pre></td></tr></table></figure><p><strong>4、上传并解压ES二进制文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xzf elasticsearch-6.0.1.tar.gz -C /data/</span><br><span class="line">mv /data/elasticsearch-6.0.1 /data/elasticsearch</span><br></pre></td></tr></table></figure><p><strong>5、修改文件句柄数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/security/limits.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注：设置为 65535 不行，至少 65536</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果配置文件开启bootstrap.memory_lock，内存锁，则需要添加下列最后两行</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc  65536</span><br><span class="line">* hard nproc  65536</span><br><span class="line">* hard memlock unlimited</span><br><span class="line">* soft memlock unlimited</span><br></pre></td></tr></table></figure><p><strong>6、修改虚拟内存最大限制</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;vm.max_map_count = 655360&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>系统级别：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system.conf</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">DefaultLimitNOFILE=65536</span><br><span class="line">DefaultLimitNPROC=32000</span><br><span class="line">DefaultLimitMEMLOCK=infinity</span><br></pre></td></tr></table></figure><p><strong>7、创建 ES 普通用户</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd es</span><br><span class="line">echo &quot;zhurs@123&quot; | passwd --stdin es</span><br></pre></td></tr></table></figure><p><strong>8、修改目录权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R es.es /data/elasticsearch</span><br></pre></td></tr></table></figure><p><strong>9、修改配置文件</strong></p><p><strong>es-1</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cd /data/elasticsearch/config</span><br><span class="line">cp elasticsearch.yml elasticsearch.yml.default</span><br><span class="line">vim elasticsearch.yml</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cluster.name 三者需相同</span></span><br><span class="line">cluster.name: es-cluster</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.name 节点名，设置与主机名一致即可</span></span><br><span class="line">node.name: es-1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.master 符合成为主节点的条件</span></span><br><span class="line">node.master: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.data 符合成为数据节点的条件</span></span><br><span class="line">node.data: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.data 数据存储路径（下面会进行创建）</span></span><br><span class="line">path.data: /data/elasticsearch/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.logs 日志存储路径（下面会进行创建）</span></span><br><span class="line">path.logs: /data/elasticsearch/logs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bootstrap.memory_lock 锁住内存，即只使用内存，不使用交换分区</span></span><br><span class="line">bootstrap.memory_lock: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">network.host 允许所有IP访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http.port web访问端口</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.ping.unicast.hosts 关闭单播</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.56.133&quot;, &quot;192.168.56.134&quot;, &quot;192.168.56.135&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.ping_timeout 节点在发现过程中的等待超时时间</span></span><br><span class="line">discovery.zen.ping_timeout: 120s</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.fd.ping_retries 节点发现重试次数</span></span><br><span class="line">discovery.zen.fd.ping_retries: 10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">client.transport.ping_timeout  ping命令的响应超时时间</span></span><br><span class="line">client.transport.ping_timeout: 60s</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决跨域问题</span></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>es-2</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cd /data/elasticsearch/config</span><br><span class="line">cp elasticsearch.yml elasticsearch.yml.default</span><br><span class="line">vim elasticsearch.yml</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cluster.name 三者需相同</span></span><br><span class="line">cluster.name: es-cluster</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.name 节点名，设置与主机名一致即可</span></span><br><span class="line">node.name: es-2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.master 符合成为主节点的条件</span></span><br><span class="line">node.master: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.data 符合成为数据节点的条件</span></span><br><span class="line">node.data: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.data 数据存储路径（下面会进行创建）</span></span><br><span class="line">path.data: /data/elasticsearch/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.logs 日志存储路径（下面会进行创建）</span></span><br><span class="line">path.logs: /data/elasticsearch/logs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bootstrap.memory_lock 锁住内存，即只使用内存，不使用交换分区</span></span><br><span class="line">bootstrap.memory_lock: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">network.host 允许所有IP访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http.port web访问端口</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.ping.unicast.hosts 关闭单播</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.56.133&quot;, &quot;192.168.56.134&quot;, &quot;192.168.56.135&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.ping_timeout 节点在发现过程中的等待超时时间</span></span><br><span class="line">discovery.zen.ping_timeout: 120s</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.fd.ping_retries 节点发现重试次数</span></span><br><span class="line">discovery.zen.fd.ping_retries: 10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">client.transport.ping_timeout  ping命令的响应超时时间</span></span><br><span class="line">client.transport.ping_timeout: 60s</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决跨域问题</span></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>es-3</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cd /data/elasticsearch/config</span><br><span class="line">cp elasticsearch.yml elasticsearch.yml.default</span><br><span class="line">vim elasticsearch.yml</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cluster.name 三者需相同</span></span><br><span class="line">cluster.name: es-cluster</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.name 节点名，设置与主机名一致即可</span></span><br><span class="line">node.name: es-3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.master 符合成为主节点的条件</span></span><br><span class="line">node.master: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.data 符合成为数据节点的条件</span></span><br><span class="line">node.data: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.data 数据存储路径（下面会进行创建）</span></span><br><span class="line">path.data: /data/elasticsearch/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.logs 日志存储路径（下面会进行创建）</span></span><br><span class="line">path.logs: /data/elasticsearch/logs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bootstrap.memory_lock 锁住内存，即只使用内存，不使用交换分区</span></span><br><span class="line">bootstrap.memory_lock: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">network.host 允许所有IP访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http.port web访问端口</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.ping.unicast.hosts 关闭单播</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.56.133&quot;, &quot;192.168.56.134&quot;, &quot;192.168.56.135&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.ping_timeout 节点在发现过程中的等待超时时间</span></span><br><span class="line">discovery.zen.ping_timeout: 120s</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.fd.ping_retries 节点发现重试次数</span></span><br><span class="line">discovery.zen.fd.ping_retries: 10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">client.transport.ping_timeout  ping命令的响应超时时间</span></span><br><span class="line">client.transport.ping_timeout: 60s</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决跨域问题</span></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>10、创建数据、日志目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/elasticsearch/data</span><br><span class="line">mkdir -p /data/elasticsearch/logs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">授权</span></span><br><span class="line">chown es.es /data/elasticsearch/data</span><br><span class="line">chown es.es /data/elasticsearch/logs</span><br></pre></td></tr></table></figure><p><strong>11、安装 JDK</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传并解压安装包</span></span><br><span class="line">tar xzf jdk-8u202-linux-x64.tar.gz -C /data/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mv</span> 重命名</span></span><br><span class="line">mv /data/jdk1.8.0_202/ /data/jdk</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加环境变量</span></span><br><span class="line">cat /etc/profile.d/jdk.sh </span><br><span class="line">export PATH=/data/jdk/bin:$PATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证</span></span><br><span class="line">[root@es-1 data]# java -version</span><br><span class="line">java version &quot;1.8.0_202&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_202-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)</span><br></pre></td></tr></table></figure><p><strong>12、修改 JVM 参数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认1g</span></span><br><span class="line">cat /data/elasticsearch/config/jvm.options</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">-Xms512m</span><br><span class="line">-Xmx512m</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>13、启动 ES 集群</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - es -c &quot;nohup /data/elasticsearch/bin/elasticsearch &amp;&quot;</span><br></pre></td></tr></table></figure><p><strong>14、配置 systemd 管理</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=elasticsearch</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">User=es</span><br><span class="line">ExecStart=/data/elasticsearch/bin/elasticsearch -d</span><br><span class="line">PrivateTmp=true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定此进程可以打开的最大文件数</span></span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定此进程可以打开的最大进程数</span></span><br><span class="line">LimitNPROC=65536</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最大虚拟内存</span></span><br><span class="line">LimitAS=infinity</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最大文件大小</span></span><br><span class="line">LimitFSIZE=infinity</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">超时设置0-永不超时</span></span><br><span class="line">TimeoutStopSec=0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SIGTERM是停止java进程的信号</span></span><br><span class="line">KillSignal=SIGTERM</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">信号只发给JVM</span></span><br><span class="line">KillMode=process</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">java进程不会被杀掉</span></span><br><span class="line">SendSIGKILL=no</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">正常退出状态</span></span><br><span class="line">SuccessExitStatus=143</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启动服务并做开机自启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start es.service</span><br><span class="line">systemctl enable es.service</span><br></pre></td></tr></table></figure><p>浏览器输入 URL 查看集群状态：<a href="http://192.168.56.134:9200/_cat/nodes?pretty">http://192.168.56.134:9200/_cat/nodes?pretty</a></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220623161419031.png" alt="image-20220623161419031"></p><p>&#x3D;&#x3D;至此，ES 集群搭建完毕，可通过简单的 head 插件查看集群状态，head 插件可部署在 kibana 服务器上，具体看 6.2.4 部分。&#x3D;&#x3D;</p><p><strong>15、集群可用性测试</strong></p><p>具体测试看 6.2.2 小结</p><h3 id="3-4-Logstash-分流"><a href="#3-4-Logstash-分流" class="headerlink" title="3.4 Logstash 分流"></a>3.4 Logstash 分流</h3><blockquote><p><a href="https://www.elastic.co/guide/en/logstash/current/index.html">《官方文档》</a></p></blockquote><p><strong>1、安装 JAVA 环境</strong></p><blockquote><p>Logstash 依赖 JDK</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar xzf jdk-8u202-linux-x64.tar.gz -C /data/</span><br><span class="line">mv /data/jdk1.8.0_202/ /data/jdk</span><br><span class="line">ln -s /data/jdk/bin/* /usr/bin/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可用性测试</span></span><br><span class="line">java -version</span><br><span class="line">java version &quot;1.8.0_202&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_202-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)</span><br></pre></td></tr></table></figure><p><strong>2、安装 Logstash</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xzf logstash-6.0.1.tar.gz -C /data/</span><br><span class="line">mv /data/logstash-6.0.1/ /data/logstash</span><br></pre></td></tr></table></figure><p><strong>3、命令行测试 ES 集群可用性</strong></p><blockquote><p>logstash 可用性测试</p><p>stdin{}：标准输入</p><p>stdout{}：标准输出</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/data/logstash/bin/logstash -e &#x27;input &#123; stdin &#123;&#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出结果：时间戳  主机名  内容</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622121128625.png" alt="image-20220622121128625"></p><blockquote><p>将标准输入内容以指定语言格式输出至当前终端</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/logstash/bin/logstash -e &#x27;input &#123; stdin&#123;&#125; &#125; output &#123; stdout &#123; codec =&gt; rubydebug &#125; &#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622121532407.png" alt="image-20220622121532407"></p><blockquote><p>将标准输入内容输出至 ES 集群</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/logstash/bin/logstash -e &#x27;input &#123; stdin &#123;&#125; &#125; output &#123; elasticsearch &#123; hosts =&gt; [&quot;192.168.56.133:9200&quot;] &#125; &#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622122512629.png" alt="image-20220622122512629"></p><p>此时访问 head 插件看看 ES 集群情况，看是否收到刚刚我们输入的内容<code>hello xgxy</code></p><blockquote><p>es-head 安装看 6.2.3 部分</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622122928152.png" alt="image-20220622122928152"></p><p>数据会产生5个分片数和2个副本数，分片和副本数分别存储在不同节点上。</p><p><strong>4、ES 集群状态</strong></p><p>ES 集群有三个状态：green、yellow、red</p><ul><li><p>green：表示所有主分片和复制分片都可用（整个集群可用）</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622143341046.png" alt="image-20220622143341046"></p></li><li><p>yellow：表示所有主分片可用，部分复制分片不可以。比如我故意停掉 es-1，再次查看集群状态</p><blockquote><p>在停掉 es-1 的时候，集群状态处于部分副本数据不可用的情况</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622144602406.png" alt="image-20220622144602406"></p><blockquote><p>但是，过了一段时间后，es-1 的主分片和复制分片被转移到 es-2、es-3 节点，实现故障转移，保证数据完整性。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622144231764.png" alt="image-20220622144231764"></p><blockquote><p>此时，我再次启动 es-1 ，再次并入集群，这时 es-1 会被重新分片分配及副本，集群状态呈 green</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622144352162.png" alt="image-20220622144352162"></p></li><li><p>red：表示部分主分片不可用</p></li></ul><p>在 yellow 状态，我故意停掉了 es-1 节点，所以其呈现 yellow 状态，但你会发现，我停掉的是 data-node 节点（数据节点），那我把 master 节点 down 掉，会发生什么？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@es-3 0]# systemctl stop es.service</span><br></pre></td></tr></table></figure><p>此时会呈现 yellow 状态：<br><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622145723959.png" alt="image-20220622145723959"></p><p>此时，在指定时间内，进群会进行 master 选举，并为整个集群分配分片，实现故障转移：完成后呈 green 集群可用状态。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622145958425.png" alt="image-20220622145958425"></p><p>我有重新启动 es-3，看看集群情况：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622150434411.png" alt="image-20220622150434411"></p><p>此时，它会以数据节点并入集群，并分配分片。</p><p><strong>5、Logstash 收集日志测试</strong></p><p>由于我的 Kibana 安装了 nginx ，也是需要进行日志收集的，所以我把 Logstash 安装在 kibana 服务器上进行日志采集。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xzf logstash-6.0.1.tar.gz -C /data/</span><br><span class="line">mv /data/logstash-6.0.1/ /data/logstash</span><br></pre></td></tr></table></figure><p>将 nginx 日志格式定义为 json 格式，并引用 json 格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">log_format  json &#x27;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;@version&quot;:&quot;1&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;client&quot;:&quot;$remote_addr&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;url&quot;:&quot;$uri&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;status&quot;:&quot;$status&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;domain&quot;:&quot;$host&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;host&quot;:&quot;$server_addr&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;size&quot;:$body_bytes_sent,&#x27;</span><br><span class="line">                           &#x27;&quot;responsetime&quot;:$request_time,&#x27;</span><br><span class="line">                           &#x27;&quot;referer&quot;: &quot;$http_referer&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;ua&quot;: &quot;$http_user_agent&quot;&#x27;</span><br><span class="line">               &#x27;&#125;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  json;</span><br></pre></td></tr></table></figure><p>创建 logstash 配置文件目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/logstash/config/conf.d</span><br></pre></td></tr></table></figure><blockquote><p>在 conf.d 目录下添加<code>shopweb.conf</code>文件</p><p>该目录可定义多个 .conf 文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cat shopweb.conf</span><br><span class="line"></span><br><span class="line">input&#123;</span><br><span class="line">    file&#123;</span><br><span class="line">        path =&gt; [&quot;/data/nginx/logs/access.log&quot;]</span><br><span class="line">        type =&gt; &quot;shopweb&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output&#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;]  </span><br><span class="line">        index =&gt; [&quot;%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字段说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">input：输入插件，让logstash可以读取特定的事件源</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">file：从文件中读取</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path：要输入的文件路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">type</span>：定义一个类型，通用选项（因此，每个项目需定义一个access.log）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个<span class="built_in">type</span>说明了你这个是什么样属性的日志，数据库日志我就定义：mysql,订单日志我就定义：order</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">start_position：开始采集日志的位置，beginning表示从头开始（即开始到当前的日志全部收集）</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output：输出插件，将事件发送到特定目标</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">elasticsearch：输出到es</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hosts：指定es服务的 ip + 端口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">index：引用input中的<span class="built_in">type</span>名称，定义输出的格式，并作为索引，然后在kibana上面可以添加该索引</span></span><br></pre></td></tr></table></figure><p>启动 logstash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前台启动</span></span><br><span class="line">/data/logstash/bin/logstash -f /data/logstash/config/conf.d/ --config.reload.automatic</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台启动</span></span><br><span class="line">nohup /data/logstash/bin/logstash -f /data/logstash/config/conf.d/ --config.reload.automatic &amp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--config.reload.automatic：可以加载conf.d 目录下的所有.conf文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">想要单独加载的话，则去掉--config.reload.automatic参数，并指定具体的 .conf 文件</span></span><br></pre></td></tr></table></figure><p>浏览器刷一下 nginx 页面，然后取 head 插件看看是否成功存储，如下图，shopweb-2022.06.22 正好是我们 shopweb.conf 文件中 output 中 index 定义的格式：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622161423194.png" alt="image-20220622161423194"></p><p>数据浏览：这正是我 kibana 服务上的你 nginx 的日志数据：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622162146328.png" alt="image-20220622162146328"></p><p>&#x3D;&#x3D;注意：input 可以写多个，如下&#x3D;&#x3D;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">vim all.conf</span><br><span class="line"></span><br><span class="line">input&#123;</span><br><span class="line">    file&#123;</span><br><span class="line">        path =&gt; [&quot;/data/nginx/logs/access.log&quot;]</span><br><span class="line">        type =&gt; &quot;nginx_access&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">input&#123;</span><br><span class="line">    file&#123;</span><br><span class="line">        path =&gt; [&quot;/var/log/messages&quot;]</span><br><span class="line">        type =&gt; &quot;system_error&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output&#123;</span><br><span class="line">    if [type] ==  &quot;nginx_access&quot; &#123;</span><br><span class="line">        elasticsearch &#123;</span><br><span class="line">            hosts =&gt; [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;] </span><br><span class="line">            index =&gt; [&quot;%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;]</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    if [type] ==  &quot;system_error&quot; &#123;</span><br><span class="line">        elasticsearch &#123;</span><br><span class="line">            hosts =&gt; [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;] </span><br><span class="line">            index =&gt; [&quot;%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;]</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要 input 对应的文件产生新的日志，logstash 实时就会往 ES 集群发送。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622170153169.png" alt="image-20220622170153169"></p><h3 id="3-5-Kibana-前端展示"><a href="#3-5-Kibana-前端展示" class="headerlink" title="3.5 Kibana 前端展示"></a>3.5 Kibana 前端展示</h3><p><strong>1、安装 head 插件</strong></p><blockquote><p>由于安装需要各种编译，所以选择 docker 安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=es-head \</span><br><span class="line">  --privileged=true \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -v /etc/localtime:/etc/localtime \</span><br><span class="line">  -p 9100:9100 \</span><br><span class="line">  docker.io/mobz/elasticsearch-head:5-alpine</span><br></pre></td></tr></table></figure><blockquote><p>验证集群状态，此时无任何数据存储。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622103923524.png" alt="image-20220622103923524"></p><p><strong>2、安装 kibana</strong></p><p>尽管在 6.2.2 节看到已经 ES 集群已经成功接收到数据，但是 es-head 插件对数据的浏览是不友好的，因此我们需要安装部署 kibana 来做 ES 数据的 web 端展示（分析、检索等）</p><h3 id="3-6-Nginx-反向代理"><a href="#3-6-Nginx-反向代理" class="headerlink" title="3.6 Nginx 反向代理"></a>3.6 Nginx 反向代理</h3><blockquote><ul><li>代理 head</li><li>代理 kibana </li><li>从而实现统一访问</li><li>采用 host 网络模式</li></ul></blockquote><p><strong>1、采用 docker 安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-------------------------------自定义变量--------------------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义nginx主目录</span></span><br><span class="line">dir_conf=&quot;/data/nginx/conf&quot;</span><br><span class="line">dir_html=&quot;/data/nginx/html&quot;</span><br><span class="line">dir_logs=&quot;/data/nginx/logs&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置镜像版本</span></span><br><span class="line">img=&quot;nginx:1.20.2&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器名</span></span><br><span class="line">name=&quot;nginx&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">端口映射(针对bridge模式设置，host模式忽略)</span></span><br><span class="line">http_port=&quot;80&quot;</span><br><span class="line">https_port=&quot;443&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网络模式</span></span><br><span class="line">net=&quot;bridge&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">host模式：使用 --net=host 指定。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">none模式：使用 --net=none 指定。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bridge模式：使用 --net=bridge 指定，默认设置。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">container模式：使用 --net=container:NAME_or_ID 指定</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建目录</span></span><br><span class="line">mkdir -p $&#123;dir_conf&#125; &amp;&amp; echo -e &quot;已创建 $&#123;dir_conf&#125; 目录，继续执行... \033[32m[ok]\033[0m&quot; || echo -e &quot;$&#123;dir_conf&#125; 目录已存在，继续执行... \033[33m[Already exists]\033[0m&quot;</span><br><span class="line">mkdir -p $&#123;dir_html&#125; &amp;&amp; echo -e &quot;已创建 $&#123;dir_html&#125; 目录，继续执行... \033[32m[ok]\033[0m&quot; || echo -e &quot;$&#123;dir_html&#125; 目录已存在，继续执行... \033[33m[Already exists]\033[0m&quot;</span><br><span class="line">mkdir -p $&#123;dir_logs&#125; &amp;&amp; echo -e &quot;已创建 $&#123;dir_logs&#125; 目录，继续执行... \033[32m[ok]\033[0m&quot; || echo -e &quot;$&#123;dir_logs&#125; 目录已存在，继续执行... \033[33m[Already exists]\033[0m&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">echo &quot;正在拉取$&#123;img&#125;镜像，请耐心等待...&quot;</span><br><span class="line">docker pull $img &amp;&gt; /dev/null</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动临时容器（<span class="built_in">cp</span>配置文件）</span></span><br><span class="line">echo &quot;正在启动$&#123;name&#125;临时容器...&quot;</span><br><span class="line">docker run -d --name=$&#123;name&#125; $img &amp;&gt; /dev/null</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo -e &quot;$&#123;name&#125;临时容器启动成功 \033[32m[ok]\033[0m&quot;</span><br><span class="line">else</span><br><span class="line">    echo -e &quot;\033[31m[error]$&#123;name&#125;临时容器启动失败\033[0m&quot; &amp;&amp; exit 1</span><br><span class="line">fi</span><br><span class="line">echo &quot;正在拷贝配置文件至宿主机...&quot;</span><br><span class="line">docker cp $&#123;name&#125;:/etc/nginx/nginx.conf $&#123;dir_conf&#125;</span><br><span class="line">docker cp $&#123;name&#125;:/etc/nginx/conf.d $&#123;dir_conf&#125;</span><br><span class="line">echo -e &quot;配置文件拷贝成功 \033[32m[ok]\033[0m&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除临时容器</span></span><br><span class="line">echo &quot;正在删除$&#123;name&#125;容器...&quot;</span><br><span class="line">docker stop $name &amp;&gt; /dev/null</span><br><span class="line">docker rm $name &amp;&gt; /dev/null</span><br><span class="line">echo -e &quot;$&#123;name&#125;容器删除成功 \033[32m[ok]\033[0m&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行正式容器</span></span><br><span class="line">echo &quot;正在启动$&#123;name&#125;正式容器...&quot;</span><br><span class="line">a=&quot;host&quot;</span><br><span class="line">b=&quot;bridge&quot;</span><br><span class="line">c=&quot;none&quot;</span><br><span class="line">d=&quot;container&quot;</span><br><span class="line">if [ $net = $a ]; then</span><br><span class="line">    docker run -itd \</span><br><span class="line">    --name=$&#123;name&#125; \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --net=$&#123;a&#125; \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    -v $&#123;dir_conf&#125;/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">    -v $&#123;dir_conf&#125;/conf.d:/etc/nginx/conf.d \</span><br><span class="line">    -v $&#123;dir_html&#125;:/usr/share/nginx/html \</span><br><span class="line">    -v $&#123;dir_logs&#125;:/var/log/nginx $&#123;img&#125; &amp;&gt; /dev/null</span><br><span class="line">    elif [ $net = $b ]; then</span><br><span class="line">        docker run -itd \</span><br><span class="line">        --name=$&#123;name&#125; \</span><br><span class="line">        --privileged=true \</span><br><span class="line">        --restart=always \</span><br><span class="line">        -p $&#123;http_port&#125;:80 \</span><br><span class="line">        -p $&#123;https_port&#125;:443 \</span><br><span class="line">        -v /etc/localtime:/etc/localtime \</span><br><span class="line">        -v $&#123;dir_conf&#125;/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">        -v $&#123;dir_conf&#125;/conf.d:/etc/nginx/conf.d \</span><br><span class="line">        -v $&#123;dir_html&#125;:/usr/share/nginx/html \</span><br><span class="line">        -v $&#123;dir_logs&#125;:/var/log/nginx $&#123;img&#125; &amp;&gt; /dev/null</span><br><span class="line">else</span><br><span class="line">    echo -e &quot;\033[31m[error]容器启动失败，请指定正确的网络模式\033[0m&quot; &amp;&amp; exit 1</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo -e &quot;$&#123;name&#125;容器启动成功 \033[32m[ok]\033[0m&quot;</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    echo -e &quot;\033[32m发布路径：$&#123;dir_html&#125;\033[0m&quot;</span><br><span class="line">    echo -e &quot;\033[32m配置路径：$&#123;dir_conf&#125;\033[0m&quot;</span><br><span class="line">    echo -e &quot;\033[32m日志路径：$&#123;dir_logs&#125;\033[0m&quot;</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">else</span><br><span class="line">    echo -e &quot;\033[31m[error]$&#123;name&#125;容器启动失败，请手动检查错误原因\033[0m&quot; &amp;&amp; exit 1</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印容器网络模式</span></span><br><span class="line">echo -e &quot;$&#123;name&#125;容器网络模式为：\033[35m$&#123;net&#125;\033[0m&quot;</span><br><span class="line">echo &quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印端口</span></span><br><span class="line">if [ $net = &quot;bridge&quot; ]; then</span><br><span class="line">    echo -e &quot;\033[32mhttp端口：$&#123;http_port&#125;:80\033[0m&quot;</span><br><span class="line">    echo -e &quot;\033[32mhttps端口：$&#123;https_port&#125;:443\033[0m&quot;</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;具体的 Nginx 反向代理配置请看 4.4 部分。&#x3D;&#x3D;</p><h3 id="3-7-Zookeeper-集群"><a href="#3-7-Zookeeper-集群" class="headerlink" title="3.7 Zookeeper 集群"></a>3.7 Zookeeper 集群</h3><blockquote><p>具体部署过程可看我博客<a href="https://blog.csdn.net/IT_ZRS/article/details/125615805?spm=1001.2014.3001.5501">《ZooKeeper 集群部署》</a>，这里不再重复部署。</p></blockquote><h3 id="3-8-Kafka-集群"><a href="#3-8-Kafka-集群" class="headerlink" title="3.8 Kafka 集群"></a>3.8 Kafka 集群</h3><blockquote><p>下载地址：<a href="https://github.com/apache/kafka/releases/tag/3.1.1">https://github.com/apache/kafka/releases/tag/3.1.1</a></p></blockquote><p><code>Kafka 集群</code>依赖于 <code>Zookeeper 集群</code>，因此在部署 Kafka 集群前，需保证 Zookeeper 集群是正常工作的，一般将 Zookeeper 集群与 Kafka 集群部署在一起即可（当然如果你的服务器充裕的话，也可分开部署）。</p><p>1、下载并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/apache/kafka/archive/refs/tags/3.1.1.tar.gz</span><br><span class="line">tar xzf 3.1.1.tar.gz -C /data/</span><br></pre></td></tr></table></figure><blockquote><p>官方提供的 Kafka 安装包中已经包含 Zookeeper 安装程序，对于非 Docker 安装的方式，直接下载 Kafka 安装包即可安装 Zookeeper 集群了，Kafka 相关配置文件如下图。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220806134544705.png" alt="image-20220806134544705"></p><p>2、修改配置文件</p><blockquote><p>配置文件：<code>/data/kafka-3.1.1/config/server.properties</code></p></blockquote><ul><li><p>kafka-1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">broker.id=1</span><br><span class="line">listeners=PLAINTEXT://192.168.56.137:9092</span><br><span class="line">num.network.threads=3</span><br><span class="line">num.io.threads=8</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line">log.dirs=/data/kafka-3.1.1/logs</span><br><span class="line">num.partitions=6</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">offsets.topic.replication.factor=2</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line">log.retention.hours=168</span><br><span class="line">log.segment.bytes=536870912</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line">zookeeper.connect=192.168.56.137:2181,192.168.56.138:2181,192.168.56.139:2181</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br></pre></td></tr></table></figure><blockquote><p>创建配置文件中指定的日志路径</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/kafka-3.1.1/logs</span><br></pre></td></tr></table></figure></li><li><p>kafka-2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">broker.id=2</span><br><span class="line">listeners=PLAINTEXT://192.168.56.138:9092</span><br><span class="line">num.network.threads=3</span><br><span class="line">num.io.threads=8</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line">log.dirs=/opt/data/kafka/logs</span><br><span class="line">num.partitions=6</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">offsets.topic.replication.factor=2</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line">log.retention.hours=168</span><br><span class="line">log.segment.bytes=536870912</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line">zookeeper.connect=192.168.56.137:2181,192.168.56.138:2181,192.168.56.139:2181</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br></pre></td></tr></table></figure><blockquote><p>创建配置文件中指定的日志路径</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/kafka-3.1.1/logs</span><br></pre></td></tr></table></figure></li><li><p>kafka-2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">broker.id=3</span><br><span class="line">listeners=PLAINTEXT://192.168.56.139:9092</span><br><span class="line">num.network.threads=3</span><br><span class="line">num.io.threads=8</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line">log.dirs=/opt/data/kafka/logs</span><br><span class="line">num.partitions=6</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">offsets.topic.replication.factor=2</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line">log.retention.hours=168</span><br><span class="line">log.segment.bytes=536870912</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line">zookeeper.connect=192.168.56.137:2181,192.168.56.138:2181,192.168.56.139:2181</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br></pre></td></tr></table></figure><blockquote><p>创建配置文件中指定的日志路径</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/kafka-3.1.1/logs</span><br></pre></td></tr></table></figure></li></ul><p>3、启动 Kafka 集群</p><ul><li><p>kafka-1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/kafka-3.1.1</span><br><span class="line">nohup bin/kafka-server-start.sh config/server.properties &amp;</span><br></pre></td></tr></table></figure></li><li><p>kafka-2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/kafka-3.1.1</span><br><span class="line">nohup bin/kafka-server-start.sh config/server.properties &amp;</span><br></pre></td></tr></table></figure></li><li><p>kafka-3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/kafka-3.1.1</span><br><span class="line">nohup bin/kafka-server-start.sh config/server.properties &amp;</span><br></pre></td></tr></table></figure></li></ul><p>&#x3D;&#x3D;至此，Kafka 集群部署完毕！&#x3D;&#x3D;</p><h3 id="3-9-FAQ"><a href="#3-9-FAQ" class="headerlink" title="3.9 FAQ"></a>3.9 FAQ</h3><h4 id="3-9-1-ES-Systemd-启动报错"><a href="#3-9-1-ES-Systemd-启动报错" class="headerlink" title="3.9.1 ES Systemd 启动报错"></a>3.9.1 ES Systemd 启动报错</h4><p>如果你配置 ES systemd 管理，对 jdk 的就就会有要求，否则无法启动，具体报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@es-1 bin]# journalctl -u es.service </span><br><span class="line">-- Logs begin at Wed 2022-06-22 09:38:05 CST, end at Wed 2022-06-22 09:45:27 CST. --</span><br><span class="line">Jun 22 09:45:27 es-1 systemd[1]: Starting elasticsearch...</span><br><span class="line">Jun 22 09:45:27 es-1 elasticsearch[1571]: which: no java in (/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin)</span><br><span class="line">Jun 22 09:45:27 es-1 elasticsearch[1571]: could not find java; set JAVA_HOME or ensure java is in PATH</span><br><span class="line">Jun 22 09:45:27 es-1 systemd[1]: es.service: control process exited, code=exited status=1</span><br><span class="line">Jun 22 09:45:27 es-1 systemd[1]: Failed to start elasticsearch.</span><br><span class="line">Jun 22 09:45:27 es-1 systemd[1]: Unit es.service entered failed state.</span><br><span class="line">Jun 22 09:45:27 es-1 systemd[1]: es.service failed.</span><br></pre></td></tr></table></figure><p>因为我的 jdk 路径是配置在 profile.d 下的，所在加载的时候没有识别出来，而且报错也给出了提示，修改一下路径即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /data/jdk/bin/* /usr/bin/</span><br></pre></td></tr></table></figure><p>以 systemd 启动的服务，同时还需要修改一下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system.conf</span><br><span class="line"></span><br><span class="line">DefaultLimitNOFILE=65536</span><br><span class="line">DefaultLimitNPROC=32000</span><br><span class="line">DefaultLimitMEMLOCK=infinity</span><br></pre></td></tr></table></figure><h4 id="3-9-2-Logstash-启动报错"><a href="#3-9-2-Logstash-启动报错" class="headerlink" title="3.9.2 Logstash 启动报错"></a>3.9.2 Logstash 启动报错</h4><p>当我运行测试命令启动 logstash 时，包如下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@logstash-1 logstash]# /data/logstash/bin/logstash -e &#x27;input &#123; stdin &#123;&#125; &#125; output &#123; elasticsearch &#123; hosts =&gt; [&quot;192.168.56.133:9200&quot;] &#125; &#125;&#x27;</span><br><span class="line">Sending Logstash&#x27;s logs to /data/logstash/logs which is now configured via log4j2.properties</span><br><span class="line">[2022-06-22T13:13:22,138][INFO ][logstash.modules.scaffold] Initializing module &#123;:module_name=&gt;&quot;fb_apache&quot;, :directory=&gt;&quot;/data/logstash/modules/fb_apache/configuration&quot;&#125;</span><br><span class="line">[2022-06-22T13:13:22,140][INFO ][logstash.modules.scaffold] Initializing module &#123;:module_name=&gt;&quot;netflow&quot;, :directory=&gt;&quot;/data/logstash/modules/netflow/configuration&quot;&#125;</span><br><span class="line">[2022-06-22T13:13:22,245][WARN ][logstash.config.source.multilocal] Ignoring the &#x27;pipelines.yml&#x27; file because modules or command line options are specified</span><br><span class="line">[2022-06-22T13:13:22,256][FATAL][logstash.runner          ] Logstash could not be started because there is already another instance using the configured data directory.  If you wish to run multiple instances, you must change the &quot;path.data&quot; setting.</span><br></pre></td></tr></table></figure><p>解决方案：因为在 logstash 数据目录下存在缓冲文件（.lock），删除即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@logstash-1 data]# cd /data/logstash/data/</span><br><span class="line">[root@logstash-1 data]# ll -a</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x  4 root root  69 Jun 22 13:42 .</span><br><span class="line">drwxr-xr-x 12 root root 259 Jun 22 12:06 ..</span><br><span class="line">drwxr-xr-x  2 root root   6 Jun 22 12:06 dead_letter_queue</span><br><span class="line">-rw-r--r--  1 root root   0 Jun 22 13:42 .lock</span><br><span class="line">drwxr-xr-x  2 root root   6 Jun 22 12:06 queue</span><br><span class="line">-rw-r--r--  1 root root  36 Jun 22 12:06 uuid</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622143509359.png" alt="image-20220622143509359"></p><h4 id="3-9-3-head-插件-406-错误"><a href="#3-9-3-head-插件-406-错误" class="headerlink" title="3.9.3 head 插件 406 错误"></a>3.9.3 head 插件 406 错误</h4><p>当我们在浏览数据时，发现右边框并无数据，F12 看一下报 406，原因是 es 6.x 的版本增加了严格的请求头校验，返回结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">“error” : “Content-Type [header](https://so.csdn.net/so/search?q=header&amp;spm=1001.2101.3001.7020) [application/x-www-form-urlencoded] is not supported”,</span><br><span class="line">“status” : 406</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622151358131.png" alt="image-20220622151358131">解决方案：修改<code>vendor.js</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件复制到本地</span></span><br><span class="line">docker cp es-head:/usr/src/app/_site/vendor.js ./</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行修改（定位至6886行）</span></span><br><span class="line">        ajaxSettings: &#123;</span><br><span class="line">                url: ajaxLocation,</span><br><span class="line">                isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),</span><br><span class="line">                global: true,</span><br><span class="line">                type: &quot;GET&quot;,</span><br><span class="line">                contentType: &quot;application/json;charset=UTF-8&quot;,</span><br><span class="line">                processData: true,</span><br><span class="line">                async: true,</span><br><span class="line">                ...</span><br><span class="line">                ...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再复制到容器中</span></span><br><span class="line">docker cp vendor.js es-head:/usr/src/app/_site/</span><br></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622152458877.png" alt="image-20220622152458877"></p><p>修改后：<br><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622152619484.png" alt="image-20220622152619484"></p><p>无需重启 es-head，刷新一下 head 页面即可：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622153010483.png" alt="image-20220622153010483"></p><hr><p>附件：…</p><h2 id="四、Docker-部署-ELK-集群"><a href="#四、Docker-部署-ELK-集群" class="headerlink" title="四、Docker 部署 ELK 集群"></a>四、Docker 部署 ELK 集群</h2><blockquote><p><a href="https://www.docker.elastic.co/">官方 Docker 镜像</a></p></blockquote><h3 id="4-1-ES-集群"><a href="#4-1-ES-集群" class="headerlink" title="4.1 ES 集群"></a>4.1 ES 集群</h3><h4 id="4-1-1-ES-集群部署"><a href="#4-1-1-ES-集群部署" class="headerlink" title="4.1.1 ES 集群部署"></a>4.1.1 ES 集群部署</h4><p><strong>1、安装docker</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行安装脚本</span><br></pre></td></tr></table></figure><p><strong>2、创建 ES 相关目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/elasticsearch/data</span><br><span class="line">mkdir -p /data/elasticsearch/logs</span><br><span class="line">mkdir -p /data/elasticsearch/plugins</span><br><span class="line">mkdir -p /data/elasticsearch/config/</span><br></pre></td></tr></table></figure><p><strong>3、任意一个 ES 节点运行一个es临时容器，拷贝配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd \</span><br><span class="line">--name=tmp \</span><br><span class="line">-e ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot; \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; \</span><br><span class="line">elasticsearch:6.8.23</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker cp tmp:/usr/share/elasticsearch/config /data/elasticsearch/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或（运行容器时直接映射elasticsearch目录即可）</span></span><br><span class="line">docker cp tmp:/usr/share/elasticsearch /data/</span><br></pre></td></tr></table></figure><p><strong>4、修改 ES 配置文件</strong></p><ul><li><p>es-1</p><blockquote><p>elasticsearch.yml</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cluster.name 三者需相同</span></span><br><span class="line">cluster.name: es-cluster</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.name 节点名，设置与主机名一致即可</span></span><br><span class="line">node.name: es-1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.master 符合成为主节点的条件</span></span><br><span class="line">node.master: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.data 符合成为数据节点的条件</span></span><br><span class="line">node.data: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.data 数据存储路径（下面会进行创建）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.data: /data/elasticsearch/data</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.logs 日志存储路径（下面会进行创建）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.logs: /data/elasticsearch/logs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bootstrap.memory_lock 锁住内存，即只使用内存，不使用交换分区</span></span><br><span class="line">bootstrap.memory_lock: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">network.host 允许所有IP访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">network.publish_host 集群节点交互IP（docker方式的部署填写公网IP）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker 方式部署的需指定 network.publish_host，否则无法访问集群</span></span><br><span class="line">network.publish_host: 192.168.56.133</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http.port web访问端口</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.ping.unicast.hosts 关闭单播</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.56.133&quot;, &quot;192.168.56.134&quot;, &quot;192.168.56.135&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.minimum_master_nodes 指定master备选数（N/2+1）取整，N为集群节点数</span></span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.ping_timeout 节点在发现过程中的等待超时时间</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">discovery.zen.ping_timeout: 120s</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.fd.ping_retries 节点发现重试次数</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">discovery.zen.fd.ping_retries: 10</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">client.transport.ping_timeout  ping命令的响应超时时间</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">client.transport.ping_timeout: 60s</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决跨域问题</span></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure><blockquote><p>jvm.options</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># JVM configuration</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###############################################################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># IMPORTANT: JVM heap size</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###############################################################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># You should always set the min and max JVM heap</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># size to the same value. For example, to set</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># the heap to 4 GB, set:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># -Xms4g</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># -Xmx4g</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># See https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># for more information</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###############################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Xms represents the initial size of total heap space</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Xmx represents the maximum size of total heap space</span></span><br><span class="line"></span><br><span class="line">-Xms512m</span><br><span class="line">-Xmx512m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###############################################################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Expert settings</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###############################################################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># All settings below this section are considered</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># expert settings. Don&#x27;t tamper with them unless</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># you understand what you are doing</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###############################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># GC configuration</span></span></span><br><span class="line">8-13:-XX:+UseConcMarkSweepGC</span><br><span class="line">8-13:-XX:CMSInitiatingOccupancyFraction=75</span><br><span class="line">8-13:-XX:+UseCMSInitiatingOccupancyOnly</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># G1GC Configuration</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NOTE: G1 GC is only supported on JDK version 10 or later</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to use G1GC, uncomment the next two lines and update the version on the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">following three lines to your version of the JDK</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">10-13:-XX:-UseConcMarkSweepGC</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">10-13:-XX:-UseCMSInitiatingOccupancyOnly</span></span><br><span class="line">14-:-XX:+UseG1GC</span><br><span class="line">14-:-XX:G1ReservePercent=25</span><br><span class="line">14-:-XX:InitiatingHeapOccupancyPercent=30</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># DNS cache policy</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cache ttl <span class="keyword">in</span> seconds <span class="keyword">for</span> positive DNS lookups noting that this overrides the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JDK security property networkaddress.cache.ttl; <span class="built_in">set</span> to -1 to cache forever</span></span><br><span class="line">-Des.networkaddress.cache.ttl=60</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cache ttl <span class="keyword">in</span> seconds <span class="keyword">for</span> negative DNS lookups noting that this overrides the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JDK security property networkaddress.cache.negative ttl; <span class="built_in">set</span> to -1 to cache</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">forever</span></span><br><span class="line">-Des.networkaddress.cache.negative.ttl=10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># optimizations</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pre-touch memory pages used by the JVM during initialization</span></span><br><span class="line">-XX:+AlwaysPreTouch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># basic</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">explicitly <span class="built_in">set</span> the stack size</span></span><br><span class="line">-Xss1m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> to headless, just <span class="keyword">in</span> <span class="keyword">case</span></span></span><br><span class="line">-Djava.awt.headless=true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ensure UTF-8 encoding by default (e.g. filenames)</span></span><br><span class="line">-Dfile.encoding=UTF-8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use our provided JNA always versus the system one</span></span><br><span class="line">-Djna.nosys=true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">turn off a JDK optimization that throws away stack traces <span class="keyword">for</span> common</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">exceptions because stack traces are important <span class="keyword">for</span> debugging</span></span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">enable</span> helpful NullPointerExceptions (https://openjdk.java.net/jeps/358), <span class="keyword">if</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">they are supported</span></span><br><span class="line">14-:-XX:+ShowCodeDetailsInExceptionMessages</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">flags to configure Netty</span></span><br><span class="line">-Dio.netty.noUnsafe=true</span><br><span class="line">-Dio.netty.noKeySetOptimization=true</span><br><span class="line">-Dio.netty.recycler.maxCapacityPerThread=0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">log4j 2</span></span><br><span class="line">-Dlog4j.shutdownHookEnabled=false</span><br><span class="line">-Dlog4j2.disable.jmx=true</span><br><span class="line">-Dlog4j2.formatMsgNoLookups=true</span><br><span class="line"></span><br><span class="line">-Djava.io.tmpdir=$&#123;ES_TMPDIR&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># heap dumps</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">generate a heap dump when an allocation from the Java heap fails</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">heap dumps are created <span class="keyword">in</span> the working directory of the JVM</span></span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">specify an alternative path <span class="keyword">for</span> heap dumps; ensure the directory exists and</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">has sufficient space</span></span><br><span class="line">-XX:HeapDumpPath=data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">specify an alternative path <span class="keyword">for</span> JVM fatal error logs</span></span><br><span class="line">-XX:ErrorFile=logs/hs_err_pid%p.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># JDK 8 GC logging</span></span></span><br><span class="line"></span><br><span class="line">8:-XX:+PrintGCDetails</span><br><span class="line">8:-XX:+PrintGCDateStamps</span><br><span class="line">8:-XX:+PrintTenuringDistribution</span><br><span class="line">8:-XX:+PrintGCApplicationStoppedTime</span><br><span class="line">8:-Xloggc:logs/gc.log</span><br><span class="line">8:-XX:+UseGCLogFileRotation</span><br><span class="line">8:-XX:NumberOfGCLogFiles=32</span><br><span class="line">8:-XX:GCLogFileSize=64m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JDK 9+ GC logging</span></span><br><span class="line">9-:-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">due to internationalization enhancements <span class="keyword">in</span> JDK 9 Elasticsearch need to <span class="built_in">set</span> the provider to COMPAT otherwise</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">time/date parsing will <span class="built_in">break</span> <span class="keyword">in</span> an incompatible way <span class="keyword">for</span> some <span class="built_in">date</span> patterns and locals</span></span><br><span class="line">9-:-Djava.locale.providers=COMPAT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">temporary workaround <span class="keyword">for</span> C2 bug with JDK 10 on hardware with AVX-512</span></span><br><span class="line">10-:-XX:UseAVX=2</span><br></pre></td></tr></table></figure></li><li><p>es-2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">同es-1，唯一不同的是 node.name 和 network.publish_host</span><br><span class="line">node.name: es-2</span><br><span class="line">network.publish_host: 192.168.56.134</span><br></pre></td></tr></table></figure></li><li><p>es-3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">同es-1，唯一不同的是 node.name 和 network.publish_host</span><br><span class="line">node.name: es-3</span><br><span class="line">network.publish_host: 192.168.56.135</span><br></pre></td></tr></table></figure></li></ul><p><strong>5、运行容器</strong></p><ul><li><p>es-1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">--name=es-1 \</span><br><span class="line">--privileged=true \</span><br><span class="line">--restart=always \</span><br><span class="line">-p 9200:9200 \</span><br><span class="line">-p 9300:9300 \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-v /data/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /data/elasticsearch/logs:/usr/share/elasticsearch/logs \</span><br><span class="line">-v /data/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-v /data/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /data/elasticsearch/config/jvm.options:/usr/share/elasticsearch/config/jvm.options \</span><br><span class="line">-d elasticsearch:6.8.23</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或（运行容器时直接映射elasticsearch目录即可）</span></span><br><span class="line">docker run -it \</span><br><span class="line">--name=es-1 \</span><br><span class="line">--privileged=true \</span><br><span class="line">--restart=always \</span><br><span class="line">--net=host \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-v /data/elasticsearch:/usr/share/elasticsearch \</span><br><span class="line">-d elasticsearch:6.8.23</span><br></pre></td></tr></table></figure></li><li><p>es-2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">--name=es-2 \</span><br><span class="line">--privileged=true \</span><br><span class="line">--restart=always \</span><br><span class="line">-p 9200:9200 \</span><br><span class="line">-p 9300:9300 \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-v /data/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /data/elasticsearch/logs:/usr/share/elasticsearch/logs \</span><br><span class="line">-v /data/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-v /data/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /data/elasticsearch/config/jvm.options:/usr/share/elasticsearch/config/jvm.options \</span><br><span class="line">-d elasticsearch:6.8.23</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或（运行容器时直接映射elasticsearch目录即可）</span></span><br><span class="line">docker run -it \</span><br><span class="line">--name=es-2 \</span><br><span class="line">--privileged=true \</span><br><span class="line">--restart=always \</span><br><span class="line">--net=host \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-v /data/elasticsearch:/usr/share/elasticsearch \</span><br><span class="line">-d elasticsearch:6.8.23</span><br></pre></td></tr></table></figure></li><li><p>es-3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">--name=es-3 \</span><br><span class="line">--privileged=true \</span><br><span class="line">--restart=always \</span><br><span class="line">-p 9200:9200 \</span><br><span class="line">-p 9300:9300 \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-v /data/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /data/elasticsearch/logs:/usr/share/elasticsearch/logs \</span><br><span class="line">-v /data/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-v /data/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /data/elasticsearch/config/jvm.options:/usr/share/elasticsearch/config/jvm.options \</span><br><span class="line">-d elasticsearch:6.8.23</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或（运行容器时直接映射elasticsearch目录即可）</span></span><br><span class="line">docker run -it \</span><br><span class="line">--name=es-3 \</span><br><span class="line">--privileged=true \</span><br><span class="line">--restart=always \</span><br><span class="line">--net=host \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-v /data/elasticsearch:/usr/share/elasticsearch \</span><br><span class="line">-d elasticsearch:6.8.23</span><br></pre></td></tr></table></figure></li></ul><p>&#x3D;&#x3D;es-head 插件安装看 3.5 小节&#x3D;&#x3D;</p><p>集群状态查看：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220622233940503.png" alt="image-20220622233940503"></p><p><strong>6、配置 ES 集群证书</strong></p><blockquote><ol><li><p>先保证在没有使用证书的情况下，ES 集群是正常运行的，然后再配置 ES 集群证书；</p></li><li><p>在任意 ES 集群节点上生成集群证书（本次我在 es-1 节点）；</p></li><li><p>证书生成完毕之后，再将对应证书 copy 到其他节点的 config 目录下；</p></li><li><p>重启 ES 集群，此时保证集群正常运行，如果此时集群正常，说明集群间已经通过密钥方式通信；</p></li><li><p>然后创建 ES 集群的用户名&#x2F;密码（在任意 ES 集群节点上执行即可，因为集群会同步状态）；</p></li><li><p>启用 ES 集群证书的目：数据安全、防止其他 ES 节点恶意并入集群。</p></li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it es-1 bash</span><br><span class="line">./bin/elasticsearch-certutil ca</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会在当前目录生产elastic-stack-ca.p12证书文件</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624141418370.png" alt="image-20220624141418370"></p><p>为集群中的每个节点生成证书和私钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624142040376.png" alt="image-20220624142040376"></p><p>复制证书文件到其他节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp elastic-* es-2:/data/elasticsearch/config/</span><br><span class="line">scp elastic-* es-3:/data/elasticsearch/config/</span><br></pre></td></tr></table></figure><p>接着修改 ES 集群配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cluster.name 三者需相同</span></span><br><span class="line">cluster.name: es-cluster</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.name 节点名，设置与主机名一致即可</span></span><br><span class="line">node.name: es-1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.master 符合成为主节点的条件</span></span><br><span class="line">node.master: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.data 符合成为数据节点的条件</span></span><br><span class="line">node.data: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.data 数据存储路径（下面会进行创建）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.data: /data/elasticsearch/data</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.logs 日志存储路径（下面会进行创建）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path.logs: /data/elasticsearch/logs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bootstrap.memory_lock 锁住内存，即只使用内存，不使用交换分区（有时会报错，报错时注释掉就行）</span></span><br><span class="line">bootstrap.memory_lock: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">network.host 允许所有IP访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">network.publish_host 集群节点交互IP（docker方式的部署填写公网IP）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker 方式部署的需指定 network.publish_host，否则无法访问集群</span></span><br><span class="line">network.publish_host: 192.168.56.133</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http.port web访问端口</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.ping.unicast.hosts 关闭单播</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.56.133&quot;, &quot;192.168.56.134&quot;, &quot;192.168.56.135&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.minimum_master_nodes 指定master备选数（N/2+1）取整，N为集群节点数</span></span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.ping_timeout 节点在发现过程中的等待超时时间</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">discovery.zen.ping_timeout: 120s</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">discovery.zen.fd.ping_retries 节点发现重试次数</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">discovery.zen.fd.ping_retries: 10</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">client.transport.ping_timeout  ping命令的响应超时时间</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">client.transport.ping_timeout: 60s</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决跨域问题</span></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Auth（如果你不配置证书，只是单纯的给ES设置密码，打开下面两项即可）</span></span><br><span class="line">xpack.security.enabled: true</span><br><span class="line">xpack.security.transport.ssl.enabled: true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你需要使用证书请保持下列参数是打开状态</span></span><br><span class="line">xpack.security.transport.ssl.verification_mode: certificate</span><br><span class="line">xpack.security.transport.ssl.keystore.path: elastic-certificates.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: elastic-certificates.p12</span><br></pre></td></tr></table></figure><p>重启 ES 集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker restart es-1</span><br><span class="line">docker restart es-2</span><br><span class="line">docker restart es-3</span><br></pre></td></tr></table></figure><p>新增用户名、密码：</p><blockquote><p>任意一台 ES 集群节点上执行即可，执行结果会同步到整个 ES 集群</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-setup-passwords interactive</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我的密码为123456</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">西谷：Xgxy@2021!</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624155056881.png" alt="image-20220624155056881"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Changed password for user [apm_system]</span><br><span class="line">Changed password for user [kibana]</span><br><span class="line">Changed password for user [logstash_system]</span><br><span class="line">Changed password for user [beats_system]</span><br><span class="line">Changed password for user [remote_monitoring_user]</span><br><span class="line">Changed password for user [elastic]</span><br></pre></td></tr></table></figure><p>上面的用户名密码在任意一台 ES 集群服务器上执行就行，密码会被更新到集群中，就算你在其他节点设置密码也是会报错的，而且会提示你，强一致性密码已经更新至集群，如下所示：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624155456231.png" alt="image-20220624155456231"></p><p><strong>7、keepalived 高可用</strong></p><p>因为集群环境下所有的 ES 节点都是平等的，所以用 keepalived 来做集群统一入口。</p><p>安装keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y keepalived</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件路径：/etc/keepalived/keepalived.conf</span></span><br></pre></td></tr></table></figure><ul><li><p>es-1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id es</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_es &#123;</span><br><span class="line">    script &quot;/etc/keepalived/check_es_status.sh&quot;</span><br><span class="line">    interval 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 90</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.56.10/24</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_es</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>es-2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id es</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_es &#123;</span><br><span class="line">    script &quot;/etc/keepalived/check_es_status.sh&quot;</span><br><span class="line">    interval 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 90</span><br><span class="line">    priority 50</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.56.10/24</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_es</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>es-3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id es</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_es &#123;</span><br><span class="line">    script &quot;/etc/keepalived/check_es_status.sh&quot;</span><br><span class="line">    interval 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_3 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 90</span><br><span class="line">    priority 50</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.56.10/24</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_es</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>健康检测脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/keepalived/check_es_status.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">docker ps |grep es-1</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo &quot;status ok&quot;</span><br><span class="line">else</span><br><span class="line">    systemctl stop keepalived.service</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>启动 keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start keepalived.service</span><br><span class="line">systemctl enable keepalived.service</span><br><span class="line">systemctl stop keepalived.service</span><br><span class="line">systemctl restart keepalived.service</span><br></pre></td></tr></table></figure><h4 id="4-1-2-ES-修改-x2F-忘记密码"><a href="#4-1-2-ES-修改-x2F-忘记密码" class="headerlink" title="4.1.2 ES 修改&#x2F;忘记密码"></a>4.1.2 ES 修改&#x2F;忘记密码</h4><blockquote><p>Kibana 可视化操作</p></blockquote><p><strong>1、点击用户页面对应的用户名</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624163946479.png" alt="image-20220624163946479"></p><p><strong>2、进入用户密码修改页面</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624164115642.png" alt="image-20220624164115642"></p><blockquote><p>如果忘记密码，可根据以下忘记密码步骤重置密码</p></blockquote><h4 id="4-3-2-ES-实例操作"><a href="#4-3-2-ES-实例操作" class="headerlink" title="4.3.2 ES 实例操作"></a>4.3.2 ES 实例操作</h4><p><strong>1、修改密码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type:application/json&quot; -XPOST -u elastic &#x27;http://172.17.16.95:9200/_xpack/security/user/elastic/_password&#x27; -d &#x27;&#123; &quot;password&quot; : &quot;123456&quot; &#125;&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>这种方式修改密码需要注意的是：</p><ol><li>之前设置过 elastic 的用户密码；</li><li>还记的用户 elastic 用户的密码。</li></ol></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220816141358233.png" alt="image-20220816141358233"></p><p><strong>2、忘记密码</strong></p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：如果忘记之前 elastic 用户的密码，这个时候又要用到 ES 的加密功能，那需要重置ES的密码认证。详细步骤如下：</p><p>&#x3D;&#x3D;方法1：&#x3D;&#x3D;</p><ul><li><p>关闭密码使用策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /data/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220816141705539.png" alt="image-20220816141705539"></p></li><li><p>重启 ES</p><blockquote><p>重启 ES 后，查看索引，发现多了一个<code>.security-6</code></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220816142328223.png" alt="image-20220816142328223"></p></li><li><p>删除<code>.security-6</code>索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE http://10.150.16.95:9200/.security-6 &#123;&quot;acknowledged&quot;:true&#125;[root@qcloud elasticsearch]</span><br></pre></td></tr></table></figure></li><li><p>ES 启用密码使用策略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /data/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220816161352121.png" alt="image-20220816161352121"></p></li><li><p>重启 ES</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart es-1</span><br></pre></td></tr></table></figure></li><li><p>进入容器开始时初始化密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">看2.2部分</span></span><br></pre></td></tr></table></figure></li></ul><p>&#x3D;&#x3D;方法2（推荐）：&#x3D;&#x3D;</p><ul><li><p>进入容器，创建一个管理用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud elasticsearch]# docker exec -it es-1 bash</span><br><span class="line">[root@qcloud elasticsearch]# ./bin/elasticsearch-users useradd newadmin -p password -r superuser</span><br><span class="line">[root@qcloud elasticsearch]# ./bin/elasticsearch-users list</span><br><span class="line">newadmin       : superuser</span><br></pre></td></tr></table></figure></li><li><p>退出容器，并修改密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -s --user newadmin:password -XPUT &quot;http://10.150.16.95:9200/_xpack/security/user/elastic/_password?pretty&quot; -H &#x27;Content-Type: application/json&#x27; -d&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;password&quot; : &quot;zhurs@123&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure></li><li><p>Kibana 登录</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220816162722239.png" alt="image-20220816162722239"></p></li></ul><h3 id="4-2-Logstash-分流"><a href="#4-2-Logstash-分流" class="headerlink" title="4.2 Logstash 分流"></a>4.2 Logstash 分流</h3><blockquote><p><a href="https://www.elastic.co/guide/en/logstash/current/index.html">《官方文档》</a></p></blockquote><p><strong>1、下载镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.elastic.co/logstash/logstash:6.8.23</span><br></pre></td></tr></table></figure><p><strong>2、运行临时容器，并拷贝配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=tmp logstash:6.8.23</span><br><span class="line">docker cp tmp:/usr/share/logstash /data/</span><br></pre></td></tr></table></figure><p><strong>3、创建配置文件并授权</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/logstash/config/conf.d</span><br><span class="line">chmod 777 -R /data/logstash</span><br></pre></td></tr></table></figure><p><strong>4、修改配置文件</strong></p><ul><li><p>修改前</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /data/logstash/config/logstash.yml</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220627113158512.png" alt="image-20220627113158512"></p></li><li><p>修改后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat /data/logstash/config/logstash.yml</span><br><span class="line"></span><br><span class="line">http.host: &quot;0.0.0.0&quot;</span><br><span class="line">xpack.monitoring.enabled: true</span><br><span class="line">xpack.monitoring.elasticsearch.username: &quot;elastic&quot;</span><br><span class="line">xpack.monitoring.elasticsearch.password: &quot;123456&quot;</span><br><span class="line">xpack.monitoring.elasticsearch.hosts: [ &quot;http://192.168.56.133:9200&quot;,&quot;http://192.168.56.134:9200&quot;,&quot;http://192.168.56.135:9200&quot; ]</span><br><span class="line">path.config: /usr/share/logstash/config/conf.d/*.conf</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220627164557104.png" alt="image-20220627164557104"></p></li></ul><p><strong>5、启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">桥接</span></span><br><span class="line">docker run -d \</span><br><span class="line">  --name=logstash \</span><br><span class="line">  --privileged=true \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -p 5044:5044 \</span><br><span class="line">  -v /etc/localtime:/etc/localtime \</span><br><span class="line">  -v /data/logstash:/usr/share/logstash \</span><br><span class="line">  logstash:6.8.23</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">host（本次采用）</span></span><br><span class="line">docker run -d \</span><br><span class="line">  --name=logstash \</span><br><span class="line">  --privileged=true \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --net=host \</span><br><span class="line">  -v /etc/localtime:/etc/localtime \</span><br><span class="line">  -v /data/logstash:/usr/share/logstash \</span><br><span class="line">  logstash:6.8.23</span><br></pre></td></tr></table></figure><blockquote><p>接下来看看二进制部署的 Logstash</p></blockquote><p><strong>1、JDK 环境</strong></p><p>上面有安装步骤</p><p><strong>2、解压</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xzf logstash-6.8.23.tar.gz -C /data/</span><br><span class="line">mv /data/logstash-6.8.23/ /data/logstash</span><br></pre></td></tr></table></figure><p><strong>3、创建配置文件目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/logstash/config/conf.d</span><br></pre></td></tr></table></figure><p><strong>4、编写配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">vim /data/logstash/config/conf.d/all.conf</span><br><span class="line"></span><br><span class="line">input&#123;</span><br><span class="line">    file&#123;</span><br><span class="line">        path =&gt; [&quot;/data/nginx/logs/access.log&quot;]</span><br><span class="line">        type =&gt; &quot;nginx_access&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">input&#123;</span><br><span class="line">    file&#123;</span><br><span class="line">        path =&gt; [&quot;/var/log/messages&quot;]</span><br><span class="line">        type =&gt; &quot;system_error&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output&#123;</span><br><span class="line">    if [type] ==  &quot;nginx_access&quot; &#123;</span><br><span class="line">        elasticsearch &#123;</span><br><span class="line">            hosts =&gt; [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;] </span><br><span class="line">            index =&gt; [&quot;%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;]</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    if [type] ==  &quot;system_error&quot; &#123;</span><br><span class="line">        elasticsearch &#123;</span><br><span class="line">            hosts =&gt; [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;] </span><br><span class="line">            index =&gt; [&quot;%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;]</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前台启动</span></span><br><span class="line">/data/logstash/bin/logstash -f /data/logstash/config/conf.d/ --config.reload.automatic</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台启动</span></span><br><span class="line">nohup /data/logstash/bin/logstash -f /data/logstash/config/conf.d/ --config.reload.automatic &amp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--config.reload.automatic：可以加载conf.d 目录下的所有.conf文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">想要单独加载的话，则去掉--config.reload.automatic参数，并指定具体的 .conf 文件</span></span><br></pre></td></tr></table></figure><p><strong>5、集群验证</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220623102312200.png" alt="image-20220623102312200"></p><h3 id="4-3-Kibana-前端展示"><a href="#4-3-Kibana-前端展示" class="headerlink" title="4.3 Kibana 前端展示"></a>4.3 Kibana 前端展示</h3><blockquote><p>官方文档：<a href="https://www.elastic.co/guide/cn/kibana/current/index.html">https://www.elastic.co/guide/cn/kibana/current/index.html</a></p></blockquote><p><strong>1、安装 es-head 插件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=es-head \</span><br><span class="line">  --privileged=true \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -v /etc/localtime:/etc/localtime \</span><br><span class="line">  -p 9100:9100 \</span><br><span class="line">  docker.io/mobz/elasticsearch-head:5-alpine</span><br></pre></td></tr></table></figure><p><strong>2、安装 Kibana</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行临时容器</span></span><br><span class="line">docker run -itd --name=tmp kibana:6.8.23</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝相关目录</span></span><br><span class="line">docker cp tmp:/usr/share/kibana /data/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">授权</span></span><br><span class="line">chmod 777 -R /data/kibana/*</span><br></pre></td></tr></table></figure><p><strong>3、修改配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /data/kibana/config/kibana.yml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Default Kibana configuration <span class="keyword">for</span> docker target</span></span><br><span class="line">server.name: kibana</span><br><span class="line">server.host: &quot;0&quot;</span><br><span class="line">elasticsearch.hosts: [ &quot;http://192.168.56.133:9200&quot;,&quot;http://192.168.56.134:9200&quot;,&quot;http://192.168.56.135:9200&quot; ]</span><br><span class="line">xpack.monitoring.ui.container.elasticsearch.enabled: true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kibana.index: <span class="string">&quot;.kibana&quot;</span></span></span><br><span class="line">i18n.locale: &quot;zh-CN&quot;</span><br><span class="line">elasticsearch.username: &quot;kibana&quot;</span><br><span class="line">elasticsearch.password: &quot;123456&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">xpack.reporting.encryptionKey: <span class="string">&quot;a_random_string&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">xpack.security.encryptionKey: <span class="string">&quot;something_at_least_32_characters&quot;</span></span></span><br></pre></td></tr></table></figure><p><strong>4、启动新容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    --name=kibana \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">-v &quot;/data/kibana:/usr/share/kibana&quot; \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">kibana:6.8.23</span><br></pre></td></tr></table></figure><p><strong>5、访问验证</strong></p><blockquote><p><a href="http://192.168.56.136:5601/">http://192.168.56.136:5601/</a></p></blockquote><p>输入账号密码：&lt;账号密码就是你配置ES时的密码&gt;</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624155844791.png" alt="image-20220624155844791"></p><blockquote><p>然后就会进入登录页面。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220623123020509.png" alt="image-20220623123020509"></p><blockquote><p>上图是我之前截的图，当时没有设置 ES 集群密码强一致性验证，设置之后你会发现管理菜单下会多出一个安全性&#x3D;&#x3D;&gt;<code>用户/角色</code></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624160113968.png" alt="image-20220624160113968"></p><h3 id="4-4-Nginx-反向代理"><a href="#4-4-Nginx-反向代理" class="headerlink" title="4.4 Nginx 反向代理"></a>4.4 Nginx 反向代理</h3><p><strong>1、安装 Nginx</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">看6.2.4</span></span><br><span class="line">docker run -itd \</span><br><span class="line">    --name=nginx \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --net=host \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">    -v /data/nginx/conf/conf.d:/etc/nginx/conf.d \</span><br><span class="line">    -v /data/nginx/html:/usr/share/nginx/html \</span><br><span class="line">    -v /data/nginx/logs:/var/log/nginx nginx:1.20.2</span><br></pre></td></tr></table></figure><p><strong>2、反向代理</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  192.168.56.136;</span><br><span class="line"></span><br><span class="line">    # kibana前端展示</span><br><span class="line">    location / &#123;</span><br><span class="line">        root  html;</span><br><span class="line">        proxy_pass http://192.168.56.136:5601/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # es-head插件</span><br><span class="line">    location /head/ &#123;</span><br><span class="line">        proxy_pass http://192.168.56.136:9100/;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    # Kafka-Manager可视化管理</span><br><span class="line">    location /manager/ &#123;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass http://192.168.56.136:9000/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-Zookeeper-集群"><a href="#4-5-Zookeeper-集群" class="headerlink" title="4.5 Zookeeper 集群"></a>4.5 Zookeeper 集群</h3><p><strong>1、pull 镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull zookeeper:3.7.1</span><br></pre></td></tr></table></figure><p><strong>2、创建对应目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/zookeeper/conf</span><br><span class="line">mkdir -p /data/zookeeper/data</span><br><span class="line">mkdir -p /data/zookeeper/datalog</span><br><span class="line">mkdir -p /data/zookeeper/logs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件路径：/data/zookeeper/conf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据存储路径：/data/zookeeper/data</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据日志存储路径：/data/zookeeper/datalog</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志存储路径：/data/zookeeper/logs</span></span><br></pre></td></tr></table></figure><p><strong>3、创建配置文件</strong></p><blockquote><p>三个节点均添加</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/data</span><br><span class="line">dataLogDir=/datalog</span><br><span class="line">quorumListenOnAllIPs=true</span><br><span class="line">clientPort=2181 </span><br><span class="line">tickTime=2000 </span><br><span class="line">initLimit=20 </span><br><span class="line">syncLimit=10 </span><br><span class="line">server.1=192.168.56.137:2888:3888;2181</span><br><span class="line">server.2=192.168.56.138:2888:3888;2181</span><br><span class="line">server.3=192.168.56.139:2888:3888;2181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基础参数说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tickTime：心跳检测时间</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">initLimit：follower连接到leader的初始化时间 --&gt; 10*2000=20s</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">quorumListenOnAllIPs：是否在所有可用的IP上监听来自其对等节点的连接请求，默认值为<span class="literal">false</span>，这意味着只在zoo.cfg中配置的服务器ip地址上监听连接请求</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">autopurge.snapRetainCount：保留的快照文件数目，默认是保留3个 --&gt; 自动清理Zookeeper的历史数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">autopurge.purgeInterval：清理频率（单位是小时），默认是0，表示不开启自动清理功能 --&gt; 自动清理Zookeeper的历史数据</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">端口说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2181：对Client端提供服务的端口（可自定义）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2888：集群内部通信端口（可自定义）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3888：选举Leader的端口（可自定义）</span></span><br></pre></td></tr></table></figure><p><strong>4、启动 ZK 集群</strong></p><blockquote><p>zk-1 部署于 kafka-1 服务器上</p><p>zk-2 部署于 kafka-2 服务器上</p><p>zk-3 部署于 kafka-3 服务器上</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zk-1</span></span><br><span class="line">docker run -d \</span><br><span class="line">   --restart=always \</span><br><span class="line">   --name=zk-1 \</span><br><span class="line">   --privileged=true \</span><br><span class="line">   --net=host \</span><br><span class="line">   -e ZOO_MY_ID=1 \</span><br><span class="line">   -v /data/zookeeper/conf/zoo.cfg:/conf/zoo.cfg \</span><br><span class="line">   -v /data/zookeeper/data:/data \</span><br><span class="line">   -v /data/zookeeper/datalog:/datalog \</span><br><span class="line">   -v /data/zookeeper/logs:/logs \</span><br><span class="line">   -v /etc/localtime:/etc/localtime \</span><br><span class="line">   zookeeper:3.7.1</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zk-2</span></span><br><span class="line">docker run -d \</span><br><span class="line">   --restart=always \</span><br><span class="line">   --name zk-2 \</span><br><span class="line">   --privileged=true \</span><br><span class="line">   --net=host \</span><br><span class="line">   -e ZOO_MY_ID=2 \</span><br><span class="line">   -v /data/zookeeper/conf/zoo.cfg:/conf/zoo.cfg \</span><br><span class="line">   -v /data/zookeeper/data:/data \</span><br><span class="line">   -v /data/zookeeper/datalog:/datalog \</span><br><span class="line">   -v /data/zookeeper/logs:/logs \</span><br><span class="line">   -v /etc/localtime:/etc/localtime \</span><br><span class="line">   zookeeper:3.7.1</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zk-3</span></span><br><span class="line">docker run -d \</span><br><span class="line">   --restart=always \</span><br><span class="line">   --name zk-3 \</span><br><span class="line">   --privileged=true \</span><br><span class="line">   --net=host \</span><br><span class="line">   -e ZOO_MY_ID=3 \</span><br><span class="line">   -v /data/zookeeper/conf/zoo.cfg:/conf/zoo.cfg \</span><br><span class="line">   -v /data/zookeeper/data:/data \</span><br><span class="line">   -v /data/zookeeper/datalog:/datalog \</span><br><span class="line">   -v /data/zookeeper/logs:/logs \</span><br><span class="line">   -v /etc/localtime:/etc/localtime \</span><br><span class="line">   zookeeper:3.7.1</span><br></pre></td></tr></table></figure><p><strong>5、查看集群选举情况</strong></p><blockquote><p>看到 leader 为 zk-2，只要其中某一台服务器挂了，剩余两者会进行 leader 选举。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@kafka-1 ~]# docker exec -it zk-1 bash</span><br><span class="line">root@kafka-1:/apache-zookeeper-3.7.1-bin# bin/zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: follower</span><br><span class="line"></span><br><span class="line">[root@kafka-2 ~]# docker exec -it zk-2 bash</span><br><span class="line">root@kafka-2:/apache-zookeeper-3.7.1-bin# bin/zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: leader</span><br><span class="line"></span><br><span class="line">[root@kafka-3 ~]# docker exec -it zk-3 bash</span><br><span class="line">root@kafka-3:/apache-zookeeper-3.7.1-bin# bin/zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;至此，ZK 集群部署完毕！&#x3D;&#x3D;</p><h3 id="4-6-Kafka-集群"><a href="#4-6-Kafka-集群" class="headerlink" title="4.6 Kafka 集群"></a>4.6 Kafka 集群</h3><p><strong>1、pull 镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull bitnami/kafka:3.1.1</span><br></pre></td></tr></table></figure><p><strong>2、运行容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kafka-1</span></span><br><span class="line">docker run -d \</span><br><span class="line">    --name=kafka-1 \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    --net=host \</span><br><span class="line">    -e KAFKA_BROKER_ID=1 \</span><br><span class="line">    -e KAFKA_ZOOKEEPER_CONNECT=&quot;192.168.56.137:2181,192.168.56.138:2181,192.168.56.139:2181&quot; \</span><br><span class="line">    -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.56.137:9092 \</span><br><span class="line">    -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \</span><br><span class="line">    -e ALLOW_PLAINTEXT_LISTENER=yes \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    -t bitnami/kafka:3.1.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kafka-2</span></span><br><span class="line">docker run -d \</span><br><span class="line">    --name=kafka-2 \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    --net=host \</span><br><span class="line">    -e KAFKA_BROKER_ID=2 \</span><br><span class="line">    -e KAFKA_ZOOKEEPER_CONNECT=&quot;192.168.56.137:2181,192.168.56.138:2181,192.168.56.139:2181&quot; \</span><br><span class="line">    -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.56.138:9092 \</span><br><span class="line">    -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \</span><br><span class="line">    -e ALLOW_PLAINTEXT_LISTENER=yes \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    -t bitnami/kafka:3.1.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kafka-3</span></span><br><span class="line">docker run -d \</span><br><span class="line">    --name=kafka-3 \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    --net=host \</span><br><span class="line">    -e KAFKA_BROKER_ID=3 \</span><br><span class="line">    -e KAFKA_ZOOKEEPER_CONNECT=&quot;192.168.56.137:2181,192.168.56.138:2181,192.168.56.139:2181&quot; \</span><br><span class="line">    -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.56.139:9092 \</span><br><span class="line">    -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \</span><br><span class="line">    -e ALLOW_PLAINTEXT_LISTENER=yes \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    -t bitnami/kafka:3.1.1</span><br></pre></td></tr></table></figure><p><strong>3、安装 kafka-manager 管理工具</strong></p><blockquote><p>我们在 kibana 上部署</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull sheepkiller/kafka-manager:stable</span><br></pre></td></tr></table></figure><blockquote><p>运行容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name=kafka-manager \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    -p 9000:9000 \</span><br><span class="line">    -e ZK_HOSTS=&quot;192.168.56.137:2181,192.168.56.138:2181,192.168.56.139:2181&quot; \</span><br><span class="line">    sheepkiller/kafka-manager:stable</span><br></pre></td></tr></table></figure><blockquote><p>浏览器访问：<a href="http://192.168.56.136:9000/">http://192.168.56.136:9000/</a></p></blockquote><p>创建 Kafka 集群节点，来查看当前集群状态：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220623215647425.png" alt="image-20220623215647425"></p><p>依次建立即可：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220623215853651.png" alt="image-20220623215853651"></p><p>看看集群状态：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220623220003302.png" alt="image-20220623220003302"></p><p>进入 Brokers 查看，每一个 Brokers 代表一个 Kafka 实例，这里显示为 3 ，所以我们的集群实例为三个：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220623220148318.png" alt="image-20220623220148318"></p><p>&#x3D;&#x3D;至此，Kafka集群部署完毕！&#x3D;&#x3D;</p><h3 id="4-7-Filebeat-原理及应用"><a href="#4-7-Filebeat-原理及应用" class="headerlink" title="4.7 Filebeat 原理及应用"></a>4.7 Filebeat 原理及应用</h3><blockquote><p>官方文档：<a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/index.html">Doc</a></p></blockquote><h4 id="4-7-1-架构图"><a href="#4-7-1-架构图" class="headerlink" title="4.7.1 架构图"></a>4.7.1 架构图</h4><p>Filebeat 隶属于Beats，一款轻量级的数据收集引擎，那它如何工作于 ELK 集群中呢？</p><p>Filebeat 安装在要收集日志的应用服务器中，Filebeat收集到日志之后传输到kafka中，logstash通过kafka拿到日志，在由logstash传给后面的es，es将日志传给后面的kibana，最后通过kibana展示出来。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/filebeat.png" alt="filebeat"></p><h4 id="4-7-2-工作原理"><a href="#4-7-2-工作原理" class="headerlink" title="4.7.2 工作原理"></a>4.7.2 工作原理</h4><p><strong>1、输入</strong></p><p>比如定义了一个输入类型（type）为 log 的源，在启动 filebeat 时，输入查找驱动器会匹配全局（glob）路径（path）的所有文件，并为每个文件启动一个收集器（harvester），且每个输入都在自己的 go 进程中运行。只有当收集文件有新内容时才会启动（harvester）。</p><p><strong>2、如何保持文件状态</strong></p><p>在实际中会有个问题，如果输出（Kafka、ES、Kibana）无法连接（访问）时，filebeat 如何保持文件状态？该文件内容是否成功发送给输出？</p><p>答案是可以的，<code>Filebeat 会保存每个文件的状态</code>，它会把<code>注册表文件中的状态</code>刷新到磁盘，该状态记录了<code>harvester</code>读取文件的最后一个偏移量，如果此时无法访问 Elasticsearch 或 Logstash 等输出，Filebeat 会跟踪发送的最后几行，并在输出再次可用时继续读取文件，从而确保发送所有日志行。</p><p>在 Filebeat 运行时，每个输入的状态信息也会保存在内存中。当 Filebeat 重新启动时，来自注册表文件的数据用于重建状态，并且 Filebeat 在最后一个已知位置继续每个 <code>harvester</code>（即继续采集当前最新数据并输出到输出目标）。</p><p>也就是说只有 <code>Filebeat</code> 将 <code>harvester</code> 到的日志内容成功发送到输出目标（Kafka、ES、Kibana），且直到输出确认它已收到事件时，才会开启下一轮的 <code>harvester</code> 。如果在发送事件的过程中关闭 <code>Filebeat</code>，它不会在关闭前等待输出确认所有事件是否收到，&#x3D;&#x3D;任何发送到输出但在 Filebeat 关闭之前未确认的事件，在 Filebeat 重新启动时会再次发送&#x3D;&#x3D;。这可确保每个事件至少发送一次，但最终可能会将重复的事件发送到输出。我们可以通过设置 <a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/configuration-general-options.html#shutdown-timeout"><code>shutdown_timeout</code></a> 选项将 Filebeat 配置为在关闭之前等待特定的时间。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220803115450602.png" alt="image-20220803115450602"></p><p><strong>3、确保至少一次交付</strong></p><p>由于 filebeat 可保持文件状态。</p><p>&#x3D;&#x3D;Filebeat 默认 30s 检测一次文件是否有变化。&#x3D;&#x3D;</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220803181401142.png" alt="image-20220803181401142"></p><p><strong>4、实战看看偏移量</strong></p><p>初始化完成后，会有一个文件来存储采集文件状态 <code>/data/filebeat/data/registry</code></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220803182713495.png" alt="image-20220803182713495"></p><p>此时，我新建一个 yml 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/test.log</span><br><span class="line"></span><br><span class="line">output.console:</span><br><span class="line">  pretty: true</span><br></pre></td></tr></table></figure><p>新建 <code>/tmp/test.log</code> 文件并写入数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch /tmp/test.log</span><br><span class="line">echo &quot;sdcnnwinhwwwwwwwwwwwwwwwwwwwwwwwwwwww&quot; &gt;&gt; /tmp/test.log</span><br></pre></td></tr></table></figure><p>启动 filebeat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -e -c conf.d/01.yml</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220803183210042.png" alt="image-20220803183210042"></p><p>查看 Filebeat 存储文件状态的文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /data/filebeat/data/registry</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个registry文件根据你部署的方式不同，位置也会有所不同啊，一般就在你Filebeat的数据目录下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">看到下图，该文件存储了采集数据的源文件及偏移量（下图红框）</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220803183244080.png" alt="image-20220803183244080"></p><p>再来看看源文件自身文件大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件大小为53，刚好与偏移量相同，因此我们现在就很明白了，当filebeat出现故障时，它会记录下源文件的偏移量，且在恢复时从该偏移量开始读取数据并发送数据到输出（Kafka、ES），实现数据的完整性。</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220803183312130.png" alt="image-20220803183312130"></p><h4 id="4-7-3-部署及应用"><a href="#4-7-3-部署及应用" class="headerlink" title="4.7.3 部署及应用"></a>4.7.3 部署及应用</h4><p><strong>1、安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在要收集的日志的服务器上部署该插件</span></span><br><span class="line">tar xzf filebeat-6.8.23-linux-x86_64.tar.gz -C /data/</span><br><span class="line">mv /data/filebeat-6.8.23-linux-x86_64/ /data/filebeat</span><br></pre></td></tr></table></figure><p><strong>2、配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/filebeat/</span><br><span class="line">cp filebeat.yml filebeat.yml.bak</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cat filebeat.yml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">=========================== Filebeat inputs =============================</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  json.keys_under_root: true</span><br><span class="line">  json.add_error_key: true</span><br><span class="line">  json.message_key: log</span><br><span class="line">  paths:</span><br><span class="line">    - /data/nginx/logs/access.log</span><br><span class="line">    - /data/nginx/logs/error.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">============================= Kafka outputs =============================</span></span><br><span class="line">output.kafka:</span><br><span class="line">  enabled: true</span><br><span class="line">  hosts: [&quot;192.168.56.137:9092&quot;,&quot;192.168.56.138:9092&quot;,&quot;192.168.56.139:9092&quot;]</span><br><span class="line">  topic: filebeat_test</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明：paths 可以指定多个路径</span></span><br></pre></td></tr></table></figure><blockquote><p>运行 filebeat</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前台启动</span></span><br><span class="line">/data/filebeat/filebeat -e -c filebeat.yml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台启动</span></span><br><span class="line">nohup /data/filebeat/filebeat -e -c filebeat.yml &amp;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;Docker 方式如何部署 Filebeat ？&#x3D;&#x3D;</p><ul><li><p>创建相关目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/docker_container/</span><br></pre></td></tr></table></figure></li><li><p>运行临时容器（复制相关目录到宿主机）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp tmp:/usr/share/filebeat /data/docker_container/</span><br></pre></td></tr></table></figure></li><li><p>赋予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 -R /data/docker_container/filebeat/</span><br></pre></td></tr></table></figure></li><li><p>删除临时容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f tmp</span><br></pre></td></tr></table></figure></li><li><p>启动新容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">普通docker中创建</span></span><br><span class="line">docker run -itd \</span><br><span class="line">  --privileged=true \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --name=filebeat \</span><br><span class="line">  --hostname=filebeat \</span><br><span class="line">  -v /data/docker_container/filebeat:/usr/share/filebeat \</span><br><span class="line">  -v /data/nginx/logs:/data/nginx/logs \</span><br><span class="line">  -v /etc/localtime:/etc/localtime \</span><br><span class="line">  docker.elastic.co/beats/filebeat:6.8.23</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker swarm 集群中创建</span></span><br><span class="line">docker service create \</span><br><span class="line">  --replicas 1 \</span><br><span class="line">  --name filebeat \</span><br><span class="line">  --network my-network \</span><br><span class="line">  --hostname=&quot;filebeat&quot; \</span><br><span class="line">  --constraint &#x27;node.labels.label == filebeat1&#x27; \</span><br><span class="line">  --mount type=bind,src=/data/docker_container/filebeat,dst=/usr/share/filebeat \</span><br><span class="line">  --mount type=bind,src=/data/nginx/logs,dst=/data/nginx/logs \</span><br><span class="line">  --mount type=bind,src=/etc/localtime,dst=/etc/localtime \</span><br><span class="line">  docker.elastic.co/beats/filebeat:6.8.23</span><br><span class="line"></span><br><span class="line">docker service create \</span><br><span class="line">  --replicas 1 \</span><br><span class="line">  --name filebeat \</span><br><span class="line">  --network my-network \</span><br><span class="line">  --hostname=&quot;filebeat&quot; \</span><br><span class="line">  --constraint &#x27;node.labels.label == filebeat1&#x27; \</span><br><span class="line">  --mount type=bind,src=/data/docker_container/filebeat,dst=/usr/share/filebeat \</span><br><span class="line">  --mount type=bind,src=/data/nginx/logs,dst=/data/nginx/logs \</span><br><span class="line">  --mount type=bind,src=/etc/localtime,dst=/etc/localtime \</span><br><span class="line">  docker.elastic.co/beats/filebeat:6.8.23 \</span><br><span class="line">  filebeat -e -c /usr/share/filebeat/conf.d/nginx_logs.yml</span><br><span class="line"></span><br><span class="line">=================以下为测试，忽略即可===================</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加命令</span></span><br><span class="line">docker service create \</span><br><span class="line">  --replicas 1 \</span><br><span class="line">  --name filebeat \</span><br><span class="line">  --network my-network \</span><br><span class="line">  --hostname=&quot;filebeat&quot; \</span><br><span class="line">  --constraint &#x27;node.labels.label == filebeat1&#x27; \</span><br><span class="line">  --mount type=bind,src=/data/docker_container/filebeat,dst=/usr/share/filebeat \</span><br><span class="line">  --mount type=bind,src=/data/nginx/logs,dst=/data/nginx/logs \</span><br><span class="line">  --mount type=bind,src=/etc/localtime,dst=/etc/localtime \</span><br><span class="line">  docker.elastic.co/beats/filebeat:6.8.23 \</span><br><span class="line">  -e -c /usr/share/filebeat/conf.d/nginx_logs.yml</span><br><span class="line">  </span><br><span class="line">docker service create \</span><br><span class="line">  --replicas 1 \</span><br><span class="line">  --name filebeat2 \</span><br><span class="line">  --network my-network \</span><br><span class="line">  --hostname=&quot;filebeat&quot; \</span><br><span class="line">  --constraint &#x27;node.labels.label == filebeat2&#x27; \</span><br><span class="line">  --mount type=bind,src=/data/docker_container/filebeat,dst=/usr/share/filebeat \</span><br><span class="line">  --mount type=bind,src=/data/nginx/logs,dst=/data/nginx/logs \</span><br><span class="line">  --mount type=bind,src=/etc/localtime,dst=/etc/localtime \</span><br><span class="line">  docker.elastic.co/beats/filebeat:6.8.23 \</span><br><span class="line">  -e -c /usr/share/filebeat/conf.d/nginx_logs.yml</span><br><span class="line">  </span><br><span class="line">docker service create \</span><br><span class="line">  --replicas 1 \</span><br><span class="line">  --name filebeat \</span><br><span class="line">  --network my-network \</span><br><span class="line">  --hostname=&quot;filebeat&quot; \</span><br><span class="line">  --constraint &#x27;node.labels.label == filebeat-m&#x27; \</span><br><span class="line">  --mount type=bind,src=/data/docker_container/filebeat,dst=/usr/share/filebeat \</span><br><span class="line">  --mount type=bind,src=/data/nginx/logs,dst=/data/nginx/logs \</span><br><span class="line">  --mount type=bind,src=/etc/localtime,dst=/etc/localtime \</span><br><span class="line">  docker.elastic.co/beats/filebeat:6.8.23 \</span><br><span class="line">  -e -c /usr/share/filebeat/conf.d/nginx_logs.yml</span><br></pre></td></tr></table></figure><blockquote><p>docker swarm 集群启动服务后，报错了，错误日志显示为文件权限问题，按照提示修改即可</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service logs filebeat</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220808162208549.png" alt="image-20220808162208549"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod go-w /data/docker_container/filebeat/filebeat.yml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：/usr/share/filebeat/filebeat.yml已经被持久化了</span></span><br></pre></td></tr></table></figure></li></ul><p>&#x3D;&#x3D;扩展：启动后 Filebeat 容器后，它执行了哪些命令？&#x3D;&#x3D;</p><ul><li><p>先看看镜像层是如何实现的？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初略的看看镜像构建过程</span></span><br><span class="line">docker history &lt;image-name:tags&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">详细看镜像构建过程</span></span><br><span class="line">docker image inspect &lt;image-name:tags&gt;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220808181035427.png" alt="image-20220808181035427"></p></li><li><p>启动容器后，会默认执行 <code>filebeat -e</code></p><p>之所以会执行filebeat -e，是因为其镜像层中的 <code>ENTRYPOINT</code> 和 <code>CMD</code>，熟悉 Docker 的都知道，ENTRYPOINT 语句肯定会执行，如果有 CMD 参数，那 CMD 参数将会作为 ENTRYPOINT 的选项参数而执行。</p></li></ul><p><strong>3、查看 kafka 集群状态</strong></p><p>可以看到新增了一个 Topics，说明 filebeat 采集的数据成功输出到了 Kafka 集群中了。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624103042003.png" alt="image-20220624103042003"></p><p>点击进去看看是否是我们上面定义的 <code>Topic: filebeat_test</code></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624103408352.png" alt="image-20220624103408352"></p><p><strong>4、这个时候就需要消费者来消费我这条数据了</strong></p><p>从 ELK 集群架构上看，消费者是我们的 ES 集群，那 ES 集群如何消费 Kafka 集群的消息呢？答案是通过 Logstash，为什么这里还要使用 logstash？原因是其具备 <code>input ---&gt; filter ---&gt; output</code> 的流功能，当然，filebeat 可以将数据直接发送到 ES 集群。</p><ul><li><p>配置 logstash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        type =&gt; &quot;filebeat_test_log&quot;</span><br><span class="line">        codec =&gt; &quot;json&quot;</span><br><span class="line">        topics =&gt; &quot;filebeat_test&quot;</span><br><span class="line">        decorate_events =&gt; true</span><br><span class="line">        bootstrap_servers =&gt; &quot;192.168.56.137:9092, 192.168.56.138:9092, 192.168.56.139:9092&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;]</span><br><span class="line">        user =&gt; &quot;elastic&quot;</span><br><span class="line">        password =&gt; &quot;123456&quot;</span><br><span class="line">        index =&gt; [&quot;%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行 logstash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/logstash/bin/logstash -f /data/logstash/config/conf.d/filebeat_test.conf</span><br></pre></td></tr></table></figure></li><li><p>ES 集群查看是否收到了该消息</p><blockquote><p>可看到，ES 集群已经成功消费了 Kafka 集群的消息了。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624105553521.png" alt="image-20220624105553521"></p></li><li><p>我们再去 Kibana 看看，进行相关检索</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624111301216.png" alt="image-20220624111301216"></p></li></ul><h4 id="4-7-4-调用模块"><a href="#4-7-4-调用模块" class="headerlink" title="4.7.4 调用模块"></a>4.7.4 调用模块</h4><p>内置模块路径（<code>/data/filebeat/modules.d/*.yml.disabled</code>），默认下是没开启模块的，需我们手动开启，实现方式有两种：配置文件、命令行。</p><h5 id="4-7-4-1-配置文件方式"><a href="#4-7-4-1-配置文件方式" class="headerlink" title="4.7.4.1 配置文件方式"></a>4.7.4.1 配置文件方式</h5><p>1、修改 filebeat.yml 配置文件</p><blockquote><p>新增如下内容</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filebeat.config.modules:</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">  reload.enabled: true</span><br><span class="line">  reload.period: 10s</span><br></pre></td></tr></table></figure><p>2、启用模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用 mysql 模块</span></span><br><span class="line">[root@kibana filebeat]# ./filebeat modules enable mysql</span><br><span class="line">Enabled mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用多个模块</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[root@kibana filebeat]<span class="comment"># ./filebeat modules enable apache2 mysql</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停用模块</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./filebeat modules <span class="built_in">disable</span> apache2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看哪些模块被启用了</span></span><br><span class="line">./filebeat modules list</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220803122353089.png" alt="image-20220803122353089"></p><blockquote><p>当启用了对应的模块时， <code>/data/filebeat/modules.d/*.yml.disabled</code> 对应的<code>*.yml.disabled</code> 也会被自动重命名为 <code>/data/filebeat/modules.d/*.yml</code></p></blockquote><p>3、修改模块文件下的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim /data/filebeat/modules.d/mysql.yml</span><br><span class="line">=============================================</span><br><span class="line">- module: mysql</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Error logs</span></span><br><span class="line">  error:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line">    # Set custom paths for the log files. If left empty,</span><br><span class="line">    # Filebeat will choose the paths depending on your OS.</span><br><span class="line">    var.paths: [&quot;/var/log/mariadb/mariadb.log&quot;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Slow logs</span></span><br><span class="line">  slowlog:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line">    # Set custom paths for the log files. If left empty,</span><br><span class="line">    # Filebeat will choose the paths depending on your OS.</span><br><span class="line">    var.paths: [&quot;/var/log/mariadb/slow.log&quot;]</span><br></pre></td></tr></table></figure><p>4、修改 <code>filebeat.yml</code> 配置文件</p><blockquote><p>完整示例</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">案例1-【发送事件至Kafka集群】</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">=========================== Filebeat inputs =============================</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  json.keys_under_root: true</span><br><span class="line">  json.add_error_key: true</span><br><span class="line">  json.message_key: log</span><br><span class="line">  paths:</span><br><span class="line">    - /data/nginx/logs/*.log </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">============================= Kafka outputs =============================</span></span><br><span class="line">output.kafka:</span><br><span class="line">  enabled: true</span><br><span class="line">  hosts: [&quot;192.168.56.137:9092&quot;,&quot;192.168.56.138:9092&quot;,&quot;192.168.56.139:9092&quot;]</span><br><span class="line">  topic: module-test</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">================================ modules ================================</span> </span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">  reload.enabled: true</span><br><span class="line">  reload.period: 10s</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">案例2-【发送事件至ES集群】</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">=========================== Filebeat inputs =============================</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  json.keys_under_root: true</span><br><span class="line">  json.add_error_key: true</span><br><span class="line">  json.message_key: log</span><br><span class="line">  paths:</span><br><span class="line">    - /data/nginx/logs/*.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">========================= elasticsearch outputs =========================</span></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;123456&quot;</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">================================ modules ================================</span> </span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">  reload.enabled: true</span><br><span class="line">  reload.period: 10s</span><br></pre></td></tr></table></figure><p>5、初始化环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./filebeat setup -e</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">setup 加载模板</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-e 将标准输出输出至屏幕，而非系统日志中</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220803154710606.png" alt="image-20220803154710606"></p><p>6、运行（启动）Filebeat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -e</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220803154742551.png" alt="image-20220803154742551"></p><p>看看 ES 集群是否收到该数据</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220803155133839.png" alt="image-20220803155133839"></p><h5 id="4-7-4-2-命令行方式"><a href="#4-7-4-2-命令行方式" class="headerlink" title="4.7.4.2 命令行方式"></a>4.7.4.2 命令行方式</h5><p>该方式在启动 Filebeat 时直接指定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -e -M &quot;nginx.access.var.paths=[/data/nginx/logs/access.log]&quot; -M &quot;nginx.error.var.paths=[/data/nginx/logs/error.log]&quot;</span><br></pre></td></tr></table></figure><h4 id="4-7-5-基础用法"><a href="#4-7-5-基础用法" class="headerlink" title="4.7.5 基础用法"></a>4.7.5 基础用法</h4><blockquote><p><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/filebeat-input-log.html">官方文档实例</a></p></blockquote><h5 id="4-7-5-1-input"><a href="#4-7-5-1-input" class="headerlink" title="4.7.5.1 input"></a>4.7.5.1 input</h5><p>1、Log</p><ul><li><p>通用配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例1</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/messages</span><br><span class="line">    - /var/log/*.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例2</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log </span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/system.log</span><br><span class="line">    - /var/log/wifi.log</span><br><span class="line">- type: log </span><br><span class="line">  paths:</span><br><span class="line">    - &quot;/var/log/apache2/*&quot;</span><br><span class="line">  fields:</span><br><span class="line">    apache: true</span><br><span class="line">  fields_under_root: true</span><br></pre></td></tr></table></figure></li><li><p>配置选项</p><ul><li><p>encoding</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  encoding: plain</span><br><span class="line">  ...</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">encoding选项用于读取包含国际字符的数据的文件编码。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常见编码：plain, latin1, utf-8, utf-16be-bom, utf-16be, utf-16le, big5, gb18030, gbk, hz-gb-2312, euc-kr, euc-jp, iso-2022-jp, shift-jis ...</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">plain编码比较特殊，因为它不验证或转换任何输入。</span></span><br></pre></td></tr></table></figure></li><li><p>paths</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/*/*.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取/var/log/目录下的所有子目录下的所有以.<span class="built_in">log</span>结尾的文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但并不会获取/var/log/目录下的日志文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果向获取/var/log/目录下的日志文件，及子目录下的文件，可使用recursive_glob参数</span></span><br></pre></td></tr></table></figure></li><li><p>exclude_lines</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  ...</span><br><span class="line">  exclude_lines: [&#x27;^DBG&#x27;]</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示不收集以DBG开头的行的日志信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认是收集所有行（空行跳过）</span></span><br></pre></td></tr></table></figure></li><li><p>include_line</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  ...</span><br><span class="line">  include_lines: [&#x27;^ERR&#x27;, &#x27;^WARN&#x27;]</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示只收集以ERR、WARN开头的行的日志信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认是收集所有行（空行跳过）</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">exclude_lines与include_line结合使用</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  ...</span><br><span class="line">  include_lines: [&#x27;sometext&#x27;]</span><br><span class="line">  exclude_lines: [&#x27;^DBG&#x27;]</span><br></pre></td></tr></table></figure></li><li><p>harvester_buffer_size</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  ...</span><br><span class="line">  harvester_buffer_size: 16384</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每个收集器在获取文件时使用的缓冲区大小（以字节为单位）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认值为 16384（16K）</span></span><br></pre></td></tr></table></figure></li><li><p>max_bytes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  ...</span><br><span class="line">  harvester_buffer_size: 10485760</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单个日志消息可以拥有的最大字节数。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之后的所有字节 max_bytes都被丢弃而不发送。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此设置对于可能变得很大的多行日志消息特别有用。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认值为 10MB (10485760)。</span></span><br></pre></td></tr></table></figure></li><li><p>json</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  ...</span><br><span class="line">  json.keys_under_root: true</span><br><span class="line">  json.add_error_key: true</span><br><span class="line">  json.message_key: log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用于解码结构化为JSON的日志信息。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因此JSON解码仅在每行有一个JSON对象时该选项参数才有效。</span></span><br></pre></td></tr></table></figure></li><li><p>enabled</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  ...</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">enabled：是否启用filebeat的input功能（默认是<span class="literal">true</span>）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设置为<span class="literal">false</span>，将采集不到日志（因为input已经被关闭）</span></span><br></pre></td></tr></table></figure></li><li><p>tags</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  . . .</span><br><span class="line">  tags: [&quot;json&quot;,&quot;...&quot;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可在每个事件类型中定义标签（可定义多个）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">便于后期做过滤相关操作</span></span><br></pre></td></tr></table></figure></li><li><p>fields</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  . . .</span><br><span class="line">  fields:</span><br><span class="line">    app_id: query_engine_12</span><br><span class="line">    new_name: rab</span><br><span class="line">  fields_under_root: true</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用于向输出添加附加信息的可选字段（自定义），可定义多个</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字段可以是标量值、数组、字典或这些的任何嵌套组合，默认为字典</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果fields_under_root选项设置为 <span class="literal">true</span>，则自定义 字段将作为顶级字段存储在输出文档中</span></span><br></pre></td></tr></table></figure><blockquote><p>如下图，上面定义的标签（tags）和字段（fields），会在 Kibana 展现</p><p>打问号的字段就是我们自定义的，其他字段为默认字段。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220804161155427.png" alt="image-20220804161155427"></p></li></ul></li></ul><p>2、Stdin</p><blockquote><p>与 log 一样，就是类型不一样而已。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: stdin</span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/*/*.log</span><br></pre></td></tr></table></figure><p>3、Redis</p><ul><li><p>通用配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: redis</span><br><span class="line">  hosts: [&quot;localhost:6379&quot;]</span><br><span class="line">  password: &quot;$&#123;redis_pwd&#125;&quot;</span><br></pre></td></tr></table></figure></li><li><p>配置选项</p><ul><li><p>scan_frequency</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: redis</span><br><span class="line">  hosts: [&quot;localhost:6379&quot;]</span><br><span class="line">  password: &quot;$&#123;redis_pwd&#125;&quot;</span><br><span class="line">  scan_frequency: 5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Filebeat 从 Redis 慢日志中读取条目的频率。指定1s尽可能频繁地扫描 Redis，而不会导致 Filebeat 扫描过于频繁。不要将此值设置为小于1s</span></span><br></pre></td></tr></table></figure></li><li><p>maxconn</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: redis</span><br><span class="line">  hosts: [&quot;localhost:6379&quot;]</span><br><span class="line">  password: &quot;$&#123;redis_pwd&#125;&quot;</span><br><span class="line">  maxconn: 10</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最大并发连接，默认为10</span></span><br></pre></td></tr></table></figure></li><li><p>其他选项与上面类似</p></li></ul></li></ul><p>4、Docker</p><ul><li><p>通用配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: docker</span><br><span class="line">  containers.ids: </span><br><span class="line">    - &#x27;8b6fe7dc9e067b58476dc57d6986dd96d7100430c5de3b109a99cd56ac655347&#x27;</span><br></pre></td></tr></table></figure></li><li><p>配置选项</p><ul><li><p>containers.ids</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: docker</span><br><span class="line">  containers.ids: </span><br><span class="line">    - &#x27;*&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器ID</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;*&#x27;</span> 表示所有容器</span></span><br></pre></td></tr></table></figure></li><li><p>containers.path</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: docker</span><br><span class="line">  containers.ids: </span><br><span class="line">    - &#x27;*&#x27;</span><br><span class="line">  containers.path:</span><br><span class="line">    - /var/lib/docker/containers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器所在路径</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>5、具体实例</p><p><font color=Crimson><strong>情况一：Java 堆栈日志类型，如何搜集？</strong></font></p><blockquote><p>Java 堆栈跟踪由多行组成，初始行之后的每一行都以空格开头。</p></blockquote><ul><li><p>日志类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalStateException: A book has a null property</span><br><span class="line">       at com.example.myproject.Author.getBookIds(Author.java:38)</span><br><span class="line">       at com.example.myproject.Bootstrap.main(Bootstrap.java:14)</span><br><span class="line">Caused by: java.lang.NullPointerException</span><br><span class="line">       at com.example.myproject.Book.getId(Book.java:22)</span><br><span class="line">       at com.example.myproject.Author.getBookIds(Author.java:35)</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li><li><p>Filebeat 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">情形1---默认输出</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  multiline.pattern: &#x27;^[[:space:]]&#x27;</span><br><span class="line">  multiline.negate: false</span><br><span class="line">  multiline.match: after</span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/test.log</span><br><span class="line">  tags: [&quot;multiline-01&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    app_id: muil_12</span><br><span class="line">    new_name: rab</span><br><span class="line">  fields_under_root: true</span><br><span class="line">  </span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;123456&quot;</span><br><span class="line">  index: &quot;multiline-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">setup.template.name: &quot;filebeattest&quot;</span><br><span class="line">setup.template.pattern: &quot;filebeattest-*&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">情形2---自定义某部分内容为一个filebeat事件来输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">条件限制：要同时满足</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.匹配以空格开头的行，且在空格后紧跟at关键字或者...关键字符串</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.匹配以Caused by开头的行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这1、2条件合为一个整体进行输出，也就是每次日志内容新增都是以特定的格式输出</span></span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  multiline.pattern: &#x27;^[[:space:]]+(at|\.&#123;3&#125;)\b|^Caused by:&#x27;</span><br><span class="line">  multiline.negate: false</span><br><span class="line">  multiline.match: after</span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/test.log</span><br><span class="line">  tags: [&quot;multiline-01&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    app_id: muil_12</span><br><span class="line">    new_name: rab</span><br><span class="line">  fields_under_root: true</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;123456&quot;</span><br><span class="line">  index: &quot;multiline-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">setup.template.name: &quot;filebeattest&quot;</span><br><span class="line">setup.template.pattern: &quot;filebeattest-*&quot;</span><br></pre></td></tr></table></figure><p><strong>multiline的作用就是将某些格式化数据以一个完整filebeat事件进行输出至输出目标</strong></p><ul><li>情形1：如果没有过多的条件限制，只要日志文件按照特定的格式有新内容，它就会采集一条数据并作为一个filebeat事件输出</li><li>情形2：如果做了条件限制，如图2，我限制了它们为一个整体来输出，只要新来了一条数据，就会按指定的规则来输出</li></ul></li><li><p>Kibana 数据展示</p><ul><li><p>情形1 截图</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220804165030462.png" alt="image-20220804165030462"></p></li><li><p>情形2 截图</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220804162913904.png" alt="image-20220804162913904"></p></li><li><p>其他情况</p><p>而如果 Java 日志格式不统一，那 filebeat 规则就不生效了，如下又新增了一条内容（&#x3D;&#x3D;但一般不会出现这种情况&#x3D;&#x3D;）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalStateException: A book has a null property</span><br><span class="line">       at com.example.myproject.Author.getBookIds(Author.java:38)</span><br><span class="line">       at com.example.myproject.Bootstrap.main(Bootstrap.java:14)</span><br><span class="line">Caused by: java.lang.NullPointerException</span><br><span class="line">       at com.example.myproject.Book.getId(Book.java:22)</span><br><span class="line">       at com.example.myproject.Author.getBookIds(Author.java:35)</span><br><span class="line">Caused test: java.lang.NullPointerException</span><br><span class="line">       aa com.example.myproject.Book.getId(Book.java:22)</span><br><span class="line">       aa com.example.myproject.Author.getBookIds(Author.java:35)</span><br></pre></td></tr></table></figure><blockquote><p>Kibana 数据展示：再看看 Kibana 数据展示，按filebeat定义的规则来看，收集到的数据并不完整。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220804163755203.png" alt="image-20220804163755203"></p></li></ul></li></ul><p><font color=Crimson><strong>情况二：带时间戳的 Java 应用日志格式，如何收集？</strong></font></p><blockquote><p>以测试环境 checkcheck 项目举例，下面就是一种典型的时间戳的日志格式。</p></blockquote><ul><li><p>日志类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">2022-08-04 08:14:46.660 [schedule-1-t-10] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间656已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 08:24:46.661 [schedule-1-t-7] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间1256已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 08:54:46.661 [schedule-1-t-3] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间937已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 09:14:46.662 [schedule-1-t-10] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间865已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 09:24:46.662 [schedule-1-t-8] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间1465已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 09:34:46.663 [schedule-1-t-1] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间2065已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 09:44:46.663 [schedule-1-t-5] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间2665已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 09:54:46.663 [schedule-1-t-6] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间3265已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 10:04:46.664 [schedule-1-t-7] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间3865已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 10:14:46.664 [schedule-1-t-8] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间4465已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 10:24:46.665 [schedule-1-t-1] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间5065已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 10:34:46.665 [schedule-1-t-2] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间5665已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 10:44:46.665 [schedule-1-t-6] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间6265已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 10:54:46.666 [schedule-1-t-9] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间6865已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 11:04:46.666 [schedule-1-t-4] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间7465已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 11:14:46.666 [schedule-1-t-5] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间8065已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 11:24:46.667 [schedule-1-t-2] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间8665已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 11:34:46.667 [schedule-1-t-3] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间9265已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 11:44:46.667 [schedule-1-t-1] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间9865已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 11:54:46.668 [schedule-1-t-3] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间10465已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">2022-08-04 12:04:46.668 [schedule-1-t-4] ERROR com.kys.redis.gatehash.GateHashManager - 订阅HashCode最后活跃时间11065已经大于限制600秒,取消订阅，重新订阅</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>Filebeat 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  multiline.pattern: &#x27;^\[[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&#x27;</span><br><span class="line">  multiline.negate: true</span><br><span class="line">  multiline.match: after</span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/test.log</span><br><span class="line">  tags: [&quot;multiline-01&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    app_id: muil_12</span><br><span class="line">    new_name: rab</span><br><span class="line">  fields_under_root: true</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;123456&quot;</span><br><span class="line">  index: &quot;multiline-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">setup.template.name: &quot;filebeattest&quot;</span><br><span class="line">setup.template.pattern: &quot;filebeattest-*&quot;</span><br></pre></td></tr></table></figure></li><li><p>Kibana 数据展示</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220804172634632.png" alt="image-20220804172634632"></p></li></ul><p><font color=Crimson><strong>扩展</strong></font>：如果匹配不到 filebeat 规则的数据，将如何处理？</p><blockquote><p>在<code>情况一</code>中有出现数据不完整的去情况，那间如何处理？解决方案就是设置参数：</p><ul><li><code>multiline.negate: true</code> </li><li><code>multiline.match: after</code></li></ul></blockquote><ul><li><p>filebeat 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  multiline.pattern: &#x27;^[[:space:]]+(at|\.&#123;3&#125;)\b|^Caused by:&#x27;</span><br><span class="line">  multiline.negate: true</span><br><span class="line">  multiline.match: after</span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/test.log</span><br><span class="line">  tags: [&quot;multiline-01&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    app_id: muil_12</span><br><span class="line">    new_name: rab</span><br><span class="line">  fields_under_root: true</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;123456&quot;</span><br><span class="line">  index: &quot;multiline-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">setup.template.name: &quot;filebeattest&quot;</span><br><span class="line">setup.template.pattern: &quot;filebeattest-*&quot;</span><br></pre></td></tr></table></figure></li><li><p>日志示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalStateException: A book has a null property</span><br><span class="line">       at com.example.myproject.Author.getBookIds(Author.java:38)</span><br><span class="line">       at com.example.myproject.Bootstrap.main(Bootstrap.java:14)</span><br><span class="line">wtttwww sss dcsdccdc.csdcs.dscs.dc</span><br><span class="line">       cc sdc.cocsdc.csss(Book.java:36)</span><br><span class="line">       dd sdcs.grtr.ytu.pklm(Author.java:12)</span><br><span class="line">Caused by: java.lang.NullPointerException</span><br><span class="line">       at com.example.myproject.Book.getId(Book.java:22)</span><br><span class="line">       at com.example.myproject.Author.getBookIds(Author.java:35)</span><br></pre></td></tr></table></figure></li><li><p>Kibana 数据展示</p><p>数据展示失败—-与预期不符（后面再研究）</p></li></ul><p>&#x3D;&#x3D;小结：通过以上案例你就可以发现，multiline 的作用无非就是一次输出与 filebeat 规则匹配的日志格式，类似于并发输出了，为什么这样说呢？默认的输出方式是来一条数据就输出一条（在filebeat采集时间内），而 multiline 也满足来一条数据就输出一条（在filebeat采集时间内），但如果在 filebeat 采集时间内匹配到了规则指定的数据，那就会作为单个事件一次性输出。&#x3D;&#x3D;</p><p><font color=Crimson><strong>情况三：日志格式有自定义的字段，如何收集？</strong></font></p><blockquote><p>有这么一种情况，也是在测试&#x2F;生产环境中常见的，由于某些特殊情况，开发一般会在日志中做相关的标记，比如起始事件的标识符。那我们如何每次截取开发指定的这段日志数据呢？</p></blockquote><ul><li><p>filebeat 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  multiline.pattern: &#x27;Start new event&#x27;</span><br><span class="line">  multiline.negate: true</span><br><span class="line">  multiline.match: after</span><br><span class="line">  multiline.flush_pattern: &#x27;End event&#x27;</span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/test.log</span><br><span class="line">  tags: [&quot;multiline-01&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    app_id: muil_12</span><br><span class="line">    new_name: rab</span><br><span class="line">  fields_under_root: true</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;123456&quot;</span><br><span class="line">  index: &quot;multiline-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">setup.template.name: &quot;filebeattest&quot;</span><br><span class="line">setup.template.pattern: &quot;filebeattest-*&quot;</span><br></pre></td></tr></table></figure></li><li><p>日志示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[2015-08-24 11:49:14,389] Start new event</span><br><span class="line">[2015-08-24 11:49:14,395] Content of processing something</span><br><span class="line">[2015-08-24 11:49:14,399] End event</span><br></pre></td></tr></table></figure></li><li><p>Kibana 数据展示</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220804180429618.png" alt="image-20220804180429618"></p></li></ul><h5 id="4-7-5-2-output"><a href="#4-7-5-2-output" class="headerlink" title="4.7.5.2 output"></a>4.7.5.2 output</h5><blockquote><p>更多 output 请看<a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/configuring-output.html">《官方文档》</a>，以下仅列出了常用的几种。</p></blockquote><p>1、Elasticsearch</p><ul><li><p>基本格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;ES_IP:9200&quot;, &quot;ES_IP:9200&quot;, &quot;ES_IP:9200&quot;, ...]</span><br><span class="line">  protocol: &quot;http&quot;</span><br><span class="line">  username: &quot;&#123;beatname_lc&#125;_internal&quot;</span><br><span class="line">  password: &quot;&#123;pwd&#125;&quot;</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hosts：ES集群主机IP，可以定义为URL或IP:PORT</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">protocol：ES协议，默认http协议，如果你的ES加密，则使用https</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">username：ES用户名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">password：ES密码</span></span><br></pre></td></tr></table></figure></li><li><p>定义输出到 ES 集群的索引</p><ul><li><p>基本索引定义格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://localhost:9200&quot;]</span><br><span class="line">  index: &quot;%&#123;[fields.log_type]&#125;-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot; </span><br></pre></td></tr></table></figure></li><li><p>带有条件的索引格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://localhost:9200&quot;]</span><br><span class="line">  indices:</span><br><span class="line">    - index: &quot;warning-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        message: &quot;WARN&quot;</span><br><span class="line">    - index: &quot;error-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        message: &quot;ERR&quot;</span><br><span class="line">        </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">indices：定义一组索引选择器规则</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如何选择？当filebeat传入的日志数据内容中包含WARN关键字，则选择warning-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.<span class="built_in">dd</span>&#125;作为ES索引；当filebeat传入的日志数据内容中包含ERR关键字，则选择error-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.<span class="built_in">dd</span>&#125;作为ES索引</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>2、Logstash</p><p><code>Filebeat</code> 将事件发送到 <code>Logstash</code> 是基于 TCP 协议来实现，相比于 <code>Filebeat</code> 直接将数据输出到 ES 集群而言，<code>Logstash</code> 允许对生成的事件进行<code>额外处理和路由</code></p><p>3、Kafka</p><h4 id="4-7-6-Filebeat-ES"><a href="#4-7-6-Filebeat-ES" class="headerlink" title="4.7.6 Filebeat + ES"></a>4.7.6 Filebeat + ES</h4><blockquote><p>本次以 Docker Swarm 集群服务日志为搜集目标。</p></blockquote><h5 id="4-7-6-1-Nginx"><a href="#4-7-6-1-Nginx" class="headerlink" title="4.7.6.1 Nginx"></a>4.7.6.1 Nginx</h5><blockquote><p>先看看日志格式：可以是JSON格式，也可以是任意格式。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220805173132226.png" alt="image-20220805173132226"></p><p>1、Docker Swarm 集群启用 Nginx 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --replicas 2 \</span><br><span class="line">  --name my-web \</span><br><span class="line">  --network my-network \</span><br><span class="line">  --publish published=8080,target=80 \</span><br><span class="line">  --hostname=&quot;my-nginx&quot; \</span><br><span class="line">  --mount type=bind,src=/data/nginx/conf/nginx.conf,dst=/etc/nginx/nginx.conf \</span><br><span class="line">  --mount type=bind,src=/data/nginx/conf/conf.d,dst=/etc/nginx/conf.d \</span><br><span class="line">  --mount type=bind,src=/data/nginx/html,dst=/usr/share/nginx/html \</span><br><span class="line">  --mount type=bind,src=/data/nginx/logs,dst=/var/log/nginx \</span><br><span class="line">  nginx:1.20.2</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220805152246800.png" alt="image-20220805152246800"></p><blockquote><p>因为 Docker Swarm 集群自身调度算法，每次的滚动升级（扩容&#x2F;缩容）都可能导致服务被调度到不同的 work 节点上，所以每个节点我们也同样配置相同的 Filebeat，这样不管你的服务被调度到哪个工作节点那都没关系，只要确保输出到 ES 的索引保持一致即可，因为在 Kibana 展示的时候就是就是通过 ES 存储的索引来展示数据的。</p></blockquote><p>2、Filebeat 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@kibana filebeat]# cat conf.d/nginx_logs.yml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /data/nginx/logs/access.log</span><br><span class="line">    - /data/nginx/logs/error.log</span><br><span class="line">  tags: [&quot;nginx-01&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_all_logs</span><br><span class="line">  fields_under_root: true</span><br><span class="line"></span><br><span class="line">setup.template.name: &quot;filebeattest&quot;</span><br><span class="line">setup.template.pattern: &quot;filebeattest-*&quot;</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;123456&quot;</span><br><span class="line">  index: &quot;nginx_all_logs-%&#123;+yyyy.MM.dd&#125;&quot;</span><br></pre></td></tr></table></figure><p>3、启动 filebeat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -e -c conf.d/nginx_logs.yml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-e：信息输出至屏幕终端</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c：指定配置文件（如果你修改默认的配置文件名及路径，可以不指定）</span></span><br></pre></td></tr></table></figure><p>4、ES 简单查看验证</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220805155313793.png" alt="image-20220805155313793"></p><p>5、Kibana 创建索引并查看具体信息</p><blockquote><p>Nginx 每访问一次，Kibana 就会输出一次内容。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220805155434344.png" alt="image-20220805155434344"></p><p>&#x3D;&#x3D;更多过滤方法，请看第5节《Kibana 基础操作》&#x3D;&#x3D;</p><p>如果此时我故意将 <code>docker_swarm_work2</code> 节点上运行的 nginx 服务的配置文件做改动（写一个错误的语法），那 <code>nginx</code> 服务将是无法启动的，但是根据 Docker Swarm 的调度算法原理，会根据你 master 节点启动服务时指定的的服务副本数，从而再次启动相应的容器服务。</p><ul><li><p>Nginx 配置</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220805171644827.png" alt="image-20220805171644827"></p></li><li><p>查看 Docker Swarm</p><blockquote><p>可看到，原本 work2 上的节点服务，由于启动失败，但要保持集群指定的服务数，Docker Swarm 集群会再次启动一个服务，可看到该服务已经运行在了 work1 节点上了。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220805170249243.png" alt="image-20220805170249243"></p></li><li><p>此时再来看看 Kibana的数据</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220805172249044.png" alt="image-20220805172249044"></p></li></ul><p>&#x3D;&#x3D;6、扩展&#x3D;&#x3D;</p><p>在 <code>filebeat</code> 输出到 ES 前，我们可以做相关的过滤操作，现将上面的例子进一步优化。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /data/nginx/logs/access.log</span><br><span class="line">    - /data/nginx/logs/error.log</span><br><span class="line">  tags: [&quot;nginx-01&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_all_logs</span><br><span class="line">  fields_under_root: true</span><br><span class="line"></span><br><span class="line">setup.template.name: &quot;filebeattest&quot;</span><br><span class="line">setup.template.pattern: &quot;filebeattest-*&quot;</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;123456&quot;</span><br><span class="line">  indices:</span><br><span class="line">    - index: &quot;rab-access-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        message: &quot;Mozilla&quot;</span><br><span class="line">    - index: &quot;rab-error-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        message: &quot;error&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">indices：索引过滤条件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">when.contains：当包日志内容含error信息时，数据索引为rab-error-%&#123;+yyyy.MM.<span class="built_in">dd</span>&#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不定义过滤的when条件，则默认采集所有数据（访问和错误都会采集），比如indices:下可有多个index，但如果我的index不加when条件，那就默认收集所有日志数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当indices:下都有过滤条件，但是根据你提供的path日志内容你无法匹配到你定义的关键字，那将会以more索引filebeat-&#123;&#123;version&#125;&#125;-&#123;YYYYmmdd&#125;来输出</span></span><br></pre></td></tr></table></figure><ul><li><p>正常访问的情况，看看 ES 索引</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220805180402674.png" alt="image-20220805180402674"></p></li><li><p>异常访问时，看看 ES 索引</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220805182845157.png" alt="image-20220805182845157"></p></li><li><p>看看 Kibana 日志</p><blockquote><p>我在 Nginx 访问页面刷新了两次</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220805183102712.png" alt="image-20220805183102712"></p></li><li><p>还可以继续优化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /data/nginx/logs/access.log</span><br><span class="line">    - /data/nginx/logs/error.log</span><br><span class="line">  tags: [&quot;nginx-01&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_all_logs</span><br><span class="line">  fields_under_root: true</span><br><span class="line">  </span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /data/nginx/logs/access.log</span><br><span class="line">    - /data/nginx/logs/error.log</span><br><span class="line">  tags: [&quot;nginx-01&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_all_logs</span><br><span class="line">  fields_under_root: true</span><br><span class="line"></span><br><span class="line">setup.template.name: &quot;filebeattest&quot;</span><br><span class="line">setup.template.pattern: &quot;filebeattest-*&quot;</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;123456&quot;</span><br><span class="line">  indices:</span><br><span class="line">    - index: &quot;rab-access-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        message: &quot;Mozilla&quot;</span><br><span class="line">    - index: &quot;rab-error-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        message: &quot;error&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">indices：索引过滤条件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">when.contains：当包日志内容含error信息时，数据索引为rab-error-%&#123;+yyyy.MM.<span class="built_in">dd</span>&#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不定义过滤的when条件，则默认采集所有数据（访问和错误都会采集），比如indices:下可有多个index，但如果我的index不加when条件，那就默认收集所有日志数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当indices:下都有过滤条件，但是根据你提供的path日志内容你无法匹配到你定义的关键字，那将会以more索引filebeat-&#123;&#123;version&#125;&#125;-&#123;YYYYmmdd&#125;来输出</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">详情如下：</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    - /data/nginx/logs/*.log</span><br><span class="line">  scan_frequency: 10s</span><br><span class="line">  tail_files: true</span><br><span class="line">  fields:</span><br><span class="line">    index_name: &quot;nginx_log&quot;</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">不以[开头的行都合并到上一行的末尾</span></span><br><span class="line">  multiline.type: pattern</span><br><span class="line">  multiline.pattern: &#x27;^[[:space:]]+(at|\.&#123;3&#125;)[[:space:]]+\b|^Caused by:&#x27;</span><br><span class="line">  multiline.negate: false</span><br><span class="line">  multiline.match: after</span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/log4j/*.log</span><br><span class="line">  fields:</span><br><span class="line">    index_name: &quot;log4j_log&quot;</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  multiline.type: pattern</span><br><span class="line">  multiline.pattern: &#x27;^[[:space:]]+(at|\.&#123;3&#125;)[[:space:]]+\b|^Caused by:&#x27;</span><br><span class="line">  multiline.negate: false</span><br><span class="line">  multiline.match: after</span><br><span class="line">  fields:</span><br><span class="line">    index_name: &quot;biz_log&quot;</span><br><span class="line">  scan_frequency: 10s</span><br><span class="line">  pipeline: &quot;extract-traceid-pipeline&quot;</span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/biz/*.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># # 7.x的版本中需要禁用此索引生命周期，否则在指定es索引名字的时候会有问题</span></span></span><br><span class="line">setup.ilm.enabled: false</span><br><span class="line">setup.template.name: &quot;my-log&quot;</span><br><span class="line">setup.template.pattern: &quot;my-*&quot;</span><br><span class="line">setup.template.enabled: true</span><br><span class="line">setup.template.overwrite: false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出到es</span></span><br><span class="line">output.elasticsearch:</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">worker: 1</span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">bulk_max_size: 1500</span></span><br><span class="line">  hosts: [&quot;elasticsearch1:9200&quot;]</span><br><span class="line">  index: &quot;pb-%&#123;[fields.index_name]&#125;-*&quot;</span><br><span class="line">  indices:</span><br><span class="line">    - index: &quot;pb-nginx-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.equals:</span><br><span class="line">        fields.index_name: &quot;nginx_log&quot;</span><br><span class="line">    - index: &quot;pb-log4j-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.equals:</span><br><span class="line">        fields.index_name: &quot;log4j_log&quot;</span><br><span class="line">    - index: &quot;pb-biz-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.equals:</span><br><span class="line">        fields.index_name: &quot;biz_log&quot;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;以上就是一些基础优化，参考即可。&#x3D;&#x3D;</p></li></ul><h5 id="4-7-6-2-Java"><a href="#4-7-6-2-Java" class="headerlink" title="4.7.6.2 Java"></a>4.7.6.2 Java</h5><blockquote><p>具体案例可看 <code>4.7.5.1</code> 部分，分别对应了不同的日志格式分析。</p></blockquote><h3 id="4-8-Filebeat-Logstash-ES"><a href="#4-8-Filebeat-Logstash-ES" class="headerlink" title="4.8 Filebeat + Logstash + ES"></a>4.8 Filebeat + Logstash + ES</h3><p>关于 <code>Filebeat + ES</code> 的案例，请看 <code>4.7.6</code> 部分。</p><p>先看看 Logstash 的流过程：</p><ol><li>先确定数据源（可以是常规日志、Filebeat输出、Kafka集群）</li><li>Filters 数据过滤</li><li>输出到 ES 集群</li><li>Kibana 数据展示</li></ol><p><img src="https://www.elastic.co/guide/en/logstash/6.8/static/images/basic_logstash_pipeline.png" alt="basic logstash pipeline"></p><h4 id="4-8-1-Filebeat-数据采集"><a href="#4-8-1-Filebeat-数据采集" class="headerlink" title="4.8.1 Filebeat 数据采集"></a>4.8.1 Filebeat 数据采集</h4><blockquote><p>首先确定数据源我们使用 <code>filebeat</code> 来做数据采集。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs<span class="punctuation">:</span></span><br><span class="line">- type<span class="punctuation">:</span> log</span><br><span class="line">  paths<span class="punctuation">:</span></span><br><span class="line">    - /data/nginx/logs/access.log</span><br><span class="line">    - /data/nginx/logs/error.log</span><br><span class="line">  tags<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;nginx-02&quot;</span><span class="punctuation">]</span></span><br><span class="line">  fields<span class="punctuation">:</span></span><br><span class="line">    log_type<span class="punctuation">:</span> nginx_all_logs</span><br><span class="line">  fields_under_root<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"></span><br><span class="line">output.logstash<span class="punctuation">:</span></span><br><span class="line">  hosts<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;192.168.56.140:5044&quot;</span><span class="punctuation">]</span></span><br><span class="line">  loadbalance<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  index<span class="punctuation">:</span> filebeat</span><br><span class="line">  </span><br><span class="line"># 参数说明</span><br><span class="line"># loadbalance：当你有多个logstash来做分流时（&gt;=<span class="number">2</span>），值设置为<span class="literal"><span class="keyword">true</span></span>，只有一个logstash分流，设置为<span class="literal"><span class="keyword">false</span></span>即可</span><br></pre></td></tr></table></figure><h4 id="4-8-2-Logstash-输出至-ES"><a href="#4-8-2-Logstash-输出至-ES" class="headerlink" title="4.8.2 Logstash 输出至 ES"></a>4.8.2 Logstash 输出至 ES</h4><blockquote><p>数据源确定后，接下来就是确定Logstash获取数据了</p></blockquote><p>1、Logstash 元数据</p><blockquote><p>更多元数据参考：<a href="https://www.elastic.co/guide/en/logstash/6.8/event-dependent-configuration.html#metadata">官方文档</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;@metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">      <span class="attr">&quot;beat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;filebeat&quot;</span><span class="punctuation">,</span> </span><br><span class="line">      <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.8.23&quot;</span> </span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc&quot;</span> </span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>2、Logstash 配置输出</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">input <span class="punctuation">&#123;</span></span><br><span class="line">  beats <span class="punctuation">&#123;</span></span><br><span class="line">    port =&gt; <span class="number">5044</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">output <span class="punctuation">&#123;</span></span><br><span class="line">  elasticsearch <span class="punctuation">&#123;</span></span><br><span class="line">    hosts =&gt; <span class="punctuation">[</span><span class="string">&quot;http://192.168.56.133:9200&quot;</span><span class="punctuation">,</span> <span class="string">&quot;http://192.168.56.134:9200&quot;</span><span class="punctuation">,</span> <span class="string">&quot;http://192.168.56.135:9200&quot;</span><span class="punctuation">]</span></span><br><span class="line">    user =&gt; <span class="string">&quot;elastic&quot;</span></span><br><span class="line">    password =&gt; <span class="string">&quot;123456&quot;</span></span><br><span class="line">    index =&gt; <span class="string">&quot;my_nginx-%&#123;+YYYY.MM.dd&#125;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># 官方案例：index =&gt; <span class="string">&quot;%&#123;[@metadata][beat]&#125;-%&#123;[@metadata][version]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span></span><br><span class="line"># 其实就是取元数据的默认值。</span><br></pre></td></tr></table></figure><p>3、分别启动 Logstash&#x2F;Filebeat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker restart logstash</span><br><span class="line">./filebeat -e -c conf.d/nginx_output_logstash.yml</span><br></pre></td></tr></table></figure><p>4、ES 验证</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220808114201901.png" alt="image-20220808114201901"></p><h3 id="4-9-Filebeat-Kafka-Logstash-ES"><a href="#4-9-Filebeat-Kafka-Logstash-ES" class="headerlink" title="4.9 Filebeat + Kafka + Logstash + ES"></a>4.9 Filebeat + Kafka + Logstash + ES</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        type =&gt; &quot;xgxy-v&quot;</span><br><span class="line">        codec =&gt; &quot;json&quot;</span><br><span class="line">        topics =&gt; &quot;xgxy&quot;</span><br><span class="line">        decorate_events =&gt; true</span><br><span class="line">        bootstrap_servers =&gt; &quot;192.168.56.137:9092, 192.168.56.138:9092, 192.168.56.139:9092&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;192.168.56.133:9200&quot;,&quot;192.168.56.134:9200&quot;,&quot;192.168.56.135:9200&quot;]</span><br><span class="line">        user =&gt; &quot;elastic&quot;</span><br><span class="line">        password =&gt; &quot;123456&quot;</span><br><span class="line">        index =&gt; [&quot;%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-9-FAQ"><a href="#4-9-FAQ" class="headerlink" title="4.9 FAQ"></a>4.9 FAQ</h3><h4 id="4-9-1-es-head-插件访问不了-ES-集群"><a href="#4-9-1-es-head-插件访问不了-ES-集群" class="headerlink" title="4.9.1 es-head 插件访问不了 ES 集群"></a>4.9.1 es-head 插件访问不了 ES 集群</h4><p><strong>1、详情如下图所示：</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624174527563.png" alt="image-20220624174527563"></p><p><strong>2、解决方案</strong></p><p>修改 ES 集群配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决跨域问题</span></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增以下内容</span></span><br><span class="line">http.cors.allow-headers: Authorization,X-Requested-With,Content-Length,Content-Type</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 ES 集群</span></span><br><span class="line">docker restart es-1</span><br><span class="line">docker restart es-2</span><br><span class="line">docker restart es-3</span><br></pre></td></tr></table></figure><p><strong>3、es-head 插件访问</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.56.136:9100/?auth_user=elastic&amp;auth_password=123456</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">auth_user：你在ES集群设置的用户名（其实是内置用户）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">auth_password：你当时设置的内置用户名密码</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624180113410.png" alt="image-20220624180113410"></p><p><strong>4、Nginx 如何配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">目前配置失败，正在查找原因...</span><br></pre></td></tr></table></figure><h2 id="五、Kibana-基础操作"><a href="#五、Kibana-基础操作" class="headerlink" title="五、Kibana 基础操作"></a>五、Kibana 基础操作</h2><h3 id="5-1-索引管理"><a href="#5-1-索引管理" class="headerlink" title="5.1 索引管理"></a>5.1 索引管理</h3><h4 id="5-1-1-查看-ES-的索引"><a href="#5-1-1-查看-ES-的索引" class="headerlink" title="5.1.1 查看 ES 的索引"></a>5.1.1 查看 ES 的索引</h4><p>【管理】–【索引管理】</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624112809355.png" alt="image-20220624112809355"></p><h4 id="5-1-2-创建和使用索引"><a href="#5-1-2-创建和使用索引" class="headerlink" title="5.1.2 创建和使用索引"></a>5.1.2 创建和使用索引</h4><blockquote><p>当我们的数据都存储到 ES 集群中时，接下来就是 Kibana 展示的环节了，首先我们要添加索引（可以进行泛检索），这个索引我们在 Logstash 的时候已经进行自定义了。</p></blockquote><p><strong>1、在菜单栏左侧的【管理】进行创建</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624112131666.png" alt="image-20220624112131666"></p><p><strong>2、以时间戳的方式进行筛选</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624112511428.png" alt="image-20220624112511428"></p><p><strong>3、如何查看刚刚创建的索引？</strong></p><blockquote><p>展示的时间的排序可以点击【时间】字段的下角标</p><p>图中，深灰色表示字 key，其后对应的是 value</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624121435875.png" alt="image-20220624121435875"></p><p><strong>4、如何指定字段显示？</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624122223751.png" alt="image-20220624122223751"></p><blockquote><p>字段顺序调整</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624122429007.png" alt="image-20220624122429007"></p><h3 id="5-2-用户管理"><a href="#5-2-用户管理" class="headerlink" title="5.2 用户管理"></a>5.2 用户管理</h3><h4 id="5-2-1-创建用户"><a href="#5-2-1-创建用户" class="headerlink" title="5.2.1 创建用户"></a>5.2.1 创建用户</h4><blockquote><p>注意：创建用户这一功能基于 ES 集群开启了用户认证。</p></blockquote><p><strong>1、基本介绍</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624162943655.png" alt="image-20220624162943655"></p><p><strong>2、创建用户</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624163028763.png" alt="image-20220624163028763"></p><p><strong>3、填写用户相关信息</strong></p><blockquote><p>这里的注意点是，对用户角色的设置。</p><p>用户名：用于 Kibana 登录</p><p>全名：自定义（一般定义为员工真实名）</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624163439178.png" alt="image-20220624163439178"></p><p><strong>4、看看用户管理页面：已成功创建</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624163526240.png" alt="image-20220624163526240"></p><h4 id="5-2-2-删除用户"><a href="#5-2-2-删除用户" class="headerlink" title="5.2.2 删除用户"></a>5.2.2 删除用户</h4><blockquote><p>点击用户管理页面（上图）对应的用户名，就会进入以下页面，点击删除用户即可。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624164206168.png" alt="image-20220624164206168"></p><h4 id="5-2-3-更改用户密码"><a href="#5-2-3-更改用户密码" class="headerlink" title="5.2.3 更改用户密码"></a>5.2.3 更改用户密码</h4><p><strong>1、点击用户页面对应的用户名</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624163946479.png" alt="image-20220624163946479"></p><p><strong>2、进入用户密码修改页面</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624164115642.png" alt="image-20220624164115642"></p><h4 id="5-2-4-用户角色（权限）"><a href="#5-2-4-用户角色（权限）" class="headerlink" title="5.2.4 用户角色（权限）"></a>5.2.4 用户角色（权限）</h4><p>点击角色，进行相关角色管理：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624170715932.png" alt="image-20220624170715932"></p><p>ES 提供了<code>保留角色</code>和<code>自定义</code>角色种，可根据我们的需求对不同用户进行不同权限的绑定。更多角色参数说明，请看<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/security-privileges.html#privileges-list-indices">官方说明文档</a></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624170415424.png" alt="image-20220624170415424"></p><p>查看创建结果：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220624171013615.png" alt="image-20220624171013615"></p><h4 id="5-2-5-角色对应绑定工作区"><a href="#5-2-5-角色对应绑定工作区" class="headerlink" title="5.2.5 角色对应绑定工作区"></a>5.2.5 角色对应绑定工作区</h4><p><strong>1、例如我创建了 dev 角色</strong></p><blockquote><ul><li><p>创建 dev 角色</p></li><li><p>该角色中绑定了 dev 用户（Java开发）</p></li></ul></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626164107387.png" alt="image-20220626164107387"></p><p><strong>2、现对该角色绑定工作区</strong></p><blockquote><p>目的：使该角色仅对该工作区有相关权限，实现用户权限划分。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626163917429.png" alt="image-20220626163917429"></p><h4 id="5-2-6-开发人员权限"><a href="#5-2-6-开发人员权限" class="headerlink" title="5.2.6 开发人员权限"></a>5.2.6 开发人员权限</h4><p>1、基础权限</p><ul><li><p>创建索引</p></li><li><p>查看索引</p></li><li><p>删除索引</p><blockquote><p>该权限指的是删除 Kibana 创建的搜索索引，并不是真正删除 ES 本身的数据索引。</p></blockquote></li><li><p>查看 ES 健康状态</p><blockquote><p>暂时不开放，因为以下权限可能存在开发人员误操作将其他项目组管理空间删除的风险。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220817113507505.png" alt="image-20220817113507505"></p></li><li><p>查看索引生命周期</p><blockquote><p>暂时不开放，因为同样可能存在开发人员误操作将其他项目组管理空间删除的风险。</p></blockquote></li><li><p>仪表板、可视化、地图等其他基本权限</p></li></ul><p>2、常规权限</p><p>&#x3D;&#x3D;一般设置以下权限即可，不同项目组仅能查看自己对应的日志信息，其他项目组管理空间无权查看。&#x3D;&#x3D;</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220817120105446.png" alt="image-20220817120105446"></p><h3 id="5-3-ES-集群-x2F-实例状态"><a href="#5-3-ES-集群-x2F-实例状态" class="headerlink" title="5.3 ES 集群&#x2F;实例状态"></a>5.3 ES 集群&#x2F;实例状态</h3><p>在 Kibana 控制面板上，可查看 ES 集群及 Kibana 实例健康状态，如何查看？</p><p>点击 Kibana 菜单栏左下角的【monitoring】监控按钮即可查看：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626093604962.png" alt="image-20220626093604962"></p><h4 id="5-3-1-ES-集群"><a href="#5-3-1-ES-集群" class="headerlink" title="5.3.1 ES 集群"></a>5.3.1 ES 集群</h4><p><strong>1、主要指标</strong></p><ul><li>ES 集群版本；</li><li>ES 集群运行的时间；</li><li>ES 集群磁盘可用空间百分百比；</li><li>ES 集群的 JVM 堆大小；</li><li>ES 集群的索引数据详情；</li><li>ES 集群内存使用情况；</li><li>ES 状态为 Green 表示集群健康。</li></ul><p><strong>2、整体概览</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626094120204.png" alt="image-20220626094120204"></p><h4 id="5-3-2-Kibana-实例"><a href="#5-3-2-Kibana-实例" class="headerlink" title="5.3.2 Kibana 实例"></a>5.3.2 Kibana 实例</h4><p><strong>1、主要指标</strong></p><ul><li>Kibana 请求数</li><li>Kibana 连接数</li><li>Kibana 内存使用</li><li>Kibana 响应时间</li><li>Kibana 状态为 Green 表示实例健康</li></ul><p><strong>2、整体概览</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626094411882.png" alt="image-20220626094411882"></p><h3 id="5-4-常用可视化分析"><a href="#5-4-常用可视化分析" class="headerlink" title="5.4 常用可视化分析"></a>5.4 常用可视化分析</h3><blockquote><p>本次采用 Kibana 自带的一个样本数据（航班飞行日志）来做演示。</p></blockquote><h4 id="5-4-1-饼图"><a href="#5-4-1-饼图" class="headerlink" title="5.4.1 饼图"></a>5.4.1 饼图</h4><p>本次实现功能：展示航班数及航班占比情况。</p><p><strong>1、创建可视化界面</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626095737553.png" alt="image-20220626095737553"></p><p><strong>2、选择所需的可视化类型</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626095923091.png" alt="image-20220626095923091"></p><p><strong>3、选择基于什么样的索引来创建可视化界面</strong></p><blockquote><p>以航班飞行日志来展示</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626100429730.png" alt="image-20220626100429730"></p><p><strong>4、指标&#x2F;存储桶选择</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626101028748.png" alt="image-20220626101028748"></p><p>上图的字段会根据你你的索引日志内容自动检出：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626101811427.png" alt="image-20220626101811427"></p><p><code>Carrier 表示航班公司</code></p><p>可根据需求调整饼图颜色，在可视化图形的右上角配置：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626102653914.png" alt="image-20220626102653914"></p><p><strong>5、生成指标数据</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626101329900.png" alt="image-20220626101329900"></p><p>如果要继续对饼图进行界面属性优化，可点击【选项】进行设置：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626103148167.png" alt="image-20220626103148167"></p><p>最后点击【保存】即可</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626103248520.png" alt="image-20220626103248520"></p><p>【确认保存】–如果你是做同类型的可视化，标题尽量保持一定的格式，方便后期导入仪表板，比如：</p><ul><li>航班-航班数</li><li>航班-航班票价</li><li>航班-…</li></ul><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626103342733.png" alt="image-20220626103342733"></p><p><strong>结论：</strong></p><ol><li><p>该饼图表示不同航班公司承运的航班数及占比情况；</p></li><li><p>如果在游戏应用领域的话，可以展示不同国家对某款游戏使用的占比情况。</p></li></ol><h4 id="5-4-2-面积图"><a href="#5-4-2-面积图" class="headerlink" title="5.4.2 面积图"></a>5.4.2 面积图</h4><p>本次实现功能：</p><ol><li>根据<code>时间</code>在同一面积图中<code>展示航班数</code>及<code>航班平均票价</code>。</li><li>航班数使用面积图（area）展示，平均票价使用点状图展示。</li></ol><p><strong>1、新建面积图并做相关指标配置</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626110006111.png" alt="image-20220626110006111"></p><p><strong>2、生成指标数据</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626110125684.png" alt="image-20220626110125684"></p><p>此时的有两条 Y 轴（计数和平均值）合二为一，并不是很美观，可进点击【Metrics &amp; Axes】进一步优化：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626111313592.png" alt="image-20220626111313592"></p><p><strong>3、最后点击【保存】即可</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626111644033.png" alt="image-20220626111644033"></p><p><strong>结论：</strong></p><ul><li>面积图可进行相关数据统计、展示；</li><li>其图标类型有 area、line、bar的形式，对于多 Y 轴的情况下可选择性使用；</li><li>以点状形式显示的需提前创建【点大小指标】，方便点 大小调节。</li></ul><h4 id="5-4-3-垂直条形图"><a href="#5-4-3-垂直条形图" class="headerlink" title="5.4.3 垂直条形图"></a>5.4.3 垂直条形图</h4><p>本次实现功能：根据<code>时间</code>在同垂直条形图<code>展示航延误情况</code>及<code>延误类型</code>。</p><p><strong>1、新建垂直条形图并做相关指标配置</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626113846368.png" alt="image-20220626113846368"></p><p><strong>2、生成指标数据</strong></p><p>X 轴主要实现了在某个时间点飞机延误的类型，Y 轴负责统计延误类型出现的次数。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626114227826.png" alt="image-20220626114227826"></p><p><strong>3、最后点击【保存】即可</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626115032846.png" alt="image-20220626115032846"></p><p><strong>结论：</strong></p><ul><li>垂直条形图可统计同一时间不同类型指标的数据情况；</li><li>其展现形式很直观。</li></ul><h4 id="5-4-4-标签云图"><a href="#5-4-4-标签云图" class="headerlink" title="5.4.4 标签云图"></a>5.4.4 标签云图</h4><p>本次实现功能：显示目标机场的天气状况</p><p><strong>1、新建标签云图并做相关指标配置</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626115639325.png" alt="image-20220626115639325"></p><p><strong>2、可点击【选项】对标签做相关排序</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626120122191.png" alt="image-20220626120122191"></p><p><strong>3、最后点击【保存】即可</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626120215335.png" alt="image-20220626120215335"></p><p><strong>结论：</strong></p><ul><li>这个也是比较实用的一个图形展示，比如应用在我们的热搜关键词这方面；</li><li>如果某些关键词出现的次数越多，在可视化界面的字就会越大。</li></ul><h4 id="5-4-5-数据表"><a href="#5-4-5-数据表" class="headerlink" title="5.4.5 数据表"></a>5.4.5 数据表</h4><p>本次实现功能：航班数、航班延误、航班取消统计。</p><p><strong>1、新建数据表并做相关指标配置</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626144530356.png" alt="image-20220626144530356"></p><p>接着，在一个图表中创建多个指标，比如，出了上述的航班数之外，我再新增<code>航班延误指标</code>和<code>航班取消指标</code>两项。</p><p><strong>2、继续添加分组（表字段）</strong></p><blockquote><p>可对字段进行数据过滤操作。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626145947536.png" alt="image-20220626145947536"></p><p>但是运行结果是所有数据的聚合，我们可以继续优化：</p><blockquote><p>这样的话就可以分段统计了。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626150315406.png" alt="image-20220626150315406"></p><p><strong>3、最后点击【保存】即可</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626150534232.png" alt="image-20220626150534232"></p><p><strong>结论：</strong></p><ul><li>通过图表二维关系进行展现，更加清晰；</li><li>同时图表具备多字段自定义及日志数据过滤（筛选）。</li></ul><h4 id="5-4-6-区域地图"><a href="#5-4-6-区域地图" class="headerlink" title="5.4.6 区域地图"></a>5.4.6 区域地图</h4><p>本次实现功能：通过地图来展示不同国家的不同票价。</p><p><strong>1、新建区域地图并做相关指标配置</strong></p><blockquote><p>票价越高，地图颜色就越红（当然也可以自定义颜色）</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626151053068.png" alt="image-20220626151053068"></p><p><strong>2、最后点击【保存】即可</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626151629958.png" alt="image-20220626151629958"></p><p><strong>结论：</strong></p><ul><li>对于市场遍布全球的公司，区域地图是一个很不错的选择；</li><li>该模式下，可对日志数据进行相关统计（关联国际地区），统计结果将以地图形式展现。</li></ul><h4 id="5-4-7-TSVB-图"><a href="#5-4-7-TSVB-图" class="headerlink" title="5.4.7 TSVB 图"></a>5.4.7 TSVB 图</h4><p>对于较为复杂的 ES 聚合操作，需要使用到我们的 <code>TSVB</code>，即下方综合图表：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626153037832.png" alt="image-20220626153037832"></p><p>本次实现功能：统计航班延误率</p><p><strong>1、新建 Visual Builder 并做相关指标配置</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626160249808.png" alt="image-20220626160249808"></p><p><strong>2、接着点击面板选项生成数据</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626160425229.png" alt="image-20220626160425229"></p><h4 id="5-4-8-问题？"><a href="#5-4-8-问题？" class="headerlink" title="5.4.8 问题？"></a>5.4.8 问题？</h4><p>对于 kibana 上点点的操作，就可以得到对应的数据信息。创建一个可视化图表之后，其后端是如何实现数据采集的呢？</p><p><strong>1、点击可视化上方的【检查】按钮</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626152527228.png" alt="image-20220626152527228"></p><p><strong>2、查看【亲求】部分</strong></p><blockquote><p>可以看到，这其实是 <code>ES 后端的聚合查询语句</code>，也就是我们点点点操作的时候，就已经帮我们自动实现了。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626152231495.png" alt="image-20220626152231495"></p><h3 id="5-5-仪表板管理"><a href="#5-5-仪表板管理" class="headerlink" title="5.5 仪表板管理"></a>5.5 仪表板管理</h3><h4 id="5-5-1-新建仪表板"><a href="#5-5-1-新建仪表板" class="headerlink" title="5.5.1 新建仪表板"></a>5.5.1 新建仪表板</h4><p><strong>1、点击右侧仪表板，并创建新的仪表板</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626122031574.png" alt="image-20220626122031574"></p><p><strong>2、点击上方菜单栏【添加】按钮</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626122323899.png" alt="image-20220626122323899"></p><p><strong>3、依次点击，就会被添加到仪表板中</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626122437730.png" alt="image-20220626122437730"></p><p><strong>4、最后点击【保存】即可</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626122606449.png" alt="image-20220626122606449"></p><p>仪表板上查看：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626122816077.png" alt="image-20220626122816077"></p><p><strong>5、仪表板管理</strong></p><blockquote><ul><li>检查</li><li>编辑</li><li>定制</li><li>全屏</li><li>删除</li></ul></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626123122624.png" alt="image-20220626123122624"></p><h4 id="5-5-2-共享仪表板"><a href="#5-5-2-共享仪表板" class="headerlink" title="5.5.2 共享仪表板"></a>5.5.2 共享仪表板</h4><p>如果我们需要将仪表板的内容共享给同事看，这是就需要 Kibana 的<code>仪表板</code>共享功能。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626124409535.png" alt="image-20220626124409535"></p><p>点击【复制链接】</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626143600702.png" alt="image-20220626143600702"></p><h3 id="5-6-管理空间"><a href="#5-6-管理空间" class="headerlink" title="5.6 管理空间"></a>5.6 管理空间</h3><h4 id="5-6-1-用途"><a href="#5-6-1-用途" class="headerlink" title="5.6.1 用途"></a>5.6.1 用途</h4><p>管理空间可进行权限管理，比如某些组配置的可视化界面仅限该组查看，此时就可以应用到<code>管理空间</code>了，每个管理空间可管理自己独立的一套可视化界面，<code>类似于 K8s 的 namespace</code>。</p><h4 id="5-6-2-新建管理空间"><a href="#5-6-2-新建管理空间" class="headerlink" title="5.6.2 新建管理空间"></a>5.6.2 新建管理空间</h4><p><strong>1、如下图，点击【管理空间】</strong></p><blockquote><p>或点击菜单栏左侧【管理】—&gt;【Kibana】—&gt;【工作区】新建</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626162253440.png" alt="image-20220626162253440"></p><p><strong>2、点击创建空间</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220626162956733.png" alt="image-20220626162956733"></p><p><strong>3、创建好后，就可以登录到不同的管理空间</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220627102247042.png" alt="image-20220627102247042"></p><h3 id="5-7-日志查询"><a href="#5-7-日志查询" class="headerlink" title="5.7 日志查询"></a>5.7 日志查询</h3><h4 id="5-7-1-根据索引查询"><a href="#5-7-1-根据索引查询" class="headerlink" title="5.7.1 根据索引查询"></a>5.7.1 根据索引查询</h4><p><strong>1、Discover 下选择定义的索引</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220627170107635.png" alt="image-20220627170107635"></p><p><strong>2、选择对应的索引就可以查看具体日志</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220627170359681.png" alt="image-20220627170359681"></p><h4 id="5-7-2-根据时间查询"><a href="#5-7-2-根据时间查询" class="headerlink" title="5.7.2 根据时间查询"></a>5.7.2 根据时间查询</h4><p>如果你根据索引字段来匹配某个时间节点的话，则该时间点需要在下图时间范围内才能过滤出来。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220627180831755.png" alt="image-20220627180831755"></p><h4 id="5-7-3-根据索引字段查询"><a href="#5-7-3-根据索引字段查询" class="headerlink" title="5.7.3 根据索引字段查询"></a>5.7.3 根据索引字段查询</h4><p><strong>1、查看指定索引有哪些可用字段</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220627165956033.png" alt="image-20220627165956033"></p><p><strong>2、根据字段筛选日志内容</strong></p><ul><li><p>单条件筛选</p><blockquote><p>根据某个文件名来匹配</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220627170725521.png" alt="image-20220627170725521"></p><blockquote><p>匹配结果如下</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220627170656835.png"></p><blockquote><p>被匹配的字段会以高亮形式显示</p></blockquote></li><li><p>多条件筛选</p><blockquote><p>精准匹配</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220627171139004.png" alt="image-20220627171139004"></p></li></ul><p><strong>说明</strong>：根据字段来筛选数据是比较灵活的手段，可以快速定位到日志的具体位置。</p><h3 id="5-8-索引生命周期管理"><a href="#5-8-索引生命周期管理" class="headerlink" title="5.8 索引生命周期管理"></a>5.8 索引生命周期管理</h3><h4 id="5-8-1-创建生命周期策略"><a href="#5-8-1-创建生命周期策略" class="headerlink" title="5.8.1 创建生命周期策略"></a>5.8.1 创建生命周期策略</h4><p>1、进入索引生命周期策略并创建策略</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220816135703698.png" alt="image-20220816135703698"></p><p>2、点击上图【创建策略】进入以下具体配置</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220816140755604.png" alt="image-20220816140755604"></p><p>3、最后查看创建的生命周期策略列表</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220817104821612.png" alt="image-20220817104821612"></p><h4 id="5-8-2-索引添加生命周期策略"><a href="#5-8-2-索引添加生命周期策略" class="headerlink" title="5.8.2 索引添加生命周期策略"></a>5.8.2 索引添加生命周期策略</h4><p>1、进入索引管理并添加对应索引生命周期</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220817105256831.png" alt="image-20220817105256831"></p><p>2、然后添加策略即可</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220817105504026.png" alt="image-20220817105504026"></p><p>3、可以同个生命周期策略查看其关联的索引</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220817105724955.png" alt="image-20220817105724955"></p><h4 id="5-8-3-索引删除生命周期策略"><a href="#5-8-3-索引删除生命周期策略" class="headerlink" title="5.8.3 索引删除生命周期策略"></a>5.8.3 索引删除生命周期策略</h4><p>1、进入索引生命周期策略执行删除即可</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220817110518507.png" alt="image-20220817110518507"></p><p>2、如果你生命周期策略关联的索引正在被使用，是无法删除的，如下图</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220817110009045.png" alt="image-20220817110009045"></p><blockquote><p>这种情况下，可以去索引管理解除对应的索引生命周期策略</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220817110905668.png" alt="image-20220817110905668"></p>]]></content>
    
    
    <summary type="html">基于 Kafka 构建 EL(F)K 高并发分布式日志系统</summary>
    
    
    
    <category term="日志系统" scheme="https://blog.rabcnops.cn/categories/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="ELK" scheme="https://blog.rabcnops.cn/categories/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/ELK/"/>
    
    
    <category term="ELK" scheme="https://blog.rabcnops.cn/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>没事千万别动生产服数据库 - 来自小菜鸟的忠告</title>
    <link href="https://blog.rabcnops.cn/posts/articles/90a42e.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/90a42e.html</id>
    <published>2023-06-06T10:20:14.000Z</published>
    <updated>2023-06-06T10:24:05.051Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/common-issues-mysql-thumb.png" alt="common-issues-mysql-thumb"></p><p><a href="https://help.aliyun.com/document_detail/41817.html?spm=5176.19908310.help.dexternal.39bf1450lprd8o#d8a0edc0ce8cv">阿里云官方参考文档</a></p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天把一张  5500 多万条记录的表进行按年度拆分，本来打算将表数据拆分为 2020 年、2021 年、2022 年三张新表，提升原表查询效率，仅保留 2023 年数据。表拆分完毕后，就陆续删除原表中 2020 年、2021 年、2022 年的数据。结果在执行 SQL 过程中误操作执行了删除 2023 年全年的 SQL 语句，具体如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from kys_convert_order where add_time between &#x27;2022-11-01 00:00:01&#x27; and &#x27;2023-12-01 00:00:00&#x27;;</span><br></pre></td></tr></table></figure><p>原本是需要执行这条 SQL 语句的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from kys_convert_order where add_time between &#x27;2022-11-01 00:00:01&#x27; and &#x27;2022-12-01 00:00:00&#x27;;</span><br></pre></td></tr></table></figure><p>发现不对劲后，赶紧 kill 掉 SQL 进程。但庆幸数据没有被删除，我初步猜测是因为 <code>&#39;2022-11-01 00:00:01&#39; and &#39;2023-12-01 00:00:00&#39;</code> 这段时间的数据量很大，SQL 进程可能在做扫表的一个操作。</p><p>为了验证数据是否被删除，于是将备份数据 <code>dump</code> 下来（我们使用的是阿里云的 <code>RDS MySQL</code>），备份方式为物理备份，最新备份数据为每天早上 <code>8:00</code>（即备份 策略为一天一次全量备份，共保留 7 天数据）。因此新开了一台按量付费的 Linux 实例，安装好 MySQL 环境，并进行数据恢复，验证与生产环境数据的一致性。以下是恢复详细步骤。</p><h2 id="一、环境部署"><a href="#一、环境部署" class="headerlink" title="一、环境部署"></a>一、环境部署</h2><p><strong>1、MySQL</strong></p><blockquote><p>与 RDS MySQL 版本保持一致（大版本）</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rds MySQL 版本：5.7</span></span><br><span class="line"><span class="comment"># 本次安装 MySQL 版本：5.7.34</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 MySQL 5.7 和 MySQL 官方的 Yum 源管理器</span></span><br><span class="line">yum -y install https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 MySQL 5.7</span></span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 MySQL</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取初始密码</span></span><br><span class="line">grep password /var/log/mysqld.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改初始密码</span></span><br><span class="line">mysqladmin -u root -p<span class="string">&#x27;旧密码&#x27;</span> password <span class="string">&#x27;新密码&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL登录验证</span></span><br><span class="line">mysql -u root -p<span class="string">&#x27;新密码&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>2、qpress</strong></p><blockquote><p>解压工具</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载可执行文件的tar包</span></span><br><span class="line">wget <span class="string">&quot;https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/file-manage-files/zh-CN/20230406/flxd/qpress-11-linux-x64.tar&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压下载的tar包，取出可执行文件</span></span><br><span class="line">tar -xvf qpress-11-linux-x64.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置qpress文件的执行权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> 775 qpress</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝qpress到/usr/bin中</span></span><br><span class="line">sudo <span class="built_in">cp</span> qpress /usr/bin</span><br></pre></td></tr></table></figure><p><strong>3、Percona XtraBackup</strong></p><blockquote><p>备份&#x2F;恢复工具</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget如果下载很慢，你可以先下载到你Windows本地再上传</span></span><br><span class="line">wget https://downloads.percona.com/downloads/Percona-XtraBackup-2.4/Percona-XtraBackup-2.4.28/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.28-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始安装XtraBackup</span></span><br><span class="line">sudo yum localinstall -y percona-xtrabackup-24-2.4.28-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="二、目录规划"><a href="#二、目录规划" class="headerlink" title="二、目录规划"></a>二、目录规划</h2><p><strong>1、解压目录</strong></p><blockquote><p>用于存放解压后的备份文件（压缩文件从 RDS MySQL 下载并上传到服务器）</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/mysql_bkdata</span><br><span class="line"><span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/mysql_bkdata</span><br></pre></td></tr></table></figure><p><strong>2、数据目录</strong></p><blockquote><p>用于将备份文件恢复到此目录，启动自建数据库时，自建数据库的数据目录使用此目录的数据。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/mysql_newdata</span><br><span class="line"><span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/mysql_newdata</span><br></pre></td></tr></table></figure><h2 id="三、操作步骤"><a href="#三、操作步骤" class="headerlink" title="三、操作步骤"></a>三、操作步骤</h2><p><strong>1、下载备份文件</strong></p><p>通过阿里云 RDS 控制台下载即可，过程略。可通过 wget 下载，下载的文件后缀有一定要求，否则无法解压，具体看官方说明：<br><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230606175552896.png" alt="image-20230606175552896"></p><p><strong>2、解压备份文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qpress -<span class="keyword">do</span>  test_xb.qp | xbstream -x -v -C /var/mysql_bkdata/</span><br></pre></td></tr></table></figure><p>实测了一下，我在自建 MySQL 主机上 wget 了备份文件，且后缀名为 <code>ddz_xb.qp</code>，符合后缀名命名要求，但是通过上面这条命令是执行失败的，但你可以将 <code>ddz_xb.qp</code> 重命名为 <code>ddz_qp.xb</code>，然后使用上图 <code>xbstream</code> 的方式来解压是完全没问题的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> ddz_xb.qp ddz_qp.xb</span><br></pre></td></tr></table></figure><p>开始解压文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 步骤一：解包</span></span><br><span class="line"><span class="built_in">cat</span> ddz_qp.xb | xbstream -x -v -C /var/mysql_bkdata/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤二：解压（时间较长，需耐心等待）</span></span><br><span class="line"><span class="comment"># 适用于MySQL 5.5/5.6/5.7</span></span><br><span class="line">innobackupex --decompress --remove-original /var/mysql_bkdata/</span><br></pre></td></tr></table></figure><p><strong>3、恢复数据</strong></p><p><mark>恢复数据库前，请先停止自建数据库服务。</mark></p><ul><li><p>停止自建 MySQL 服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mysqld.service</span><br></pre></td></tr></table></figure></li><li><p>恢复前准备</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --defaults-file=/var/mysql_bkdata/backup-my.cnf --apply-log /var/mysql_bkdata/</span><br></pre></td></tr></table></figure><blockquote><p>参数解释</p></blockquote><table><thead><tr><th><strong>参数</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>–defaults-file</td><td>通过传入配置文件设置MySQL默认选项。RDS MySQL备份文件中，提供名为<code>backup-my.cnf</code>的配置文件，该文件位于<strong>备份解压目录</strong>，即<code>/var/mysql_bkdata/</code>。</td></tr><tr><td>–apply-log</td><td>XtraBackup工具的准备命令。该命令后配置存放备份文件的目录，即<strong>备份解压目录</strong><code>/var/mysql_bkdata/</code>。</td></tr></tbody></table></li><li><p>恢复数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --defaults-file=/etc/my.cnf --copy-back /var/mysql_bkdata/</span><br></pre></td></tr></table></figure><blockquote><p>参数解释</p></blockquote><table><thead><tr><th><strong>参数</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>–defaults-file</td><td>自建数据库的<code>my.cnf</code>文件，根据此配置文件中设置的<strong>数据目录</strong>（datadir），获取恢复数据的目标路径。</td></tr><tr><td>–copy-back</td><td>XtraBackup工具的恢复命令。该命令后配置存放备份文件的目录，即<strong>备份解压目录</strong><code>/var/mysql_bkdata/</code>，XtraBackup工具将此目录数据恢复到自建数据库的<strong>数据目录</strong>中。</td></tr></tbody></table></li><li><p>修改自建数据库配置文件<code>my.cnf</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment"># 指定新的数据目录</span></span><br><span class="line">datadir = /var/mysql_newdata</span><br><span class="line"><span class="comment"># 参数innodb_undo_tablespaces的取值需要与/var/mysql_bkdata/backup-my.cnf中的取值相同</span></span><br><span class="line"><span class="comment"># 可以使用cat /var/mysql_bkdata/backup-my.cnf | grep innodb_undo_tablespaces查询。</span></span><br><span class="line">innodb_undo_tablespaces=2</span><br><span class="line">innodb_undo_directory=/var/mysql_newdata</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在RDS MySQL管理控制台中查看实例参数lower_case_table_names的取值，如果取值为1，则需要修改自建数据库配置文件my.cnf。</span></span><br><span class="line">lower_case_table_names=1</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><p><strong>4、启动自建 MySQL</strong></p><ul><li><p>为新的数据目录授权</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R mysql:mysql /var/mysql_newdata</span><br></pre></td></tr></table></figure></li><li><p>启动 MySQL 进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mysqld.service</span><br><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure></li></ul><p><strong>5、连接数据库并验证</strong></p><ul><li><p>登录自建数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p&lt;对应密码&gt;</span><br></pre></td></tr></table></figure></li><li><p>验证数据库是否完整</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></li></ul><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>在删除数据库表数据时，需要注意这几点：</p><p>（1）使用 DELETE 命令和 WHERE 子句来选择指定时间段内的数据。例如，假设需要删除时间范围为 start_time 和 end_time 之间的数据，则可以使用如下命令：</p><pre><code>DELETE FROM kys_convert_order WHERE add_time BETWEEN &#39;2022-01-01 00:00:00&#39; AND &#39;2022-03-01 00:00:00&#39;;</code></pre><p>其中，table_name 是要删除数据的表名，time_column 是表中用于表示时间的列名，BETWEEN start_time AND end_time 是时间范围条件。</p><p>（2）使用 ORDER BY 子句按照时间升序（ASC）排序。例如，假设 time_column 是日期类型，则可以使用如下命令：</p><pre><code>DELETE FROM kys_convert_order WHERE add_time BETWEEN &#39;2022-01-01 00:00:00&#39; AND &#39;2022-03-01 00:00:00&#39; ORDER BY add_time ASC;</code></pre><p>这样就会按照时间顺序执行删除操作，从而确保数据是按照时间顺序删除的。</p><p>需要注意的是，如果表中数据比较多，一次性删除可能会导致性能问题，可以考虑使用 LIMIT 限制每次删除的行数。例如，可以使用如下命令：</p><pre><code>DELETE FROM kys_convert_order WHERE add_time BETWEEN &#39;2022-01-01 00:00:00&#39; AND &#39;2022-03-01 00:00:00&#39; ORDER BY add_time ASC LIMIT 50000;</code></pre><p>这里的 LIMIT 1000 表示每次最多删除 1000 行数据。需要多次执行命令，直到删除完所有指定时间段内的数据为止。</p><p><mark>最后开发人员进行数据可用性校验！</mark></p><p>-–END</p>]]></content>
    
    
    <summary type="html">RDS MySQL 数据物理备份与恢复！</summary>
    
    
    
    <category term="数据库" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="关系型数据库" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.rabcnops.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Docker attach VS exec</title>
    <link href="https://blog.rabcnops.cn/posts/articles/1968d59e.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/1968d59e.html</id>
    <published>2023-06-05T03:33:14.000Z</published>
    <updated>2023-06-05T03:48:29.487Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/docker-attach.webp" alt="docker-attach"></p><hr><p>我们知道，进入容器常用的两种方式为：<code>docker exec ...</code>、<code>docker attach ...</code>，那这两者有什么区别呢？</p><p>首先，运行一个测试容器，并在启动容器时运行相关指令，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name <span class="built_in">test</span> -d ubuntu /bin/bash -c <span class="string">&quot;while true; do sleep 1; echo hello world; done&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230605112140003.png" alt="image-20230605112140003"></p><p><strong>1、attach 进入容器</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/20230605112331.png"></p><p>如何退出容器而不停止容器运行？方法：<code>Ctrl + p  + q</code>，如果使用 <code>exit</code> 那退出容器后，容器也会随之停止运行。</p><p><strong>2、exec 进入容器</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230605113008592.png" alt="image-20230605113008592"></p><p>那这又如何退出容器呢？exec 方式的话，直接 exit 退出容器即可（且容器不会停止运行）。</p><p>从这两者方式进入容器，不难发现，这两者的主要区别如下：</p><ul><li>attach 直接进入容器启动命令的终端，不会启动新进程，并以 <code>Ctrl + p  + q</code> 不终止容器退出；</li><li>exec 则是在容器中打开新的终端，且可启动新的进程，以 <code>exit</code> 不终止容器退出；</li><li>因此，如果想直接在终端中查看启动命令的输出，可使用 <code>attach</code>，否则使用 <code>exec</code>。</li></ul><p>但实际生产中，看启动输出，一般我们是通过 <code>docker logs -f ...</code> 命令，如下图所示：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230605113739418.png" alt="image-20230605113739418"></p><p>其中 <code>-f</code> 选项是以动态的形式查看输出结果，效果类似 <code>tailf</code> 或 <code>tail -f</code>。</p><p>-–END</p>]]></content>
    
    
    <summary type="html">Docker attach 与 exec 的区别。</summary>
    
    
    
    <category term="云原生" scheme="https://blog.rabcnops.cn/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="Docker" scheme="https://blog.rabcnops.cn/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker/"/>
    
    
    <category term="Docker" scheme="https://blog.rabcnops.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>基于 VuePress 的 RECO 主题博客系统搭建</title>
    <link href="https://blog.rabcnops.cn/posts/articles/a90bd9b5.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/a90bd9b5.html</id>
    <published>2023-05-28T05:33:14.000Z</published>
    <updated>2023-05-28T06:08:35.207Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230528135648671.png" alt="image-20230528135648671"></p><hr><h2 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h2><ul><li><strong>Windows</strong>：10</li><li><strong>NodeJs</strong>：v18.15.0</li><li><strong>Npm</strong>：v9.5.0（含于NodeJs）</li><li><strong>Yarn</strong>：1.22.19（通过 npm 安装）</li></ul><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p><strong>1、npm 安装 yarn</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置源</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org -g</span><br><span class="line">yarn config <span class="built_in">set</span> sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g</span><br></pre></td></tr></table></figure><p><strong>2、初始化项目</strong></p><blockquote><p><a href="https://v1.vuepress.vuejs.org/zh/guide/getting-started.html">https://v1.vuepress.vuejs.org/zh/guide/getting-started.html</a></p><p>按照步骤一步步执行，并最终启动即可，过程中若遇到错误，请看 FAQ 部分。</p></blockquote><p><strong>3、本地访问验证</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230427111334709.png" alt="image-20230427111334709"></p><p><mark>如何添加状态栏？</mark></p><p><strong>4、docs 目录下创建 .vuepress 目录</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> .vuepress </span><br></pre></td></tr></table></figure><p><strong>5、.vuepress  目录下创建 config.js 文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> config.js</span><br></pre></td></tr></table></figure><p><strong>6、config.js 文件中添加如下内容</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    title: <span class="string">&#x27;Rabcnops&#x27;</span>,</span><br><span class="line">    description: <span class="string">&#x27;云计算、云原生、云开发学习文档！&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230427170306751.png" alt="image-20230427170306751"></p><h2 id="三、RECO-主题"><a href="#三、RECO-主题" class="headerlink" title="三、RECO 主题"></a>三、RECO 主题</h2><blockquote><p>主题地址：<a href="https://vuepress-theme-reco.recoluan.com/">vuepress-reco (recoluan.com)</a></p></blockquote><h3 id="3-1-初始化"><a href="#3-1-初始化" class="headerlink" title="3.1 初始化"></a>3.1 初始化</h3><p>1、初始化环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化，并选择 2.x</span></span><br><span class="line">npm install @vuepress-reco/theme-cli@1.0.7 -g</span><br><span class="line">theme-cli init my-blog   <span class="comment"># 初始化一个my-blog工程（自定义）</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230427173913739.png" alt="image-20230427173913739"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230427183712771.png" alt="image-20230427183712771"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230427183517241.png" alt="image-20230427183517241"></p><h3 id="3-2-说明"><a href="#3-2-说明" class="headerlink" title="3.2 说明"></a>3.2 说明</h3><p>这个主题暂时先不研究了，后面打算通过 Python 自行开发一套。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="启动服务报错"><a href="#启动服务报错" class="headerlink" title="启动服务报错"></a>启动服务报错</h3><p><strong>1、报错现象</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn docs:dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行报错</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221209113113605.png" alt="image-20221209113113605"></p><p><strong>2、报错原因</strong></p><p>出现这个错误是因为 node.js V17 版本中最近发布的OpenSSL3.0, 而OpenSSL3.0对允许算法和密钥大小增加了严格的限制，可能会对生态系统造成一些影响.</p><p><strong>3、解决方案</strong></p><p>有两种解决方案：<code>降级到 Node.js v16</code>或<code>启用旧版 OpenSSL 提供程序</code></p><ul><li><p>降低版本至 node.js V16（永久解决）</p></li><li><p>终端执行启用旧版 OpenSSL 相关命令（临时解决）</p><ul><li><p>在类 Unix 上（Linux、macOS、Git bash 等）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NODE_OPTIONS=--openssl-legacy-provider</span><br></pre></td></tr></table></figure></li><li><p>在 Windows 命令提示符下（CMD）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> NODE_OPTIONS=--openssl-legacy-provider</span><br></pre></td></tr></table></figure></li><li><p>在 Windows PowerShell 上</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env</span>:NODE_OPTIONS = <span class="string">&quot;--openssl-legacy-provider&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>完成之后，再次启动服务即可解决！</p>]]></content>
    
    
    <summary type="html">基于 VuePress 的 RECO 主题博客系统搭建。</summary>
    
    
    
    <category term="Blog" scheme="https://blog.rabcnops.cn/categories/Blog/"/>
    
    <category term="VuePress" scheme="https://blog.rabcnops.cn/categories/Blog/VuePress/"/>
    
    
    <category term="VuePress" scheme="https://blog.rabcnops.cn/tags/VuePress/"/>
    
  </entry>
  
  <entry>
    <title>EduSoho 网校部署</title>
    <link href="https://blog.rabcnops.cn/posts/articles/e7cab59a.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/e7cab59a.html</id>
    <published>2023-05-24T09:05:00.000Z</published>
    <updated>2023-05-24T09:08:37.837Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230524094717828.png" alt="image-20230524094717828"></p><hr><h2 id="一、初始化环境"><a href="#一、初始化环境" class="headerlink" title="一、初始化环境"></a>一、初始化环境</h2><p><strong>1、安装wget</strong></p><p>如果系统已安装wget,请跳过此步骤</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure><p><strong>2、关闭防火墙&#x2F;Selinux</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><p>在命令行输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><p>或者修改配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/selinux/config</span><br></pre></td></tr></table></figure><p>将<code>SELINUX=enforcing</code>改为：<code>SELINUX=disabled</code></p><h2 id="二、安装-Nginx"><a href="#二、安装-Nginx" class="headerlink" title="二、安装 Nginx"></a>二、安装 Nginx</h2><p><strong>1、安装nginx源</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载源</span></span><br><span class="line">wget https://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装源</span></span><br><span class="line">rpm -ivh nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><p><strong>2、安装配置nginx包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装nginx</span></span><br><span class="line">yum install -y nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改nginx默认配置</span></span><br><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#在http&#123;&#125;配置中加入：</span></span><br><span class="line">client_max_body_size 1024M;</span><br></pre></td></tr></table></figure><p><strong>3、启动nginx</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><p><strong>4、设置nginx为开机启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br></pre></td></tr></table></figure><h2 id="三、安装-MySQL"><a href="#三、安装-MySQL" class="headerlink" title="三、安装 MySQL"></a>三、安装 MySQL</h2><p><strong>1、安装mysql官方源</strong></p><p>注意 CentOS 7 默认 mysql 版本过低，这里我们采用 mysql 官方发行的 MySQL57 源,当然，也可以安装MySQL80的源。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.mysql.com/mysql57-community-release-el7.rpm</span><br><span class="line">rpm -ivh mysql57-community-release-el7.rpm</span><br></pre></td></tr></table></figure><p><strong>2、建立 Yum 缓存</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p><strong>3、安装mysql包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mysql mysql-server</span><br></pre></td></tr></table></figure><p><strong>4、启动mysql</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p><strong>5、设置mysql为开机启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mysqld.service</span><br></pre></td></tr></table></figure><p><strong>6、mysql 配置</strong></p><p>默认安装结束，mysql的root密码不为空，系统默认创建临时密码，执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>可以看到密码，如例子</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-02-28T06:52:06.110216Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: **************</span><br></pre></td></tr></table></figure><p>后面<code>*</code>的位置就是临时密码，要手动修改mysql <code>root</code>账户密码，否则mysql会不允许创核表等操作，mysql 修改密码操作请自行搜索解决。</p><p>修改密码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p<span class="string">&#x27;&lt;初始密码&gt;&#x27;</span>  password <span class="string">&#x27;&lt;新密码&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="四、安装-PHP"><a href="#四、安装-PHP" class="headerlink" title="四、安装 PHP"></a>四、安装 PHP</h2><blockquote><p>参考：<a href="https://www.myfreax.com/install-php-7-on-centos-7/">https://www.myfreax.com/install-php-7-on-centos-7/</a></p></blockquote><p><strong>1、安装php源</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release yum-utils</span><br><span class="line">yum install -y http://rpms.remirepo.net/enterprise/remi-release-7.rpm</span><br></pre></td></tr></table></figure><p><strong>2、启用 73 版本</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --<span class="built_in">enable</span> remi-php73</span><br></pre></td></tr></table></figure><p><strong>3、安装php包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上一步源中，可供安装的php版本有很多，本文安装的php73</span></span><br><span class="line">yum install -y \</span><br><span class="line">  php \</span><br><span class="line">  php-cli \</span><br><span class="line">  php-common \</span><br><span class="line">  php-fpm \</span><br><span class="line">  php-gd \</span><br><span class="line">  php-mbstring \</span><br><span class="line">  php-intl \</span><br><span class="line">  php-mcrypt \</span><br><span class="line">  php-mysql \</span><br><span class="line">  php-pdo \</span><br><span class="line">  php-xml</span><br></pre></td></tr></table></figure><p><strong>4、修改PHP配置</strong></p><p>编辑 php.ini , 将以下配置的值修改为1024M</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/php.ini</span><br><span class="line"></span><br><span class="line">post_max_size = 1024M</span><br><span class="line">memory_limit = 1024M</span><br><span class="line">upload_max_filesize = 1024M</span><br></pre></td></tr></table></figure><p><strong>5、启动php-fpm</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start php-fpm.service</span><br></pre></td></tr></table></figure><p><strong>6、设置fpm开机启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> php-fpm.service</span><br></pre></td></tr></table></figure><h2 id="五、上线-EduSoho"><a href="#五、上线-EduSoho" class="headerlink" title="五、上线 EduSoho"></a>五、上线 EduSoho</h2><p><strong>1、创建EduSoho数据库</strong></p><blockquote><p>这里创不创建无所谓，在浏览器访问的时候会自动创建。</p></blockquote><ul><li><p>登录mysql</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment">#按照提示，如果设置了密码，请输入正确的密码，`Enter`键登录mysql；如果未设置密码，请直接`Enter`键登录mysql.</span></span><br></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE edusoho DEFAULT CHARACTER SET utf8;</span><br><span class="line">GRANT ALL PRIVILEGES ON `edusoho`.* TO <span class="string">&#x27;esuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Zhurs@123&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ul><p><strong>2、下载解压EduSoho</strong></p><blockquote><p>资源包下载：<a href="http://www.edusoho.com/open/show">http://www.edusoho.com/open/show</a></p><p>安装文档：<a href="http://www.qiqiuyu.com/my/course/20">http://www.qiqiuyu.com/my/course/20</a></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230524093931660.png" alt="image-20230524093931660"></p><p><strong>3、增加 EduSoho nginx 配置</strong></p><blockquote><p>注意1：教培版和企培版的项目包目录有些许不一样，稍微更改即可。</p><p>注意2：edusoho访问目录是edusoho&#x2F;web,只有在nginx或者Apache配置里面把根目录定位到web目录下，才不会出现奇怪的问题，否则就会出现图片不能显示或者文件无法上传的问题。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/edusoho.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意端口不要冲突</span></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.example.com;</span><br><span class="line">    <span class="attribute">root</span> /var/www/edusoho/web;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/edusoho.access.log;</span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/edusoho.<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">index</span> app.php;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@rewriteapp</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="variable">@rewriteapp</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /app.php/<span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^/udisk</span> &#123;</span><br><span class="line">        internal;</span><br><span class="line">        <span class="attribute">root</span> /var/www/edusoho/app/data/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^/(app|app_dev)\.php(/|$)</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_split_path_info</span><span class="regexp"> ^(.+\.php)(/.*)$</span>;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME    <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  HTTPS              <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> HTTP_X-Sendfile-Type X-Accel-Redirect;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> HTTP_X-Accel-Mapping /udisk=/var/www/edusoho/app/data/udisk;</span><br><span class="line">        <span class="attribute">fastcgi_buffer_size</span> <span class="number">128k</span>;</span><br><span class="line">        <span class="attribute">fastcgi_buffers</span> <span class="number">8</span> <span class="number">128k</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* \.(jpg|jpeg|gif|png|ico|swf)$</span> &#123;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">3y</span>;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">gzip</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* \.(css|js)$</span> &#123;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">3y</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^/files/.*\.(php|php5)$</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_split_path_info</span><span class="regexp"> ^(.+\.php)(/.*)$</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME    <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  HTTPS              <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、重启nginx服务</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure><h2 id="六、验证"><a href="#六、验证" class="headerlink" title="六、验证"></a>六、验证</h2><p>本地浏览器访问：<a href="http://192.168.56.153/">http://192.168.56.153/</a></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>访问 <a href="http://192.168.56.153/">http://192.168.56.153/</a> 后，在预检查阶段显示 web 不可写：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230524004417917.png" alt="image-20230524004417917"></p><p>解决方案：对项目<code>edusoho</code>目录 777 权限即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 -R edusoho</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">chown</span> apache.apache -R edusoho</span><br></pre></td></tr></table></figure><p>完成后，再次点击上图的<code>重新检测按钮</code>即可！</p>]]></content>
    
    
    <summary type="html">EduSoho 网校系统部署，适合 Linux 入门学员练手项目！</summary>
    
    
    
    <category term="Linux 服务器运维实战" scheme="https://blog.rabcnops.cn/categories/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4%E5%AE%9E%E6%88%98/"/>
    
    <category term="项目实战部署篇" scheme="https://blog.rabcnops.cn/categories/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4%E5%AE%9E%E6%88%98/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E9%83%A8%E7%BD%B2%E7%AF%87/"/>
    
    
    <category term="Linux" scheme="https://blog.rabcnops.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Git 推送(提交)时如何忽略某个文件或目录？</title>
    <link href="https://blog.rabcnops.cn/posts/articles/e8e17be2.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/e8e17be2.html</id>
    <published>2023-05-15T06:20:00.000Z</published>
    <updated>2023-05-15T06:45:49.057Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/improved-git-flow-2.png" alt="improved-git-flow-2"></p><p><strong>1、在工作目录下新建 <code>.gitignore</code> 文件</strong></p><blockquote><p>阿里云效 DevOps 实测！</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> .gitignore</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230511182631942.png" alt="image-20230511182631942"></p><p><strong>2、配置忽略规则（支持正则）</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略项目根目录下所有以 .a 结尾的文件</span></span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># lib.a 除外（也就是说，除了lib.a文件外，项目根目录下其他文件或目录均被忽略）</span></span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO（就是说如果其他目录下有同名的目录，那与下面指定的是没关系的）</span></span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略 build/ 目录下的所有文件（如果远程仓库也没有build目录，该目录也不会被推送，因为此时相当于空目录，空目录无法推送）</span></span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略项目根目录下的 doc 目录下的所有以 .txt 结尾的文件，但不包括 doc/server/*.txt</span></span><br><span class="line">doc/*.txt</span><br></pre></td></tr></table></figure><p><code>.gitignore</code> 只能忽略那些原来没有被 <code>track</code> 的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。解决方法就是先把本地缓存删除（改变成未 <code>track</code> 状态），然后再提交。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached .</span><br></pre></td></tr></table></figure><p>代码提交（根据自己分支提交即可）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;update .gitignore&#x27;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.jianshu.com/p/854672c36692">https://www.jianshu.com/p/854672c36692</a></p><p>-–END</p>]]></content>
    
    
    <summary type="html">Git 推送(提交)时如何忽略某个文件或目录？</summary>
    
    
    
    <category term="Git" scheme="https://blog.rabcnops.cn/categories/Git/"/>
    
    
    <category term="Git" scheme="https://blog.rabcnops.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 主从复制涉及到了几个线程？</title>
    <link href="https://blog.rabcnops.cn/posts/articles/f4b248ff.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/f4b248ff.html</id>
    <published>2023-05-09T01:38:00.000Z</published>
    <updated>2023-05-09T01:39:22.795Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/ms-mysql.png" alt="ms-mysql"></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说到主从，我相信大家在 MySQL 这一节面试经常被问到<code>MySQL 的主从复制原理</code>，而且大家背得滚瓜烂熟。但是在主从复制的过程中，是如何进程数据同步的，又涉及到了哪些线程呢？这些线程又是充当的什么角色呢？</p><p>首先，MySQL 有如下几种复制模式：</p><ul><li>主从复制模式：A - - &gt; B</li><li>主主复制模式：A &lt; - - &gt; B</li><li>链式复制模式：A - - &gt; B - - &gt; C</li><li>环形复制模式：A - - &gt; B - - &gt; C - - &gt; A</li></ul><p>生产环境中一般建议部署为<code>主从模式</code>，这也是比较稳健的一种 MySQL 复制方式，如果想实现一定程度上的高可用，可选择使用主主模式，但是主主模式必须确保任何一个时刻都只有一个数据库是 Active 状态（即读写状态），另一个数据库作为备用，否则就要解决<code>自增键/主键</code>的冲突问题。</p><h2 id="一、主从同步原理"><a href="#一、主从同步原理" class="headerlink" title="一、主从同步原理"></a>一、主从同步原理</h2><p>简单的主从复制基本原理如下：</p><ul><li>主库将更新写入二进制文件，并维护文件的一个索引来跟踪日志循环；</li><li>从库复制主库的二进制日志事件到本地的中继日志（relay log）；</li><li>从库重放中继日志实现与主库的数据同步。</li></ul><p>这里不进行深入的源码分析，有兴趣的自行查阅<a href="https://dev.mysql.com/doc/">官方文档</a>。</p><h2 id="二、主从同步分析"><a href="#二、主从同步分析" class="headerlink" title="二、主从同步分析"></a>二、主从同步分析</h2><p>MySQL 使用 3 个线程来实现同步（复制）功能，一个线程在主库上，另两个线程在从库上。</p><p>当从库执行 <code>start slave</code>指令时，从库将创建一个 I&#x2F;O 线程，该线程用于连接主库并让主库发送记录在其二进制日志（主库二进制日志）中的语句。此时，主库会创建一个线程将其二进制日志的内容发送到从库，如下图，就是其创建的线程，有两个线程，是因为我的 MySQL 复制是双主双从架构（关于如何部署双主，可看看我前面的博文<a href="https://blog.rabcnops.cn/posts/articles/96e13b9f.html">《基于 Docker 的 MySQL GTID 主从复制与测试》</a>），下图是在某个一个主库上查询的，因此它有两个从库，所有就会生成两个 Binlog Dump 线程，该线程会发送更新的二进制内容到从库，并等待新的二进制日志更新，有更新就会推送。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show processlist\G</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230505182639729.png" alt="image-20230505182639729"></p><p>然后从库的 I&#x2F;O 线程读取主库 Binlog Dump 线程发送的内容并将读取的数据存储到从库的中继日志文件中，最后从库的 SQL 线程会将中继日志中的事件重演并最终落盘。I&#x2F;O 线程与 SQL 线程位于从库上，如下图：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230508095040342.png" alt="image-20230508095040342"></p><p>而且要确保这两个线程均处于 <code>Yes</code> 状态，才能实现主从复制。</p><p><mark>以上就是 MySQL 主从复制过程涉及到的三个线程！</mark></p>]]></content>
    
    
    <summary type="html">MySQL 主从复制涉及到了几个线程？</summary>
    
    
    
    <category term="数据库" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="关系型数据库" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.rabcnops.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>基于 Docker 的 MySQL GTID 主从复制与测试</title>
    <link href="https://blog.rabcnops.cn/posts/articles/96e13b9f.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/96e13b9f.html</id>
    <published>2023-05-03T15:20:00.000Z</published>
    <updated>2023-05-03T15:44:30.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于-Docker-的-MySQL-GTID-主从复制与测试"><a href="#基于-Docker-的-MySQL-GTID-主从复制与测试" class="headerlink" title="基于 Docker 的 MySQL GTID 主从复制与测试"></a><center>基于 Docker 的 MySQL GTID 主从复制与测试</center></h1><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/ms-mysql.png" alt="ms-mysql"></p><hr><h2 id="一、规划"><a href="#一、规划" class="headerlink" title="一、规划"></a>一、规划</h2><h3 id="1-1-基础环境"><a href="#1-1-基础环境" class="headerlink" title="1.1 基础环境"></a>1.1 基础环境</h3><p>1、服务器环境</p><ul><li><p>Linux：CentOS 7.9</p></li><li><p>Docker：23.0.4</p></li><li><p>Docker-compose：2.7.0</p></li><li><p>Sysbench：1.0.20</p></li></ul><p>2、服务&#x2F;应用</p><ul><li>MySQL：8.0.33</li></ul><h3 id="1-2-应用架构"><a href="#1-2-应用架构" class="headerlink" title="1.2 应用架构"></a>1.2 应用架构</h3><blockquote><p>复制：双主双从，实现主从复制、主主复制；</p><p>读写：master 实例具备<code>读写权限</code>，slave 实例具备<code>只读权限</code>。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/M-S.png" alt="M-S"></p><h3 id="1-3-路径规划"><a href="#1-3-路径规划" class="headerlink" title="1.3 路径规划"></a>1.3 路径规划</h3><blockquote><p>数据持久化管理。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── master1</span><br><span class="line">│   ├── conf</span><br><span class="line">│   ├── data</span><br><span class="line">│   └── logs</span><br><span class="line">├── master2</span><br><span class="line">│   ├── conf</span><br><span class="line">│   ├── data</span><br><span class="line">│   └── logs</span><br><span class="line">├── slave1</span><br><span class="line">│   ├── conf</span><br><span class="line">│   ├── data</span><br><span class="line">│   └── logs</span><br><span class="line">└── slave2</span><br><span class="line">    ├── conf</span><br><span class="line">    ├── data</span><br><span class="line">    └── logs</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230429181901803.png" alt="image-20230429181901803"></p><h2 id="二、部署"><a href="#二、部署" class="headerlink" title="二、部署"></a>二、部署</h2><h3 id="2-1-服务部署"><a href="#2-1-服务部署" class="headerlink" title="2.1 服务部署"></a>2.1 服务部署</h3><p>1、安装 docker 服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://csdn-rab.oss-cn-chengdu.aliyuncs.com/shellscript/docker_install.sh | bash</span><br></pre></td></tr></table></figure><p>2、安装 docker-compse 编排工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://rab-package.oss-cn-hangzhou.aliyuncs.com/binary/el7/docker-compose/2.7.0/docker-compose-linux-x86_64</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x docker-compose-linux-x86_64 &amp;&amp; <span class="built_in">mv</span> docker-compose-linux-x86_64 /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><p>3、安装 MySQL 服务</p><blockquote><p>使用 Docker-compose 进行编排。</p></blockquote><ul><li><p>创建持久化目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /root/mysql_install/&#123;master1/&#123;data,logs,conf&#125;,master2/&#123;data,logs,conf&#125;,slave1/&#123;data,logs,conf&#125;,slave2/&#123;data,logs,conf&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 777 /root/mysql_install/&#123;master1/&#123;data,logs&#125;,master2/&#123;data,logs&#125;,slave1/&#123;data,logs&#125;,slave2/&#123;data,logs&#125;&#125;</span><br></pre></td></tr></table></figure><p>临时测试-删除</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /root/mysql_install/&#123;master1/&#123;data/*,logs/*&#125;,master2/&#123;data/*,logs/*&#125;,slave1/&#123;data/*,logs/*&#125;,slave2/&#123;data/*,logs/*&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>分别上传配置文件（my.cnf）至 conf 目录下</p><blockquote><p>Master1 配置文件（server-id 为1，其他不变）</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># innodb_force_recovery = 6  # 数据恢复参数，在数据表结构异常时使用（缺省值为0）</span></span><br><span class="line">port = 3306</span><br><span class="line">datadir         = /var/lib/mysql</span><br><span class="line">log-error       = /var/log/mysql/error.log</span><br><span class="line">innodb-data-file-path = /var/lib/mysql/ibdata1:1G;/var/lib/mysql/ibdata2:1G;/var/lib/mysql/ibdata3:1G</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links = 0</span><br><span class="line">max_connections = 2000</span><br><span class="line">max_user_connections = 1900</span><br><span class="line">max_connect_errors = 100000</span><br><span class="line">max_allowed_packet = 50M</span><br><span class="line">lower_case_table_names = 1</span><br><span class="line">default-time_zone = <span class="string">&#x27;+8:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1055异常处理</span></span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"><span class="comment"># GTID及二进制日志</span></span><br><span class="line">server-id = 1</span><br><span class="line">gtid_mode = on</span><br><span class="line">enforce_gtid_consistency = on</span><br><span class="line">master-info-repository = TABLE</span><br><span class="line">relay-log-info-repository = TABLE</span><br><span class="line"><span class="comment"># 设置binlog日志</span></span><br><span class="line">log-bin = /var/log/mysql/mysql-binlog</span><br><span class="line"><span class="comment"># 为每个session分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M  </span><br><span class="line"><span class="comment"># 主从复制的格式（mixed,statement,row，默认格式是statement）官方推荐在使用GTID情况下，基于行复制</span></span><br><span class="line">binlog_format=row</span><br><span class="line"><span class="comment"># 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不需要同步的数据库</span></span><br><span class="line">binlog-ignore-db = mysql</span><br><span class="line">binlog_ignore_db = information_schema</span><br><span class="line">binlog_ignore_db = performation_schema</span><br><span class="line">binlog_ignore_db = sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql_native_password</span></span><br><span class="line">default_authentication_plugin = <span class="string">&#x27;mysql_native_password&#x27;</span></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure><blockquote><p>Master2 配置文件（server-id 为2，其他不变）</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># innodb_force_recovery = 6  # 数据恢复参数，在数据表结构异常时使用（缺省值为0）</span></span><br><span class="line">port = 3306</span><br><span class="line">datadir         = /var/lib/mysql</span><br><span class="line">log-error       = /var/log/mysql/error.log</span><br><span class="line">innodb-data-file-path = /var/lib/mysql/ibdata1:1G;/var/lib/mysql/ibdata2:1G;/var/lib/mysql/ibdata3:1G</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links = 0</span><br><span class="line">max_connections = 2000</span><br><span class="line">max_user_connections = 1900</span><br><span class="line">max_connect_errors = 100000</span><br><span class="line">max_allowed_packet = 50M</span><br><span class="line">lower_case_table_names = 1</span><br><span class="line">default-time_zone = <span class="string">&#x27;+8:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1055异常处理</span></span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"><span class="comment"># GTID及二进制日志</span></span><br><span class="line">server-id = 2</span><br><span class="line">gtid_mode = on</span><br><span class="line">enforce_gtid_consistency = on</span><br><span class="line">master-info-repository = TABLE</span><br><span class="line">relay-log-info-repository = TABLE</span><br><span class="line"><span class="comment"># 设置binlog日志</span></span><br><span class="line">log-bin = /var/log/mysql/mysql-binlog</span><br><span class="line"><span class="comment"># 为每个session分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M  </span><br><span class="line"><span class="comment"># 主从复制的格式（mixed,statement,row，默认格式是statement）官方推荐在使用GTID情况下，基于行复制</span></span><br><span class="line">binlog_format=row</span><br><span class="line"><span class="comment"># 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不需要同步的数据库</span></span><br><span class="line">binlog-ignore-db = mysql</span><br><span class="line">binlog_ignore_db = information_schema</span><br><span class="line">binlog_ignore_db = performation_schema</span><br><span class="line">binlog_ignore_db = sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql_native_password</span></span><br><span class="line">default_authentication_plugin = <span class="string">&#x27;mysql_native_password&#x27;</span></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure><blockquote><p>Slave1 配置文件（server-id 为3，其他不变）</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># innodb_force_recovery = 6  # 数据恢复参数，在数据表结构异常时使用（缺省值为0）</span></span><br><span class="line">port = 3306</span><br><span class="line">datadir         = /var/lib/mysql</span><br><span class="line">log-error       = /var/log/mysql/error.log</span><br><span class="line">innodb-data-file-path = /var/lib/mysql/ibdata1:1G;/var/lib/mysql/ibdata2:1G;/var/lib/mysql/ibdata3:1G</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links = 0</span><br><span class="line">max_connections = 2000</span><br><span class="line">max_user_connections = 1900</span><br><span class="line">max_connect_errors = 100000</span><br><span class="line">max_allowed_packet = 50M</span><br><span class="line">lower_case_table_names = 1</span><br><span class="line">default-time_zone = <span class="string">&#x27;+8:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1055异常处理</span></span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"><span class="comment"># GTID及二进制日志</span></span><br><span class="line">server-id = 3</span><br><span class="line">gtid_mode = on</span><br><span class="line">enforce_gtid_consistency = on</span><br><span class="line">master-info-repository = TABLE</span><br><span class="line">relay-log-info-repository = TABLE</span><br><span class="line"><span class="comment"># 设置binlog日志</span></span><br><span class="line">log-bin = /var/log/mysql/mysql-binlog</span><br><span class="line"><span class="comment"># 为每个session分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M  </span><br><span class="line"><span class="comment"># 主从复制的格式（mixed,statement,row，默认格式是statement）官方推荐在使用GTID情况下，基于行复制</span></span><br><span class="line">binlog_format=row</span><br><span class="line"><span class="comment"># 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql_native_password</span></span><br><span class="line">default_authentication_plugin = <span class="string">&#x27;mysql_native_password&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># slave实例设置为只读</span></span><br><span class="line">read_only = on</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure><blockquote><p>Slave2 配置文件（server-id 为4，其他不变）</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># innodb_force_recovery = 6  # 数据恢复参数，在数据表结构异常时使用（缺省值为0）</span></span><br><span class="line">port = 3306</span><br><span class="line">datadir         = /var/lib/mysql</span><br><span class="line">log-error       = /var/log/mysql/error.log</span><br><span class="line">innodb-data-file-path = /var/lib/mysql/ibdata1:1G;/var/lib/mysql/ibdata2:1G;/var/lib/mysql/ibdata3:1G</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links = 0</span><br><span class="line">max_connections = 2000</span><br><span class="line">max_user_connections = 1900</span><br><span class="line">max_connect_errors = 100000</span><br><span class="line">max_allowed_packet = 50M</span><br><span class="line">lower_case_table_names = 1</span><br><span class="line">default-time_zone = <span class="string">&#x27;+8:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1055异常处理</span></span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"><span class="comment"># GTID及二进制日志</span></span><br><span class="line">server-id = 3</span><br><span class="line">gtid_mode = on</span><br><span class="line">enforce_gtid_consistency = on</span><br><span class="line">master-info-repository = TABLE</span><br><span class="line">relay-log-info-repository = TABLE</span><br><span class="line"><span class="comment"># 设置binlog日志</span></span><br><span class="line">log-bin = /var/log/mysql/mysql-binlog</span><br><span class="line"><span class="comment"># 为每个session分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M  </span><br><span class="line"><span class="comment"># 主从复制的格式（mixed,statement,row，默认格式是statement）官方推荐在使用GTID情况下，基于行复制</span></span><br><span class="line">binlog_format=row</span><br><span class="line"><span class="comment"># 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql_native_password</span></span><br><span class="line">default_authentication_plugin = <span class="string">&#x27;mysql_native_password&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># slave实例设置为只读</span></span><br><span class="line">read_only = on</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure></li><li><p>编写 docker-compose 文件</p><blockquote><p>指定 IP 时，注意不要与原网段重复，否则将创建失败！</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  master1:</span><br><span class="line">    image: mysql:8.0.33</span><br><span class="line">    container_name: master1</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 33061:3306</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=Zhurs@123!</span><br><span class="line">    volumes:</span><br><span class="line">      - /root/mysql_install/master1/conf:/etc/mysql/conf.d</span><br><span class="line">      - /root/mysql_install/master1/logs:/var/log/mysql</span><br><span class="line">      - /root/mysql_install/master1/data:/var/lib/mysql</span><br><span class="line">    networks:</span><br><span class="line">      mysql-network:</span><br><span class="line">        ipv4_address: 172.31.1.11</span><br><span class="line">  master2:</span><br><span class="line">    image: mysql:8.0.33</span><br><span class="line">    container_name: master2</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 33062:3306</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=Zhurs@123!</span><br><span class="line">    volumes:</span><br><span class="line">      - /root/mysql_install/master2/conf:/etc/mysql/conf.d</span><br><span class="line">      - /root/mysql_install/master2/logs:/var/log/mysql</span><br><span class="line">      - /root/mysql_install/master2/data:/var/lib/mysql</span><br><span class="line">    networks:</span><br><span class="line">      mysql-network:</span><br><span class="line">        ipv4_address: 172.31.1.12</span><br><span class="line">  slave1:</span><br><span class="line">    image: mysql:8.0.33</span><br><span class="line">    container_name: slave1</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 33063:3306</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=Zhurs@123!</span><br><span class="line">    volumes:</span><br><span class="line">      - /root/mysql_install/slave1/conf:/etc/mysql/conf.d</span><br><span class="line">      - /root/mysql_install/slave1/logs:/var/log/mysql</span><br><span class="line">      - /root/mysql_install/slave1/data:/var/lib/mysql</span><br><span class="line">    networks:</span><br><span class="line">      mysql-network:</span><br><span class="line">        ipv4_address: 172.31.1.13</span><br><span class="line">  slave2:</span><br><span class="line">    image: mysql:8.0.33</span><br><span class="line">    container_name: slave2</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 33064:3306</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=Zhurs@123!</span><br><span class="line">    volumes:</span><br><span class="line">      - /root/mysql_install/slave2/conf:/etc/mysql/conf.d</span><br><span class="line">      - /root/mysql_install/slave2/logs:/var/log/mysql</span><br><span class="line">      - /root/mysql_install/slave2/data:/var/lib/mysql</span><br><span class="line">    networks:</span><br><span class="line">      mysql-network:</span><br><span class="line">        ipv4_address: 172.31.1.14</span><br><span class="line">      </span><br><span class="line">networks:</span><br><span class="line">  mysql-network:</span><br><span class="line">    driver: bridge</span><br><span class="line">    ipam:</span><br><span class="line">      driver: default</span><br><span class="line">      config:</span><br><span class="line">        - subnet: 172.31.1.0/24</span><br><span class="line">          gateway: 172.31.1.1</span><br></pre></td></tr></table></figure></li><li><p>运行 MySQL 服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><blockquote><p>查看容器是否正常运行。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230502225451248.png" alt="image-20230502225451248"></p></li></ul><h3 id="2-2-主从配置"><a href="#2-2-主从配置" class="headerlink" title="2.2 主从配置"></a>2.2 主从配置</h3><h4 id="2-2-1-主从同步配置"><a href="#2-2-1-主从同步配置" class="headerlink" title="2.2.1 主从同步配置"></a>2.2.1 主从同步配置</h4><p>1、配置 <code>master1 - - &gt; slave1</code> 主从</p><ul><li><p>master1 实例创建主从同步账号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入master1容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it master1 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录MySQL</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line"><span class="comment"># 注意：MySql8有新的安全要求，不能像之前的版本那样一次性创建用户并授权需要先创建用户，再进行授权操作</span></span><br><span class="line">create user <span class="string">&#x27;repl_master1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;zhurs@123.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权（主从同步权限即可）</span></span><br><span class="line"><span class="comment"># replication slave权限：拥有此权限可以查看从服务器，从主服务器读取二进制日志。</span></span><br><span class="line"><span class="comment"># super权限：允许用户使用修改全局变量的SET语句以及CHANGE（属于MASTER语句）</span></span><br><span class="line"><span class="comment"># reload权限：必须拥有reload权限，才可以执行flush  [tables | logs | privileges]</span></span><br><span class="line">grant replication  slave,reload,super on *.* to <span class="string">&#x27;repl_master1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> with grant option;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新授权</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>slave1 实例进行同步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入slave1容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it slave1 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录MySQL</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接master1主库</span></span><br><span class="line">CHANGE MASTER TO master_host=<span class="string">&#x27;172.31.1.11&#x27;</span>, master_port=3306, master_user=<span class="string">&#x27;repl_master1&#x27;</span>, master_password=<span class="string">&#x27;zhurs@123.com&#x27;</span>, master_auto_position=1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动slave连接</span></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure></li><li><p>查看同步状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503000000879.png" alt="image-20230503000000879"></p></li></ul><p>2、配置 <code>master2 - - &gt; slave2</code> 主从</p><ul><li><p>master2 实例创建主从同步账号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入master2容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it master2 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录MySQL</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line"><span class="comment"># 注意：MySql8有新的安全要求，不能像之前的版本那样一次性创建用户并授权需要先创建用户，再进行授权操作</span></span><br><span class="line">create user <span class="string">&#x27;repl_master2&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;zhurs@123.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权（主从同步权限即可）</span></span><br><span class="line"><span class="comment"># replication slave权限：拥有此权限可以查看从服务器，从主服务器读取二进制日志。</span></span><br><span class="line"><span class="comment"># super权限：允许用户使用修改全局变量的SET语句以及CHANGE（属于MASTER语句）</span></span><br><span class="line"><span class="comment"># reload权限：必须拥有reload权限，才可以执行flush  [tables | logs | privileges]</span></span><br><span class="line">grant replication  slave,reload,super on *.* to <span class="string">&#x27;repl_master2&#x27;</span>@<span class="string">&#x27;%&#x27;</span> with grant option;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新授权</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>slave2 实例进行同步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入slave2容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it slave2 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录MySQL</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接master2主库</span></span><br><span class="line">CHANGE MASTER TO master_host=<span class="string">&#x27;172.31.1.12&#x27;</span>, master_port=3306, master_user=<span class="string">&#x27;repl_master2&#x27;</span>, master_password=<span class="string">&#x27;zhurs@123.com&#x27;</span>, master_auto_position=1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动slave连接</span></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure></li><li><p>查看同步状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503001352692.png" alt="image-20230503001352692"></p></li></ul><p><mark>至此，MySQL 的主从复制完成！接下来配置主主复制过程！</mark></p><h4 id="2-2-2-主主同步配置"><a href="#2-2-2-主主同步配置" class="headerlink" title="2.2.2 主主同步配置"></a>2.2.2 主主同步配置</h4><p>1、配置 <code>master1 - - &gt; master2</code> 主从</p><blockquote><p>master1 为主，master2 为从</p></blockquote><ul><li><p>master1 实例创建主从同步账号</p><blockquote><p>已经创建。</p></blockquote></li><li><p>master2 实例进行同步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入slave1容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it master2 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录MySQL</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接master1主库</span></span><br><span class="line">CHANGE MASTER TO master_host=<span class="string">&#x27;172.31.1.11&#x27;</span>, master_port=3306, master_user=<span class="string">&#x27;repl_master1&#x27;</span>, master_password=<span class="string">&#x27;zhurs@123.com&#x27;</span>, master_auto_position=1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动slave连接</span></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure></li><li><p>查看同步状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503001450209.png" alt="image-20230503001450209"></p></li></ul><p>2、配置 <code>master2 - - &gt; master1</code> 主从</p><blockquote><p>master2 为主，master1 为从</p></blockquote><ul><li><p>master2 实例创建主从同步账号</p><blockquote><p>已经创建。</p></blockquote></li><li><p>master1 实例进行同步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入slave1容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it master1 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录MySQL</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接master1主库</span></span><br><span class="line">CHANGE MASTER TO master_host=<span class="string">&#x27;172.31.1.12&#x27;</span>, master_port=3306, master_user=<span class="string">&#x27;repl_master2&#x27;</span>, master_password=<span class="string">&#x27;zhurs@123.com&#x27;</span>, master_auto_position=1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动slave连接</span></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure></li><li><p>查看同步状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503001757491.png" alt="image-20230503001757491"></p></li></ul><p><mark>至此，主从复制、主主复制结束！</mark></p><blockquote><p><strong>注</strong>：在配置 SLAVE 同步时</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先停止数据同步相关的线程： slave I/O 线程和 slave SQL 线程</span></span><br><span class="line">STOP SLAVE;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了避免可能发生的错误，直接重置客户端</span></span><br><span class="line">RESET  SLAVE;</span><br></pre></td></tr></table></figure><h3 id="2-3-主从验证"><a href="#2-3-主从验证" class="headerlink" title="2.3 主从验证"></a>2.3 主从验证</h3><h4 id="2-3-1-主从同步验证"><a href="#2-3-1-主从同步验证" class="headerlink" title="2.3.1 主从同步验证"></a>2.3.1 主从同步验证</h4><p>1、master1 创建测试数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database <span class="keyword">if</span> not exists master1 default charset utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure><p>2、slave1 验证是否同步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如下图，已经同步</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503002355116.png" alt="image-20230503002355116"></p><h4 id="2-3-2-主主同步验证"><a href="#2-3-2-主主同步验证" class="headerlink" title="2.3.2 主主同步验证"></a>2.3.2 主主同步验证</h4><p>此时，master2、slave2 也都有名为 <code>master1</code> 的测试数据库，因为 master2 与 master1 互为主从，而 slave2 又是 master2 的从库。</p><p>因此得出结论，这种数据库架构下，只要你在任意一 master 节点上创建数据库，每个 MySQL 实例都会实现数据同步。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503002458446.png" alt="image-20230503002458446"></p><h3 id="2-4-客户端连接"><a href="#2-4-客户端连接" class="headerlink" title="2.4 客户端连接"></a>2.4 客户端连接</h3><h4 id="2-4-1-控制台"><a href="#2-4-1-控制台" class="headerlink" title="2.4.1 控制台"></a>2.4.1 控制台</h4><blockquote><p>需安装MySQL客户端命令（mysql）。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -pZhurs@123! -h 192.168.56.120 -P 33061</span><br></pre></td></tr></table></figure><h4 id="2-4-2-图形化"><a href="#2-4-2-图形化" class="headerlink" title="2.4.2 图形化"></a>2.4.2 图形化</h4><blockquote><p>如 client 通过 navicat 客户端软件连接 master 节点（只需要连接其中之一即可），或以 VIP 的方式连接（配置 keepalived 实现 master 节点高可用），由于在单台 Host 虚拟机下运行的多 MySQL 实例，就无法做高可用演示，生产中至少两台 master 的 Host 节点来实现高可用。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503003905267.png" alt="image-20230503003905267"></p><p><strong>查看数据库：</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503003945019.png" alt="image-20230503003945019"></p><p><mark>至此，主从复制 + 主主复制 + 客户端连接已经配置完毕！</mark></p><h2 id="三、压测"><a href="#三、压测" class="headerlink" title="三、压测"></a>三、压测</h2><blockquote><p>测试：主从读写性能。</p><p>工具：<code>sysbench</code></p></blockquote><h3 id="3-1-安装-sysbench"><a href="#3-1-安装-sysbench" class="headerlink" title="3.1 安装 sysbench"></a>3.1 安装 sysbench</h3><p>1、执行脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://packagecloud.io/install/repositories/akopytov/sysbench/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure><p>2、开始安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install sysbench</span><br></pre></td></tr></table></figure><p>3、验证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysbench --version</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503213303900.png" alt="image-20230503213303900"></p><h3 id="3-2-sysbench-压测"><a href="#3-2-sysbench-压测" class="headerlink" title="3.2 sysbench 压测"></a>3.2 sysbench 压测</h3><blockquote><p>由于我的系统主机资源有限，因此就简单的 10 张表、每张表 1千条数据进行 5 分钟压测</p><p>参考：<a href="https://help.aliyun.com/document_detail/146103.html">https://help.aliyun.com/document_detail/146103.html</a></p></blockquote><h4 id="3-2-1-读性能"><a href="#3-2-1-读性能" class="headerlink" title="3.2.1  读性能"></a>3.2.1  读性能</h4><p>1、准备数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sysbench \</span><br><span class="line">  --db-driver=mysql \</span><br><span class="line">  --mysql-host=192.168.56.120 \</span><br><span class="line">  --mysql-port=33061 \</span><br><span class="line">  --mysql-user=root \</span><br><span class="line">  --mysql-password=Zhurs@123! \</span><br><span class="line">  --mysql-db=master1 \</span><br><span class="line">  --table_size=1000 \</span><br><span class="line">  --tables=10 \</span><br><span class="line">  --events=0 \</span><br><span class="line">  --time=300  oltp_read_only prepare</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment"># --table_size：表记录数</span></span><br><span class="line"><span class="comment"># --tables：表数量</span></span><br></pre></td></tr></table></figure><blockquote><p>执行完毕后，来查看数据库。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503223241087.png" alt="image-20230503223241087"></p><p>2、运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sysbench \</span><br><span class="line">  --db-driver=mysql \</span><br><span class="line">  --mysql-host=192.168.56.120 \</span><br><span class="line">  --mysql-port=33061 \</span><br><span class="line">  --mysql-user=root \</span><br><span class="line">  --mysql-password=Zhurs@123! \</span><br><span class="line">  --mysql-db=master1 \</span><br><span class="line">  --table_size=1000 \</span><br><span class="line">  --tables=10 \</span><br><span class="line">  --events=0 \</span><br><span class="line">  --time=300 \</span><br><span class="line">  --threads=5 \</span><br><span class="line">  --percentile=95 \</span><br><span class="line">  --range_selects=0 \</span><br><span class="line">  --skip-trx=1 \</span><br><span class="line">  --report-interval=1 oltp_read_only run</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment"># --threads：并发线程数，可以理解为模拟的客户端并发连接数</span></span><br><span class="line"><span class="comment"># --skip-trx：省略begin/commit语句。默认是off</span></span><br></pre></td></tr></table></figure><p>**执行结果：**从中可看出每秒查询，每秒事务等执行结果。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503224520488.png" alt="image-20230503224520488"></p><p>除此之外，Host 系统的平均负载也在升高：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503225222279.png" alt="image-20230503225222279"></p><p>3、清理</p><blockquote><p>测试完成后清理数据，释放空间</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sysbench \</span><br><span class="line">  --db-driver=mysql \</span><br><span class="line">  --mysql-host=192.168.56.120 \</span><br><span class="line">  --mysql-port=33061 \</span><br><span class="line">  --mysql-user=root \</span><br><span class="line">  --mysql-password=Zhurs@123! \</span><br><span class="line">  --mysql-db=master1 \</span><br><span class="line">  --table_size=1000 \</span><br><span class="line">  --tables=10 \</span><br><span class="line">  --events=0 \</span><br><span class="line">  --time=300   \</span><br><span class="line">  --threads=5 \</span><br><span class="line">  --percentile=95 \</span><br><span class="line">  --range_selects=0 oltp_read_only cleanup</span><br></pre></td></tr></table></figure><h4 id="3-2-2-写性能"><a href="#3-2-2-写性能" class="headerlink" title="3.2.2 写性能"></a>3.2.2 写性能</h4><p>1、准备数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sysbench \</span><br><span class="line">  --db-driver=mysql \</span><br><span class="line">  --mysql-host=192.168.56.120 \</span><br><span class="line">  --mysql-port=33061 \</span><br><span class="line">  --mysql-user=root \</span><br><span class="line">  --mysql-password=Zhurs@123! \</span><br><span class="line">  --mysql-db=master1 \</span><br><span class="line">  --table_size=1000 \</span><br><span class="line">  --tables=10 \</span><br><span class="line">  --events=0 \</span><br><span class="line">  --time=300  oltp_write_only prepare</span><br></pre></td></tr></table></figure><p>2、运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sysbench \</span><br><span class="line">  --db-driver=mysql \</span><br><span class="line">  --mysql-host=192.168.56.120 \</span><br><span class="line">  --mysql-port=33061 \</span><br><span class="line">  --mysql-user=root \</span><br><span class="line">  --mysql-password=Zhurs@123! \</span><br><span class="line">  --mysql-db=master1 \</span><br><span class="line">  --table_size=1000 \</span><br><span class="line">  --tables=10 \</span><br><span class="line">  --events=0 \</span><br><span class="line">  --time=300 \</span><br><span class="line">  --threads=5 \</span><br><span class="line">  --percentile=95 \</span><br><span class="line">  --report-interval=1 oltp_write_only run</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503225733818.png" alt="image-20230503225733818"></p><p>3、清理</p><blockquote><p>测试完成后清理数据，释放空间</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sysbench \</span><br><span class="line">  --db-driver=mysql \</span><br><span class="line">  --mysql-host=192.168.56.120 \</span><br><span class="line">  --mysql-port=33061 \</span><br><span class="line">  --mysql-user=root \</span><br><span class="line">  --mysql-password=Zhurs@123! \</span><br><span class="line">  --mysql-db=master1 \</span><br><span class="line">  --table_size=1000 \</span><br><span class="line">  --tables=10 \</span><br><span class="line">  --events=0 \</span><br><span class="line">  --time=300 \</span><br><span class="line">  --threads=5 \</span><br><span class="line">  --percentile=95 oltp_write_only cleanup</span><br></pre></td></tr></table></figure><h4 id="3-2-3-读写性能"><a href="#3-2-3-读写性能" class="headerlink" title="3.2.3 读写性能"></a>3.2.3 读写性能</h4><p>1、准备数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sysbench \</span><br><span class="line">  --db-driver=mysql \</span><br><span class="line">  --mysql-host=192.168.56.120 \</span><br><span class="line">  --mysql-port=33061 \</span><br><span class="line">  --mysql-user=root \</span><br><span class="line">  --mysql-password=Zhurs@123! \</span><br><span class="line">  --mysql-db=master1 \</span><br><span class="line">  --table_size=1000 \</span><br><span class="line">  --tables=10 \</span><br><span class="line">  --events=0 \</span><br><span class="line">  --time=300 oltp_read_write prepare</span><br></pre></td></tr></table></figure><p>2、运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sysbench \</span><br><span class="line">  --db-driver=mysql  \</span><br><span class="line">  --mysql-host=192.168.56.120 \</span><br><span class="line">  --mysql-port=33061 \</span><br><span class="line">  --mysql-user=root \</span><br><span class="line">  --mysql-password=Zhurs@123! \</span><br><span class="line">  --mysql-db=master1 \</span><br><span class="line">  --table_size=1000 \</span><br><span class="line">  --tables=10 \</span><br><span class="line">  --events=0 \</span><br><span class="line">  --time=300 \</span><br><span class="line">  --threads=5 \</span><br><span class="line">  --percentile=95 \</span><br><span class="line">  --report-interval=1 oltp_read_write run</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503231502157.png" alt="image-20230503231502157"></p><p>3、清理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sysbench \</span><br><span class="line">  --db-driver=mysql \</span><br><span class="line">  --mysql-host=192.168.56.120 \</span><br><span class="line">  --mysql-port=33061 \</span><br><span class="line">  --mysql-user=root \</span><br><span class="line">  --mysql-password=Zhurs@123! \</span><br><span class="line">  --mysql-db=master1 \</span><br><span class="line">  --table_size=1000 \</span><br><span class="line">  --tables=10 \</span><br><span class="line">  --events=0 \</span><br><span class="line">  --time=300 \</span><br><span class="line">  --threads=5 \</span><br><span class="line">  --percentile=95 oltp_read_write cleanup</span><br></pre></td></tr></table></figure><h4 id="3-2-4-主从复制延迟"><a href="#3-2-4-主从复制延迟" class="headerlink" title="3.2.4 主从复制延迟"></a>3.2.4 主从复制延迟</h4><p>以 10 张表，每张表 1000 条记录，读写压测 5 分钟的数据来看，主从复制的延迟在为 1s，不超过 2s（本次测试结果），如下图所示。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503225703898.png" alt="image-20230503225703898"></p><h2 id="四、扩展"><a href="#四、扩展" class="headerlink" title="四、扩展"></a>四、扩展</h2><h3 id="4-1-主从复制方式"><a href="#4-1-主从复制方式" class="headerlink" title="4.1 主从复制方式"></a>4.1 主从复制方式</h3><h4 id="4-1-1-异步复制（Asynchronous-replication）"><a href="#4-1-1-异步复制（Asynchronous-replication）" class="headerlink" title="4.1.1 异步复制（Asynchronous replication）"></a>4.1.1 异步复制（Asynchronous replication）</h4><p>MySQL 默认使用的是异步复制，官方解释如下：</p><p><code>the master writes events to its binary log and slaves request them when they are ready. There is no guarantee that any event will ever reach any slave.</code></p><p>即 master 服务器将事件写入其二进制日志，slave 服务器在事件准备好时请求事件。不能保证任何事件都会影响到任何一个 slave。</p><p><strong>说白了就是</strong>：主库只管把 events 写入 binlog 中，不管从库有没有收到。</p><h4 id="4-1-2-全同步复制（Fully-synchronous-replication）"><a href="#4-1-2-全同步复制（Fully-synchronous-replication）" class="headerlink" title="4.1.2 全同步复制（Fully synchronous replication）"></a>4.1.2 全同步复制（Fully synchronous replication）</h4><p>官方解释如下：</p><p><code>when a master commits a transaction, all slaves also will have committed the transaction before the master returns to the session that performed the transaction. The drawback of this is that there might be a lot of delay to complete a transaction.</code></p><p>即 master 服务器提交事务时，在 master 服务器返回到执行该事务的会话之前，所有 slave 服务器也将提交该事务。这样做的缺点是完成事务可能会有很多延迟。</p><p><strong>说白了就是</strong>：主库提交一个事物，需要等待所有从库先提交才能返回结果，执行这个事物。这样会造成一个事物延时。</p><h4 id="4-1-3-半同步复制（Semisynchronous-replication）"><a href="#4-1-3-半同步复制（Semisynchronous-replication）" class="headerlink" title="4.1.3 半同步复制（Semisynchronous replication）"></a>4.1.3 半同步复制（Semisynchronous replication）</h4><p>官方解释如下：</p><p><code>falls between asynchronous and fully synchronous replication. The master waits only until at least one slave has received and logged the events. It does not wait for all slaves to acknowledge receipt, and it requires only receipt, not that the events have been fully executed and committed on the slave side.</code></p><p>即介于异步复制和全同步复制之间。master 服务器只等待至少一个 slave 服务器接收并记录事件。它不等待所有从服务器确认接收，它只需要接收，而不需要在从服务器端完全执行和提交事件。</p><p><strong>说白了就是</strong>：介于异步复制和全复制之间，主库仅仅只要等待至少一个从库收到和记录 events。它不需要等待所有的从库告诉它收到events，也不需要从库执行和提交事物，从库只是收到 events 就会告诉主库，这样主库就可以提前提交事物了。</p><h3 id="4-2-GTID-与-Binary-Log"><a href="#4-2-GTID-与-Binary-Log" class="headerlink" title="4.2 GTID 与 Binary Log"></a>4.2 GTID 与 Binary Log</h3><p>1、GTID</p><p><code>MySQL GTID（Global Transaction ID）</code>是一种用于在复制环境中唯一标识事务的机制。GTID 能够在复制拓扑中帮助识别和跟踪每个事务的状态，从而更方便的进行数据同步和故障恢复。在 MySQL 5.6 版本及以上，可以使用 GTID 进行复制。</p><p>2、Binary Log</p><p><code>binlog（Binary Log）</code>是 MySQL 中的一种日志文件，用于记录对 MySQL 数据库进行的更改操作。它记录了所有的数据更改操作，包括对表的插入、更新和删除等操作。binlog 日志可以用于数据恢复、复制和备份等操作。</p><p>3、两者区别</p><ul><li>功能不同：GTID 用于唯一标识复制环境中的事务，而 binlog 用于记录数据库的更改操作。</li><li>数据结构不同：GTID 是由服务器生成的唯一标识符，用于标识每个事务。而 binlog 是一种二进制格式的日志文件，记录了每个事务的更改操作。</li><li>使用方式不同：GTID 用于在复制拓扑中标识和跟踪每个事务的状态，从而更方便地进行数据同步和故障恢复。而 binlog 可以用于数据恢复、复制和备份等操作。</li></ul><p><mark>需要注意的是</mark>：使用 GTID 进行复制需要 MySQL 5.6 及以上版本的支持。在 MySQL 5.5 及以下版本中，只能使用 binlog 进行数据复制和备份。本次使用的是基于 GTID 的主从复制。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>MySQL 5.1.7 + 已经不支持 <code>“master-host”</code> 类似的参数。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503195146922.png" alt="image-20230503195146922"></p><p>因此 <code>docker-compose</code> 中就无法实现启动时主从同步（如下图 command 部分）：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230503195256475.png" alt="image-20230503195256475"></p><p>所以，通过 docker-compose 运行主从时，需进入从库进行配置！</p>]]></content>
    
    
    <summary type="html">基于 Docker 的 MySQL GTID 主从复制与测试。</summary>
    
    
    
    <category term="数据库" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="关系型数据库" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.rabcnops.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Redis 的 Protected Mode 解读</title>
    <link href="https://blog.rabcnops.cn/posts/articles/e42dd192.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/e42dd192.html</id>
    <published>2023-04-25T09:38:00.000Z</published>
    <updated>2023-04-25T09:38:30.658Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/redis-social-1200x628-1.webp" alt="redis-social-1200x628-1"></p><hr><p><strong>官方配置文件自带的注释：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Protected mode is a layer of security protection, <span class="keyword">in</span> order to avoid that Redis instances left open on the internet are accessed and exploited.</span><br><span class="line"></span><br><span class="line">When protected mode is on and <span class="keyword">if</span>:</span><br><span class="line"></span><br><span class="line">1) The server is not binding explicitly to a <span class="built_in">set</span> of addresses using the <span class="string">&quot;bind&quot;</span> directive.</span><br><span class="line">2) No password is configured.</span><br><span class="line"></span><br><span class="line">The server only accepts connections from clients connecting from the IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain sockets.</span><br><span class="line"></span><br><span class="line">By default protected mode is enabled. You should <span class="built_in">disable</span> it only <span class="keyword">if</span> you are sure you want clients from other hosts to connect to Redis even <span class="keyword">if</span> no authentication is configured, nor a specific <span class="built_in">set</span> of interfaces are explicitly listed using the <span class="string">&quot;bind&quot;</span> directive.</span><br></pre></td></tr></table></figure><p><strong>Google 的翻译结果：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">保护模式是一层安全保护，以避免在互联网上开放的 Redis 实例被访问和利用。</span><br><span class="line"></span><br><span class="line">当保护模式打开时，如果：</span><br><span class="line"></span><br><span class="line">1) 服务器未使用“<span class="built_in">bind</span>”指令显式绑定到一组地址。</span><br><span class="line">2) 没有配置密码。</span><br><span class="line"></span><br><span class="line">服务器只接受来自环回地址127.0.0.1（IPv4）和 ::1（IPv6）以及来自 Unix 域套接字的客户端的连接。</span><br><span class="line"></span><br><span class="line">默认情况下启用保护模式。仅当您确定希望来自其他主机的客户端连接到 Redis，即使没有配置身份验证，也没有使用“<span class="built_in">bind</span>”指令明确列出一组特定接口时，才应禁用它。</span><br></pre></td></tr></table></figure><p><mark>也就是说，会存在这两种情况：</mark></p><p><strong>1、当 <code>protected-mode yes</code></strong></p><ul><li><p><code># bind 192.168.56.120</code>     - - &gt;   注释</p></li><li><p><code># requirepass zhurs@123</code> - - &gt;   注释</p><blockquote><p>此时，redis 的保护模式生效；</p><p>客户端只能通过本地连接，即环回地址127.0.0.1（IPv4）和 ::1（IPv6）以及来自 Unix 域套接字的客户端的连接。</p></blockquote></li><li><p><code># bind 192.168.56.120</code>     - - &gt;   注释</p></li><li><p><code>requirepass zhurs@123</code></p><blockquote><p>此时，redis 的保护模式不生效（yes 或 no 都无影响）；</p><p>客户端可指定 <code>IP（192.168.56.120）+ 端口 + 密码</code>来连接 redis。</p></blockquote></li><li><p><code>bind 192.168.56.120</code></p></li><li><p><code># requirepass zhurs@123</code> - - &gt;   注释</p><blockquote><p>此时，redis 的保护模式不生效（yes 或 no 都无影响）；</p><p>客户端可指定 <code>IP（192.168.56.120）+ 端口</code>来连接 redis（此时无密码）。</p></blockquote></li><li><p><code>bind 192.168.56.120</code></p></li><li><p><code>requirepass zhurs@123</code></p><blockquote><p>此时，redis 的保护模式不生效（yes 或 no 都无影响）；</p><p>客户端可指定 <code>IP（192.168.56.120）+ 端口 + 密码</code>来连接 redis。</p></blockquote></li></ul><p><strong>2、当 <code>protected-mode no</code></strong></p><ul><li>无论上面的哪种场景，客户端都可以根据 <code>bind</code> 及 <code>requirepass</code> 实际参数来连接到 redis；</li><li>然后通过指定 <code>IP（192.168.56.120）</code> 或 <code>IP（192.168.56.120） + 端口</code>或<code>IP（192.168.56.120）+ 端口 + 密码</code>来连接 redis。</li></ul><p>—END</p>]]></content>
    
    
    <summary type="html">Redis 的 Protected Mode 解读。</summary>
    
    
    
    <category term="数据库" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="非关系型数据库" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="Redis" scheme="https://blog.rabcnops.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 6.0+ 的 ACL 常用操作指令</title>
    <link href="https://blog.rabcnops.cn/posts/articles/b4beeb2a.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/b4beeb2a.html</id>
    <published>2023-04-25T07:00:00.000Z</published>
    <updated>2023-04-25T07:39:25.295Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/Screenshot-2022-09-28-135602.png" alt="Redis Encryption"></p><hr><p>关于 redis 6.0+ 的 ACL 机制与基本配置在<a href="https://blog.rabcnops.cn/posts/articles/464f6e46.html">《Redis 6.0+ 的 ACL 机制》</a>一文中已经有提到，现在列举一些与 ACL 相关常用的指令。</p><p><strong>1、查看当前登录用户</strong></p><blockquote><p>如果你是这样登录的，默认就是 default 用户：</p><p>redis-cli -p 7001</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACL WHOAMI</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425144116317.png" alt="image-20230425144116317"></p><p><strong>2、创建用户</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl setuser rab</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425121649936.png" alt="image-20230425121649936"></p><blockquote><p>不设置密码与权限，则默认没有密码没有任何权限，且用户处于未激活状态（off），此时用户不可登录。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425121933381.png" alt="image-20230425121933381"></p><p><strong>3、启用（激活）用户</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl setuser rab on</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425122108069.png" alt="image-20230425122108069"></p><p><strong>4、给用户增加密码</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl setuser rab on &gt;Zhurs@2023!</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425143800401.png" alt="image-20230425143800401"></p><p><strong>5、查看命令分类</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl <span class="built_in">cat</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425152710868.png" alt="image-20230425152710868"></p><p>查看某个分类具体可以执行哪些命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl <span class="built_in">cat</span> slow</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425152907538.png" alt="image-20230425152907538"></p><p><strong>6、给用户设置权限</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acl setuser rab on &gt;Zhurs@2023! ~* +@all</span><br><span class="line"></span><br><span class="line"><span class="comment"># rab 用户对所有的 key 具备所有权限</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425144500649.png" alt="image-20230425144500649"></p><blockquote><p>查看用户权限</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl list</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425144615971.png" alt="image-20230425144615971"></p><blockquote><p>设置对指定 key 拥有指定的权限</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acl setuser rab on &gt;Zhurs@2023! ~dum* -@all +<span class="built_in">set</span> +get</span><br><span class="line"></span><br><span class="line"><span class="comment"># rab 用户对 dum 开头的 key 具备 set、get 权限</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425150207114.png" alt="image-20230425150207114"></p><p><strong>7、列出所有用户</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acl list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 入下图，共三个用户</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425150020060.png" alt="image-20230425150020060"></p><p><strong>8、删除用户</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl deluser rab</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425145717048.png" alt="image-20230425145717048"></p><blockquote><p>再次查看用户列表，发现用户已经被删除。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425145749678.png" alt="image-20230425145749678"></p><p><mark>以上的设置，如创建用户、给用户授权等操作都是在命令行（终端执行），那我们如何持久化这些设置呢？通过外部 aclfile 文件来存储这些信息，具体操作如下，aclfile 如何配置？在前面的文章中有具体演示。</mark></p><p>比如，先创建一个用户并授权：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acl setuser tom on &gt;Zhurs@2023! ~* +@all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可见，下图中有4个用户</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425150754669.png" alt="image-20230425150754669"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl sava</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425151005484.png" alt="image-20230425151005484"></p><p>最后去 aclfile 文件去查看是否有用户信息记录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> users.acl</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230425151203149.png" alt="image-20230425151203149"></p><p><strong>小结：</strong></p><ul><li>关于更多 ACL 命令，我们可以通过 ACL HELP 去查看；</li><li>acl 的持久化方式我们可以这样操作：<ul><li>登录集群，通过 acl save 指令来持久化；</li><li>直接在 aclfile 文件中添加用户相关信息（包括权限等）。</li></ul></li></ul><p>—END</p>]]></content>
    
    
    <summary type="html">Redis 6.0+ 的 ACL 常用操作指令。</summary>
    
    
    
    <category term="数据库" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="非关系型数据库" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="Redis" scheme="https://blog.rabcnops.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>如何理解 Linux 的 CPU 上下文切换？（连载）</title>
    <link href="https://blog.rabcnops.cn/posts/articles/fe7524c5.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/fe7524c5.html</id>
    <published>2023-04-24T10:20:00.000Z</published>
    <updated>2023-04-27T08:02:06.365Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/linux-protection-rings.jpg" alt="linux-protection-rings"></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇说到了 CPU 的上下文切换，以及各种场景下的上下文切换，如<code>进程上下文切换</code>、<code>线程上下文切换</code>、<code>中断上下文切换</code>。我们知道，过多的上下文切换，会把 CPU 时间消耗在寄存器、内核栈以及虚拟内存等数据的保存和恢复上，缩短进程真正运行的时间，造成系统性能大幅下降。那我们怎么查看操作系统上的 CPU 上下文切换情况呢？在这里，我们可以使用 vmstat 这个工具，来查询系统的上下文切换情况。</p><h2 id="一、查看系统上下文切换"><a href="#一、查看系统上下文切换" class="headerlink" title="一、查看系统上下文切换"></a>一、查看系统上下文切换</h2><h3 id="1-1-vmstat-基本使用"><a href="#1-1-vmstat-基本使用" class="headerlink" title="1.1 vmstat 基本使用"></a>1.1 vmstat 基本使用</h3><p>vmstat 是一个常用的系统性能分析工具，主要用来分析系统的内存使用情况，也常用来分析 CPU 上下文切换和中断的次数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vmstat 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没隔 5s 输出一组数据。</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230423141944922.png" alt="image-20230423141944922"></p><p>上图中的结果重点关注这几项：</p><ul><li><strong>cs（context switch）</strong>：每秒上下文切换的次数；</li><li><strong>in（interrupt）</strong>：每秒中断次数；</li><li><strong>r（running or runnable）</strong>：就绪队列长度（即正在运行和等待 CPU 的进程数）；</li><li><strong>b（blocked）</strong>：处于不可中断睡眠状态的进程数。</li></ul><p>可看见上图中第一条内容：上下文切换次数 cs 为 19 次，系统中断次数 in 为 12 次，就绪队列长度 r 为 1，不可中断睡眠进程数 b 为 0。</p><p>而上图中的结果只是给出了系统总体的上下文切换情况，如果想要每个进程的详细情况，可使用 <code>pidstat</code> 命令，如下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pidstat -w 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没隔 5s 输出一组数据。</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230423143205743.png" alt="image-20230423143205743"></p><p>上图中的结果重点关注这两项：</p><ul><li><p>cswch：每秒自愿上下文切换次数；</p><p>指进程无法获取所需资源，导致的上下文切换。比如 I&#x2F;O、内存等系统资源不足时，就会发生自愿上下文切换。</p></li><li><p>nvcswch：秒非自愿上下文切换次数。</p><p>指进程由于时间片已到（即分配到的 CPU 时间使用完了），被系统强制调度，进而发生的上下文切换。比如，大量进程竞争 CPU 时，就容易发生非自愿上下文切换。</p></li></ul><h3 id="1-2-模拟多线程调度切换"><a href="#1-2-模拟多线程调度切换" class="headerlink" title="1.2 模拟多线程调度切换"></a>1.2 模拟多线程调度切换</h3><p>1、环境</p><p>使用 sysbench 来模拟系统多线程调度切换的情况。sysbench 是一个多线程的基准测试工具，一般用来评估不同系统参数下的数据库负载情况。当然，在这次案例中，我们只把它当成一个异常进程来看，作用是模拟上下文切换过多的问题。</p><p>虚拟机配置：</p><ul><li>Linux：CentOS 7.9</li><li>配置：2C 4G</li><li>服务器安装软件：yum install -y sysbench sysstat</li></ul><p>2、开始实验</p><ul><li><p>在第一个终端运行 sysbench，模拟系统多线程调度的瓶颈</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以 10 个线程运行 5 分钟的基准测试，模拟多线程切换的问题</span></span><br><span class="line">sysbench --threads=10 --max-time=300 threads run</span><br></pre></td></tr></table></figure></li><li><p>在第二个终端运行 vmstat ，观察上下文切换情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每隔 1 秒输出 1 组数据</span></span><br><span class="line">vmstat 1</span><br></pre></td></tr></table></figure><blockquote><p>可见 cs 上下文切换瞬间上升到 329 万。</p><p><code>r</code>就绪队列：平均达到了 7~8，远远超过了系统 CPU 的个数 2，所以肯定会有大量的 CPU 竞争；</p><p><code>us（user）</code>和 <code>sy（system）</code>CPU使用率：几乎达到 100%，且明显看到时系统 CPU 使用率占大头（高达 86% 以上），说明 CPU 主要是被内核占用了；</p><p><code>in</code> 中断次数：中断次数也上升到了 5 万左右，说明中断处理也是个潜在的问题。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230424170358753.png" alt="image-20230424170358753"></p><p>综合这几个指标，我们可以知道，系统的就绪队列过长，也就是正在运行和等待 CPU 的进程数过多，导致了大量的上下文切换，而上下文切换又导致了系统 CPU 的占用率升高。</p></li><li><p>在第三个终端再用 pidstat 来看到底是什么进程导致了这些问题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每隔 1 秒输出 1 组数据</span></span><br><span class="line"><span class="comment"># -w 参数表示输出进程切换指标，而 -u 参数则表示输出 CPU 使用指标</span></span><br><span class="line">pidstat -w -u 1</span><br></pre></td></tr></table></figure><p>下图中可见，sysbench 这个进程的 CPU 使用率已经高达 190%。但 CPU 上下文切换与上图进行对比，你会发现上图中通过 vmstat 查询的 CPU 上下文切换达到了 300 多万，而下图中通过 pidstat 查询的 CPU 自愿上下文切换才几十（20 多），为什么会相差这么大呢？</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230424172801619.png" alt="image-20230424172801619"></p><p>实际上是因为 pidstat 默认查看的是进程的相关指标，如果你要显示线程的相关指标数据，你需要添加 <code>-t</code> 选项，再次测试一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidstat -wt 1</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230424174500386.png" alt="image-20230424174500386"></p><p>可见，这才是 sysbench 进程的线程的 CPU 上下文切换指标数据，与 vmstat 看到的数据基本吻合。</p><p>此时，我们已经找出了导致 CPU 大量上下文切换的进程，那除此之外，还可能有什么系统性能影响因素吗？显然是还有的，在第二个终端的时候可看到，除了 CPU 上下文飙升之外，中断也是骤然飙升，因此，还有中断问题可能会影响系统性能。</p><p>那是什么类型的中断会真么高呢？前面几个命令都没有输出详细的中断信息，因此我们需要参考系统中的 <code>/proc/interrupts</code> 文件，该文件用于内核空间与用户空间之间的通信使用。因此，我们继续来观察该文件的变化情况：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -d <span class="built_in">cat</span> /proc/interrupts</span><br></pre></td></tr></table></figure><blockquote><p>在压测下，可以发现，变化速度最快的是<code>重调度中断(RES)</code>，表示唤醒空闲状态的 <code>CPU</code> 来调度新的任务运行。这是多处理器系统(SMP)中，调度器用来分散任务队列到不同 <code>CPU</code> 的机制，通常也被称为<code>处理器间中断</code>。根本原因还是因为过多任务的调度问题，跟前边分析结果是一致的。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230424180408568.png" alt="image-20230424180408568"></p></li></ul><h2 id="二、每秒上下文切换多少次算正常"><a href="#二、每秒上下文切换多少次算正常" class="headerlink" title="二、每秒上下文切换多少次算正常"></a>二、每秒上下文切换多少次算正常</h2><p><strong>这个数值其实取决于系统本身的 CPU 性能</strong>。如果系统的上下文切换次数比较稳定，那么从数百到一万以内，都应该算是正常的。但当上下文切换次数超过一万次，或者切换次数出现数量级的增长时，就很可能已经出现了性能问题。</p><p>这时，你还需要根据上下文切换的类型，再做具体分析。比方说：</p><ul><li>自愿上下文切换变多了，说明进程都在等待资源，有可能发生了 I&#x2F;O 等其他问题；</li><li>非自愿上下文切换变多了，说明进程都在被强制调度，也就是都在争抢 CPU，说明 CPU 的确成了瓶颈；</li><li>中断次数变多了，说明 CPU 被中断处理程序占用，还需要通过查看 &#x2F;proc&#x2F;interrupts 文件来分析具体的中断类型。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于 CPU 上下文切换，我们应该灵活使用相关的命令工具，如 <strong>mpstat、vmstat 、 pidstat</strong>等命令，关键是要明白每个工具输出的指标数据代表的是什么，会对系统有什么影响。</p>]]></content>
    
    
    <summary type="html">如何理解 Linux 的 CPU 上下文切换（连载）。</summary>
    
    
    
    <category term="优化篇" scheme="https://blog.rabcnops.cn/categories/%E4%BC%98%E5%8C%96%E7%AF%87/"/>
    
    <category term="Linux 系统" scheme="https://blog.rabcnops.cn/categories/%E4%BC%98%E5%8C%96%E7%AF%87/Linux-%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="CPU" scheme="https://blog.rabcnops.cn/categories/%E4%BC%98%E5%8C%96%E7%AF%87/Linux-%E7%B3%BB%E7%BB%9F/CPU/"/>
    
    
    <category term="优化" scheme="https://blog.rabcnops.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>如何理解 Linux 的 CPU 上下文切换？</title>
    <link href="https://blog.rabcnops.cn/posts/articles/371209c6.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/371209c6.html</id>
    <published>2023-04-23T04:12:00.000Z</published>
    <updated>2023-04-23T09:53:28.801Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/linux-protection-rings.jpg#pic_center" alt="linux-protection-rings"></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们说，Linux 是一个多用户多任务的操作系统，前面说到理想情况下如果每个 CPU 都执行着一个进程，那我们说 CPU 的使用率刚刚完全被利用（无 CPU 浪费），如果进程数超过 CPU  个数，可能会出现 CPU 使用率或系统平均负载升高的问题。</p><p>实际上，Linux 操作系统支持远大于 CPU 数量的任务（进程）同时运行，而这些进程实际上并不是真正的在同时运行，就好比在你的 windows 上同时运行多个软件（如听歌的同时在玩游戏），宏观上貌似是同时运行的，但实际上是轮流运行的。之所以会有这样的感觉，是因为操作系统在短时间内将 CPU 轮流分配给它们，造成多任务同时运行的错觉。此时就会设计到<code>并发</code>与<code>并行</code>的基本概念（这里指的就是<code>并发</code>），大家可以自行 Google 它们之间的区别，这里不作为重点。</p><p>此时，你会想，进程在竞争 CPU 时并没有真正运行，那为什么会导致系统负载升高呢？实际上就是因为 CPU 上下文切换导致。</p><h2 id="一、什么是-CPU-上下文？"><a href="#一、什么是-CPU-上下文？" class="headerlink" title="一、什么是 CPU 上下文？"></a>一、什么是 CPU 上下文？</h2><p>首先，在每个任务（进程）运行之前，CPU 都需要知道任务从哪里加载、又从哪里开始运行，也就是说，需要操作系统事先帮它设置好 <code>CPU 寄存器和程序计数器</code>。</p><ul><li><strong>CPU 寄存器</strong>：CPU 内置的容量小、但速度快的内存；</li><li><strong>程序计数器</strong>：用来存储 CPU 正在执行的指令位置或即将执行的下一条指令位置。</li></ul><p>这两项都是 CPU 在运行任何进程前，必须依赖的环境，因此我们也称之为 <code>CPU 上下文</code>。</p><h2 id="二、什么是-CPU-上下文切换？"><a href="#二、什么是-CPU-上下文切换？" class="headerlink" title="二、什么是 CPU 上下文切换？"></a>二、什么是 CPU 上下文切换？</h2><p>通过上面的 CPU 上下文概念，我想应该很好理解<code>CPU 上下文切换</code>的概念。</p><p>所谓的 <code>CPU 上下文切换</code>，就是先把前一个任务的 <code>CPU</code> 上下文保存起来，然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳到程序计数器所指的新位置，运行新任务。而前面这些保存下来的上下文，会存储在系统内核中，并在这些任务被重新调度执行时再次加载进来。这样就能保证任务原来的状态不受影响，让任务看起来还是连续运行。</p><p>此时，根据任务的不同，<code>CPU</code> 的上下文切换可以分为几个不同的场景：<code>进程上下文切换</code>、<code>线程上下文切换</code>、<code>中断上下文切换</code>。</p><h3 id="2-1-进程上下文切换"><a href="#2-1-进程上下文切换" class="headerlink" title="2.1 进程上下文切换"></a>2.1 进程上下文切换</h3><p>Linux 按照特权等级，把进程的运行空间分为内核空间和用户空间，分别对应着下图中， CPU 特权等级的 Ring 0 和 Ring 3。</p><ul><li>内核空间（Ring 0）具有最高权限，可以直接访问所有资源；</li><li>用户空间（Ring 3）只能访问受限资源，不能直接访问内存等硬件设备，必须通过系统调用陷入到内核中，才能访问这些特权资源。</li></ul><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/4d3f622f272c49132ecb9760310ce1a7.png" alt="img"></p><p>也就是说，进程既可以在用户空间运行，又可以在内核空间中运行。进程在用户空间运行时，被称为进程的用户态，而陷入内核空间的时候，被称为进程的内核态。从用户态到内核态的转变，需要通过<strong>系统调用</strong>来完成。比如，当我们查看文件内容时，就需要多次系统调用来完成：首先调用 open() 打开文件，然后调用 read() 读取文件内容，并调用 write() 将内容写到标准输出，最后再调用 close() 关闭文件。</p><p>那么，系统调用的过程有没有发生 CPU 上下文的切换呢？答案自然是肯定的。</p><p>CPU 寄存器里原来用户态的指令位置，需要先保存起来。接着，为了执行内核态代码，CPU 寄存器需要更新为内核态指令的新位置。最后才是跳转到内核态运行内核任务。</p><p>而系统调用结束后，CPU 寄存器需要<strong>恢复</strong>原来保存的用户态，然后再切换到用户空间，继续运行进程。所以，一次系统调用的过程，其实是发生了两次 CPU 上下文切换。简单理解系统调用时发生的两次 CPU 上下文切换就是：</p><ul><li><code>进程1上下文（用户态）</code> - - 1次切换 - - &gt; <code>进程1上下文（内核态）</code> - - 2次切换 - - &gt; <code>进程1上下文（用户态）</code></li></ul><p>不过，需要注意的是，系统调用过程中，并不会涉及到虚拟内存等进程用户态的资源，也不会切换进程。这跟我们通常所说的进程上下文切换是不一样的：</p><ul><li>进程上下文切换，是指从一个进程切换到另一个进程运行。</li><li>而系统调用过程中一直是同一个进程在运行。</li></ul><p>需要注意的是：<strong>系统调用过程通常称为特权模式切换，而不是上下文切换</strong>。而实际上，系统调用过程中，CPU 的上下文切换还是无法避免的。</p><p><strong>那么，进程上下文切换跟系统调用又有什么区别呢？</strong></p><p>首先，你需要知道，进程是由内核来管理和调度的，进程的切换只能发生在内核态。所以，进程的上下文不仅包括了虚拟内存、栈、全局变量等用户空间的资源，还包括了内核堆栈、寄存器等内核空间的状态。</p><p>因此，进程的上下文切换就比系统调用时多了一步：在保存当前进程的内核状态和 CPU 寄存器之前，需要先把该进程的虚拟内存、栈等保存下来；而加载了下一进程的内核态后，还需要刷新进程的虚拟内存和用户栈。</p><p>如下图所示，保存上下文和恢复上下文的过程并不是“免费”的，需要内核在 CPU 上运行才能完成。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/395666667d77e718da63261be478a96b.png" alt="img"></p><p>根据<a href="https://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html"> Tsuna </a>的测试报告，每次上下文切换都需要几十纳秒到数微秒的 CPU 时间。这个时间还是相当可观的，特别是在进程上下文切换次数较多的情况下，很容易导致 CPU 将大量时间耗费在寄存器、内核栈以及虚拟内存等资源的保存和恢复上，进而大大缩短了真正运行进程的时间。这也正是上一节中我们所讲的，导致平均负载升高的一个重要因素。</p><p>另外，我们知道， Linux 通过 TLB（Translation Lookaside Buffer）来管理虚拟内存到物理内存的映射关系。当虚拟内存更新后，TLB 也需要刷新，内存的访问也会随之变慢。特别是在多处理器系统上，缓存是被多个处理器共享的，刷新缓存不仅会影响当前处理器的进程，还会影响共享缓存的其他处理器的进程。</p><p>知道了进程上下文切换潜在的性能问题后，我们再来看，究竟什么时候会切换进程上下文。</p><p>显然，进程切换时才需要切换上下文，换句话说，只有在进程调度的时候，才需要切换上下文。Linux 为每个 CPU 都维护了一个就绪队列，将活跃进程（即正在运行和正在等待 CPU 的进程）按照优先级和等待 CPU 的时间排序，然后选择最需要 CPU 的进程，也就是优先级最高和等待 CPU 时间最长的进程来运行。</p><p><strong>那么，进程在什么时候才会被调度到 CPU 上运行呢？</strong></p><p>最容易想到的一个时机，就是进程执行完终止了，它之前使用的 CPU 会释放出来，这个时候再从就绪队列里，拿一个新的进程过来运行。其实还有很多其他场景，也会触发进程调度，在这里我给你逐个梳理下。</p><ul><li><p>其一：为了保证所有进程可以得到公平调度，CPU 时间被划分为一段段的时间片，这些时间片再被轮流分配给各个进程。这样，当某个进程的时间片耗尽了，就会被系统挂起，切换到其它正在等待 CPU 的进程运行。</p></li><li><p>其二：进程在系统资源不足（比如内存不足）时，要等到资源满足后才可以运行，这个时候进程也会被挂起，并由系统调度其他进程运行。</p></li><li><p>其三：当进程通过睡眠函数 sleep 这样的方法将自己主动挂起时，自然也会重新调度。</p></li><li><p>其四：当有优先级更高的进程运行时，为了保证高优先级进程的运行，当前进程会被挂起，由高优先级进程来运行。</p></li><li><p>最后一个：发生硬件中断时，CPU 上的进程会被中断挂起，转而执行内核中的中断服务程序。</p></li></ul><p>了解这几个场景是非常有必要的，因为一旦出现上下文切换的性能问题，它们就是幕后凶手。</p><h3 id="2-2-线程上下文切换"><a href="#2-2-线程上下文切换" class="headerlink" title="2.2 线程上下文切换"></a>2.2 线程上下文切换</h3><p>说完了进程的上下文切换，我们再来看看线程相关的问题。</p><p>线程与进程最大的区别在于，<strong>线程是调度的基本单位，而进程则是资源拥有的基本单位</strong>。说白了，所谓内核中的任务调度，实际上的调度对象是线程；而进程只是给线程提供了虚拟内存、全局变量等资源。所以，对于线程和进程，我们可以这么理解：</p><ul><li>当进程只有一个线程时，可以认为进程就等于线程。</li><li>当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局变量等资源。这些资源在上下文切换时是不需要修改的。</li><li>另外，线程也有自己的私有数据，比如栈和寄存器等，这些在上下文切换时也是需要保存的。</li></ul><p>这么一来，线程的上下文切换其实就可以分为两种情况：</p><ul><li><p>第一种：前后两个线程属于不同进程。此时，因为资源不共享，所以切换过程就跟进程上下文切换是一样。</p></li><li><p>第二种：前后两个线程属于同一个进程。此时，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据。</p></li></ul><p>到这里你应该也发现了，虽然同为上下文切换，但同进程内的线程切换，要比多进程间的切换消耗更少的资源，而这也正是多线程代替多进程的一个优势。</p><h3 id="2-3-中断上下文切换"><a href="#2-3-中断上下文切换" class="headerlink" title="2.3 中断上下文切换"></a>2.3 中断上下文切换</h3><p>除了前面两种上下文切换，还有一个场景也会切换 CPU 上下文，那就是中断。</p><p>为了快速响应硬件的事件，<strong>中断处理会打断进程的正常调度和执行</strong>，转而调用中断处理程序，响应设备事件。而在打断其他进程时，就需要将进程当前的状态保存下来，这样在中断结束后，进程仍然可以从原来的状态恢复运行。</p><p>跟进程上下文不同，中断上下文切换并不涉及到进程的用户态。所以，即便中断过程打断了一个正处在用户态的进程，也不需要保存和恢复这个进程的虚拟内存、全局变量等用户态资源。中断上下文，其实只包括内核态中断服务程序执行所必需的状态，包括 CPU 寄存器、内核堆栈、硬件中断参数等。</p><p><strong>对同一个 CPU 来说，中断处理比进程拥有更高的优先级</strong>，所以中断上下文切换并不会与进程上下文切换同时发生。同样道理，由于中断会打断正常进程的调度和执行，所以大部分中断处理程序都短小精悍，以便尽可能快的执行结束。</p><p>另外，跟进程上下文切换一样，中断上下文切换也需要消耗 CPU，切换次数过多也会耗费大量的 CPU，甚至严重降低系统的整体性能。所以，当你发现中断次数过多时，就需要注意去排查它是否会给你的系统带来严重的性能问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>CPU 上下文切换，是保证 Linux 系统正常工作的核心功能之一，一般情况下不需要我们特别关注；</li><li>但过多的上下文切换，会把 CPU 时间消耗在寄存器、内核栈以及虚拟内存等数据的保存和恢复上，从而缩短进程真正运行的时间，导致系统的整体性能大幅下降。</li></ul>]]></content>
    
    
    <summary type="html">如何理解 Linux 的 CPU 上下文切换。</summary>
    
    
    
    <category term="优化篇" scheme="https://blog.rabcnops.cn/categories/%E4%BC%98%E5%8C%96%E7%AF%87/"/>
    
    <category term="Linux 系统" scheme="https://blog.rabcnops.cn/categories/%E4%BC%98%E5%8C%96%E7%AF%87/Linux-%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="CPU" scheme="https://blog.rabcnops.cn/categories/%E4%BC%98%E5%8C%96%E7%AF%87/Linux-%E7%B3%BB%E7%BB%9F/CPU/"/>
    
    
    <category term="优化" scheme="https://blog.rabcnops.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>你真理解 Linux 系统的平均负载吗？</title>
    <link href="https://blog.rabcnops.cn/posts/articles/f026fcb9.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/f026fcb9.html</id>
    <published>2023-04-20T09:12:00.000Z</published>
    <updated>2023-04-23T09:53:35.635Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420135405814.png" alt="image-20230420135405814"></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们经常用到 top、uptime 来查看系统的平均负载，那下图的这三个值的含义你真正理解了吗？</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420133044303.png" alt="image-20230420133044303"></p><p><strong>平均负载是 CPU 使用率吗？</strong></p><p>显然不是，平均负载指的是<code>单位时间内，系统处于“可运行状态”和“不可中断状态”的平均进程数</code>，即<code>平均活跃进程数</code>，它和 CPU 的使用率并没有直接关系。</p><p><strong>什么是可运行状态？什么又是不可中断状态？</strong></p><ul><li><p><code>可运行状态</code>：正在使用 CPU 或正在等待 CPU 的调度的进程（如 R 状态的进程 - - Running&#x2F;Runnable）；</p></li><li><p><code>不可中断状态</code>：处于系统内核态关键流程中的进程，且这些流程是不可打断的（如 D 状态的进程）。</p><blockquote><p>比如：向磁盘写入数据，这个过程在未得到磁盘响应前一般是不允许中断的，否则将导致磁盘数据与进程数据不一致的问题。因此，不可中断状态实际上是系统对进程和硬件设备的一种保护机制。</p></blockquote></li></ul><p><strong>因此，理想情况下就是每个 CPU 上都刚好运行着一个进程，这样每个 CPU 都得到了充分的利用。</strong></p><p><strong>当平均负载为 2 时，意味着什么呢？</strong></p><ul><li>在只有 2 个 CPU 的系统上，意味着所有的 CPU 都刚好被完全占用；</li><li>在 4 个 CPU 的系统上，意味着 CPU 有 50% 的空闲；</li><li>而在只有 1 个 CPU 的系统上，则意味着有一半的进程竞争不到 CPU。</li></ul><h2 id="一、如何判断系统是否过载？"><a href="#一、如何判断系统是否过载？" class="headerlink" title="一、如何判断系统是否过载？"></a>一、如何判断系统是否过载？</h2><p>上面我们大体了解了什么是平均负载，那在实际工作中，如何判定某台服务器的平均负载过高呢？上面说到可通过 <code>top</code>、<code>uptime</code> 等命令来查看 Linux 系统的负载情况。</p><p>理想情况下，平均负载等于 CPU 个数，因此，判断负载是否过高，首先要知道你当前系统有几个 CPU，可通过 <code>top</code> 命令 + 快捷键 <code>1</code> 查看 CPU  个数：如下图，我当前的 Linux 系统只有 1 个 CPU（%Cpu0）。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420144125852.png" alt="image-20230420144125852"></p><p>或通过 shell 命令查看也是可以的：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;model name&#x27;</span> /proc/cpuinfo | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420144308842.png" alt="image-20230420144308842"></p><p>有了 CPU 个数，我们就可以判断：当平均负载 &gt; CPU 个数时，系统就已经过载。在 Linux 中，系统给我们提供了三个值，这三个值分别表示过去 1 分钟、5 分钟、15 分钟的系统平均负载。那我们主要看哪一个值呢？答案是都要看，这三个值是作为变化趋势的参考，仅凭一个值是很难准确判断的。</p><ul><li>如果 1 分钟、5 分钟、15 分钟的三个值基本相同（或者相差不大），那就说明系统负载很稳定；</li><li>但如果 1 分钟的值远小于 15 分钟的值，就说明系统最近 1 分钟的负载在减少，而过去 15 分钟内却有很大的负载；</li><li>反过来，如果 1 分钟的值远大于 15 分钟的值，就说明近 1 分钟的负载在增加，这种增加可能是临时性的（因为就短短的 1 分钟），也有持续增加或逐步减少的可能，因此这种情况需要持续观察。</li></ul><p>再举个例子：假设在单个 CPU 的系统上有 1.73，0.60，7.98 的负载，那就说明过去 1 分钟内系统有 73% 的过载、15 分钟内系统有 698% 的超载，但是从整体来看，系统的负载在降低。</p><p><strong>那么，在实际生产环境中，平均负载多高时，需要我们重点关注呢？</strong></p><p>一般，<strong>当平均负载高于 CPU 数量 70% 的时候</strong>，就应该分析排查负载高的问题了。因为负载过高，就可能导致进程响应变慢，进而影响服务的正常功能。</p><p><mark>因此，对于系统平均负载是否过载的问题，我们最好是通过 Zabbix 或 Prometheus 等监控工具监控起来，这样便于观察系统平均负载在某个时间段的变化趋势。</mark></p><h2 id="二、平均负载与-CPU-使用率关联"><a href="#二、平均负载与-CPU-使用率关联" class="headerlink" title="二、平均负载与 CPU 使用率关联"></a>二、平均负载与 CPU 使用率关联</h2><p>前面说到，平均负载与 CPU 使用率并不是同一个 <code>“东西”</code>，是有一定的区别和联系的。一般在实际生产中会遇到这三种情况：CPU 使用率高系统平均负载低、CPU 使用率低系统平均负载高、CPU 使用率与系统平均负载都高。</p><p>其实，这是在特定场景下产生的不同现象：</p><ul><li>对于 CPU 密集型进程而言：使用大量 CPU 会导致平均负载过高。此时就是 CPU 使用率高平均负载也会过高的情况；</li><li>对于 I&#x2F;O 密集型进程而言：等待 I&#x2F;O 会导致平均负载过高，但 CPU 不一定很高。此时就是 CPU 使用率低平均负载过高的情况；</li><li>大量等待 CPU 的进程调度也会导致平均负载升高，此时的 CPU 使用率也会比较高。</li></ul><p><strong>什么是 CPU 密集型？什么又是 I&#x2F;O 密集型？</strong></p><blockquote><p>参考：<a href="https://blog.csdn.net/youanyyou/article/details/78990156">什么是CPU密集型、IO密集型？</a></p></blockquote><ul><li><p><code>CPU 密集型（CPU-bound）</code>：也叫计算密集型，指的是系统的硬盘、内存性能相对CPU要好很多，此时，系统运作大部分的状况是 CPU Loading 100%，CPU 要读&#x2F;写I&#x2F;O(硬盘&#x2F;内存)，I&#x2F;O 在很短的时间就可以完成，而 CPU 还有许多运算要处理，CPU Loading 很高。</p><p>在多重程序系统中，大部份时间用来做计算、逻辑判断等 CPU 动作的程序称之 CPU bound。例如一个计算圆周率至小数点一千位以下的程序，在执行的过程当中绝大部份时间用在三角函数和开根号的计算，便是属于 CPU bound 的程序。</p><p>CPU bound 的程序一般而言 CPU 占用率相当高。这可能是因为任务本身不太需要访问 I&#x2F;O 设备，也可能是因为程序是多线程实现因此屏蔽掉了等待 I&#x2F;O 的时间。</p></li><li><p><code>IO 密集型（I/O bound）</code>：IO 密集型指的是系统的 CPU 性能相对硬盘、内存要好很多，此时，系统运作大部分的状况是 CPU 在等 I&#x2F;O (硬盘&#x2F;内存) 的读&#x2F;写操作，此时 CPU Loading 并不高。</p><p>I&#x2F;O bound 的程序一般在达到性能极限时，CPU 占用率仍然较低。这可能是因为任务本身需要大量 I&#x2F;O 操作，而 Pipeline 做得不是很好，没有充分利用处理器能力。</p></li></ul><h2 id="三、案例分析"><a href="#三、案例分析" class="headerlink" title="三、案例分析"></a>三、案例分析</h2><p>准备实现所需环境：</p><ul><li>Linux 系统：CentOS 7.9 2C&#x2F;4G</li><li>压测工具：stress</li><li>性能分析工具：sysstat（包含 mpstat、pidstat 等工具）</li></ul><p>安装相关工具：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y stress sysstat</span><br></pre></td></tr></table></figure><h3 id="3-1-CPU-密集型进程"><a href="#3-1-CPU-密集型进程" class="headerlink" title="3.1 CPU 密集型进程"></a>3.1 CPU 密集型进程</h3><p>1、终端1 - - 压测：模拟一个进程 CPU 使用率 100% 的场景</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stress --cpu 1 --<span class="built_in">timeout</span> 600</span><br></pre></td></tr></table></figure><p>2、终端2 - - 查看负载：运行 uptime 查看系统平均负载变化情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">watch -d <span class="built_in">uptime</span></span><br><span class="line"><span class="comment"># -d 参数表示高亮显示变化的区域</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420162317536.png" alt="image-20230420162317536"></p><p>3、终端3 - - 查看 CPU 使用率：运行 mpstat 查看 CPU 使用率的变化情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mpstat -P ALL 5</span><br><span class="line"><span class="comment"># -P ALL 表示监控所有 CPU，后面数字 5 表示间隔 5 秒后输出一组数据</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420160456532.png" alt="image-20230420160456532"></p><p>输出结果可见：%Cpu1 的使用率基本上也是 100% 了。</p><p>那么，到底是哪个进程导致了 CPU 使用率为 100% 呢？可以使用 <code>pidstat</code> 来查询：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pidstat -u 5 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 间隔 5 秒后输出一组数据</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420161018814.png" alt="image-20230420161018814"></p><p>Command 字段就是对应的执行程序。</p><p>当然，方法有很多，你也可以通过 <code>top + C + P</code> 来查看占用 CPU 的程序，如下图：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420161231638.png" alt="image-20230420161231638"></p><h3 id="3-2-I-x2F-O-密集型进程"><a href="#3-2-I-x2F-O-密集型进程" class="headerlink" title="3.2 I&#x2F;O 密集型进程"></a>3.2 I&#x2F;O 密集型进程</h3><p>1、同理进行 I&#x2F;O 测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stress -i 1 --<span class="built_in">timeout</span> 600</span><br></pre></td></tr></table></figure><p>2、uptime 查看系统平均负载变化情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -d <span class="built_in">uptime</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420162638463.png" alt="image-20230420162638463"></p><p>3、mpstat 查看 CPU 使用率的变化情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mpstat -P ALL 5</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420162908212.png" alt="image-20230420162908212"></p><p>可见，其中一个 CPU 的系统 CPU 使用率升高，但并不是因为 <code>iowait</code>  导致（但实际场景中一般会因为 IO 等待导致），说明系统 IO 还未出现瓶颈。</p><p>查看是由那个进程导致的系统层 CPU 使用率过高的方法同上！</p><h3 id="3-3-大量进程的场景"><a href="#3-3-大量进程的场景" class="headerlink" title="3.3 大量进程的场景"></a>3.3 大量进程的场景</h3><p>当系统中运行进程超出 CPU 运行能力时，就会出现等待 CPU 的进程。</p><p>1、模拟 8 个进程使用 CPU 的场景</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stress --cpu 8 --<span class="built_in">timeout</span> 600</span><br></pre></td></tr></table></figure><p>2、查看系统平均负载</p><blockquote><p>由于系统只有 2 个 CPU，明显比 8 个进程要少得多，因而，系统的 CPU 处于严重过载状态，平均负载高达 7.23。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -d <span class="built_in">uptime</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420165023013.png" alt="image-20230420165023013"></p><p>3、查看 CPU 使用率的变化情况</p><blockquote><p>这两个 CPU 几乎都跑满了。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420165117693.png" alt="image-20230420165117693"></p><p>查看导致 CPU 过高的进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidstat -u 5 1</span><br></pre></td></tr></table></figure><blockquote><p>这 8 个进程几乎竞争到了相同的 CPU，整体算下来严重过载了。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420165216815.png" alt="image-20230420165216815"></p><p>由于 CentOS 没有 iowait 字段，我换到 ubuntu 去看看效果：</p><blockquote><p>Linux：Ubuntu 20 1C 2G</p><p>可见，8 个进程在争抢 1 个 CPU，每个进程等待 CPU 的时间（也就是代码块中的 %wait 列）高达 87%。这些超出 CPU 计算能力的进程，最终导致 CPU 过载。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidstat -u 5 1</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230420170058200.png" alt="image-20230420170058200"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>平均负载高有可能是 CPU 密集型进程导致的；</li><li>平均负载高并不一定代表 CPU 使用率高，还有可能是 I&#x2F;O 更繁忙了；</li><li>当发现负载高的时候，你可以使用 mpstat、pidstat 等工具，辅助分析负载的来源。</li></ul>]]></content>
    
    
    <summary type="html">Linux 系统平均负载解读。</summary>
    
    
    
    <category term="优化篇" scheme="https://blog.rabcnops.cn/categories/%E4%BC%98%E5%8C%96%E7%AF%87/"/>
    
    <category term="Linux 系统" scheme="https://blog.rabcnops.cn/categories/%E4%BC%98%E5%8C%96%E7%AF%87/Linux-%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="CPU" scheme="https://blog.rabcnops.cn/categories/%E4%BC%98%E5%8C%96%E7%AF%87/Linux-%E7%B3%BB%E7%BB%9F/CPU/"/>
    
    
    <category term="优化" scheme="https://blog.rabcnops.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Redis 6.0+ 的 ACL 机制</title>
    <link href="https://blog.rabcnops.cn/posts/articles/464f6e46.html"/>
    <id>https://blog.rabcnops.cn/posts/articles/464f6e46.html</id>
    <published>2023-04-19T14:00:00.000Z</published>
    <updated>2023-04-25T07:38:58.699Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/Screenshot-2022-09-28-135602.png" alt="Redis Encryption"></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis 6.0+ 引入了 ACL 机制，类似 MySQL 一样全部权限管理，Redis 6.0 之前默认为 default 用户登录，该用户具备 root 权限，在生产中实际上是不安全的，因为只要具备 Redis 实例的密码，就可以以 root 身份对 Redis 进行操作。</p><p>因此 Redis 6.0+ 引入了 ACL 机制，ACL是使用 DSL（domain specific language）定义的，该 DSL 描述了给定用户能够执行的操作。那引用 ACL 的目的是什么呢？</p><ul><li><strong>访问安全性</strong>：ACL 使不受信任的客户端无法访问，而受信任的客户端仅具有对数据库的最低访问级别才能执行所需的工作。</li><li><strong>操作安全性</strong>：以防止由于软件错误或人为错误而导致进程或人员访问 Redis，从而损坏数据或配置。例如，没有必要让其他人员从 Redis 调用 <code>FLUSHALL</code> 命令。</li></ul><h2 id="一、安装-Redis-服务"><a href="#一、安装-Redis-服务" class="headerlink" title="一、安装 Redis 服务"></a>一、安装 Redis 服务</h2><p><strong>1、安装 Docker</strong></p><p><strong>2、安装 Redis</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=redis-server-6.0 -p 16379:6379 redis:6.0-alpine</span><br></pre></td></tr></table></figure><p><strong>3、登录验证</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis-server-6.0 redis-cli</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418163454677.png" alt="image-20230418163454677"></p><h2 id="二、创建-ACL-用户"><a href="#二、创建-ACL-用户" class="headerlink" title="二、创建 ACL 用户"></a>二、创建 ACL 用户</h2><p><strong>1、创建用户并设置明文密码</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER rab on &gt;zhurs@123</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;&gt;&#x27;符号后是明文密码</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418162643165.png" alt="image-20230418162643165"></p><p><strong>2、创建用户并设置 Hash 密码</strong></p><ul><li><p>获取 Hash 值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;zhurs@123&quot;</span> | shasum -a 256</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418162937832.png" alt="image-20230418162937832"></p><blockquote><p>随机获取 Hash 值密码</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419151021926.png" alt="image-20230419151021926"></p></li><li><p>创建用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER ops on <span class="comment">#a9db6465cac424cb70a81fae6f42cd63b7e2292b45795ea88695e9da2baea040</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;#&#x27;符号后是Hash值</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418163257814.png" alt="image-20230418163257814"></p></li></ul><p><strong>3、查看所有用户</strong></p><blockquote><p>会发现，不管是明文还是Hash设置密码，Redis 最终存储都是以 Hash 值存储密码。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418163600209.png" alt="image-20230418163600209"></p><p>这些用户是没有权限的，如果你要在创建用户时添加权限，你可以：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER rab on &gt;zhurs@123 ~* +@all</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;~*&#x27; 表示该用户可以访问所有key</span></span><br><span class="line"><span class="comment"># &#x27;+@all&#x27; 表示拥有这些key的所有权   + 表示授权  - 表示销权</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>user</td><td>用户</td></tr><tr><td>default</td><td>用户名（default为默认用户）- - 也可是自定义用户（redis 6.0+）</td></tr><tr><td>on</td><td>是否启用该用户（on 启用，off 禁用）</td></tr><tr><td>#…</td><td>用户密码（#… 密文形式显示，oppass 表示无密码）</td></tr><tr><td>~*</td><td>用户可访问的 key（正则匹配 - -  <code>~*</code> 表示用户可访问所有 key）</td></tr><tr><td>+@</td><td>用户权限，+ 代表授权，- 代表销权；@ 后为权限类型，+@all 表示用户对 redis 具备所有权限</td></tr></tbody></table><p><strong>4、查看指定用户信息</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACL GETUSER rab</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418175412239.png" alt="image-20230418175412239"></p><p><strong>5、用户登录认证</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6.0-</span></span><br><span class="line">AUTH &lt;密码&gt;     <span class="comment"># 这种方式的用户为default用户，相当于MySQL的root用户</span></span><br><span class="line"><span class="comment"># 6.0+</span></span><br><span class="line">AUTH &lt;用户&gt; &lt;密码&gt;</span><br><span class="line"></span><br><span class="line">AUTH rab zhurs@123</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418175604891.png" alt="image-20230418175604891"></p><p>Windows 客户端工具登录：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418174020712.png" alt="image-20230418174020712"></p><p>正常连接：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418174311679.png" alt="image-20230418174311679"></p><h2 id="三、用户密码管理"><a href="#三、用户密码管理" class="headerlink" title="三、用户密码管理"></a>三、用户密码管理</h2><h3 id="3-1-删除密码"><a href="#3-1-删除密码" class="headerlink" title="3.1 删除密码"></a>3.1 删除密码</h3><p><strong>1、通过 <code>&lt;</code> 与 <code>!</code> 删除用户密码</strong></p><blockquote><p>删除密码后，AUTH 无法登录，redis 客户端也无法连接，想要连接，需再次设置密码。</p><p>相当于是删除密码，而不是设置密码为<code>空</code>，如果要设置密码为<code>空</code>，可使用<code>nopass</code>来设置。</p></blockquote><ul><li><p>明文密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER rab &lt;zhurs@123</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;&lt;&#x27; 符号之后是前面创建用户时设置的明文密码</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418180333209.png" alt="image-20230418180333209"></p></li><li><p>Hash 密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER ops !a9db6465cac424cb70a81fae6f42cd63b7e2292b45795ea88695e9da2baea040</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;!&#x27; 符号之后是前面创建用户时设置的Hash密码</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418180444997.png" alt="image-20230418180444997"></p></li></ul><p><strong>2、通过 <code>nopass</code> 删除用户密码</strong></p><p>为了演示，再创建一个用户 <code>test</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER <span class="built_in">test</span> on &gt;nba ~* +@all</span><br></pre></td></tr></table></figure><p>注意：一个用户可设置多个密码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER <span class="built_in">test</span> on &gt;cba ~* +@all</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418181412964.png" alt="image-20230418181412964"></p><p>查看用户详细信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACL GETUSER <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418181917296.png" alt="image-20230418181917296"></p><p>开始设置 <code>test</code> 用户密码为 <code>空</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER <span class="built_in">test</span> nopass</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418182159429.png" alt="image-20230418182159429"></p><p>与<code>&lt;</code>、<code>#</code>不同的是，该用户是可以登录的，因为密码是空，只需设置密码为空即可登录，如果不设置空密码，也是无法进行用户认证。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auth <span class="built_in">test</span>      <span class="comment"># 无法认证</span></span><br><span class="line">auth <span class="built_in">test</span> <span class="string">&#x27;&#x27;</span>   <span class="comment"># 可以认证（为空或填任意密码都不影响）</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418182501637.png" alt="image-20230418182501637"></p><p>redis 客户端测试验证：</p><blockquote><p>密码处填不填不影响。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418182609602.png" alt="image-20230418182609602"></p><p>连接验证：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230418182640220.png" alt="image-20230418182640220"></p><h3 id="3-2-重置用户和密码"><a href="#3-2-重置用户和密码" class="headerlink" title="3.2 重置用户和密码"></a>3.2 重置用户和密码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER <span class="built_in">test</span> reset</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419150556176.png" alt="image-20230419150556176"></p><p>重置后，该用户无法登录连接，可见 test 用户处于 <code>off</code> 禁用状态。</p><h2 id="四、权限管理"><a href="#四、权限管理" class="headerlink" title="四、权限管理"></a>四、权限管理</h2><h3 id="4-1-key-管理"><a href="#4-1-key-管理" class="headerlink" title="4.1 key 管理"></a>4.1 key 管理</h3><p><strong>1、对 test 用户设置可操作的 key</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER <span class="built_in">test</span> on &gt;zhurs@123 ~foo* ~bar* +@all</span><br><span class="line"></span><br><span class="line"><span class="comment"># test用户可管理foo、bar开头的key</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419152531283.png" alt="image-20230419152531283"></p><p><strong>2、取消用户可操作的 key</strong></p><p>通过 resetkeys 实现，此时只能操作 ob 开头的 key，<code>~foo*、~bar*</code> key 已经被 resetkeys 清空。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER <span class="built_in">test</span> on &gt;zhurs@123 ~foo* ~bar* resetkeys ~ob* +@all</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419152823519.png" alt="image-20230419152823519"></p><p><strong>3、操作所有 key</strong></p><blockquote><p><code>allkeys</code> 和 <code>~*</code> 效果一样</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER <span class="built_in">test</span> on &gt;zhurs@123 ~* +@all</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419170056975.png" alt="image-20230419170056975"></p><h3 id="4-2-权限管理"><a href="#4-2-权限管理" class="headerlink" title="4.2 权限管理"></a>4.2 权限管理</h3><p><strong>1、权限类型</strong></p><p>权限有很多，如下是 redis 所有的权限列表：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACL CAT</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419171923038.png" alt="image-20230419171923038"></p><p>如查看某个权限的具体信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACL CAT <span class="built_in">read</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419172131962.png" alt="image-20230419172131962"></p><p><strong>2、权限设置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER <span class="built_in">test</span> on &gt;zhurs@123 ~foo* ~bar* +@<span class="built_in">hash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test用户只有对hash类型的key有权限</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419172659504.png" alt="image-20230419172659504"></p><p>可见，取消了所有权限，仅限制为 hash 权限。其他权限就不一一举例了，各位可自行尝试。</p><h2 id="五、ACL-用户存储"><a href="#五、ACL-用户存储" class="headerlink" title="五、ACL 用户存储"></a>五、ACL 用户存储</h2><p>这里注意一下，以上的操作是通过 ACL 命令实现的，这些操作都只是临时存储与内存中，如果服务器或实例重启后，ACL 所设置的数据将会丢失。如下图你会发现，前面创建的 test 用户已经不见了。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419173312166.png" alt="image-20230419173312166"></p><p>那 Redis 6.0+ 是如何存储创建的用户呢？<strong>官方给出了两种方法</strong>：直接将用户信息写入配置文件 redis.conf 中、指定外部 ACL 文件。</p><p>这两种方法是<em>相互不兼容</em>的，因此，我们只能选择其中任意一种，考虑到生产上的复杂环境问题，官方建议使用外部 ACL 文件方式。</p><h3 id="5-1-配置文件实现"><a href="#5-1-配置文件实现" class="headerlink" title="5.1 配置文件实现"></a>5.1 配置文件实现</h3><p>方法比较简单，直接在 redis.conf 配置文件中追加以下内容，如果有多个用户继续往下追加即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user worker +@list +@connection ~<span class="built_in">jobs</span>:* on &gt;ffa9203c493aa99</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419175928830.png" alt="image-20230419175928830"></p><p>然后重启一下 redis 实例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart redis</span><br></pre></td></tr></table></figure><p>登录验证：</p><blockquote><p>是没问题的。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419180108307.png" alt="image-20230419180108307"></p><h3 id="5-2-外部-ACL-文件实现"><a href="#5-2-外部-ACL-文件实现" class="headerlink" title="5.2 外部 ACL 文件实现"></a>5.2 外部 ACL 文件实现</h3><p>因为不兼容，所以在做这个实验前先去掉配置文件中追加的 <code>user work ...</code> 内容，然后在配置文件中指定外部 ACL 文件路径：</p><p>找到配置文件 <code>aclfile /etc/redis/users.acl</code> 部分，并打开注释。</p><blockquote><p>我自定义的配置文件路径为：&#x2F;data&#x2F;users.acl</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419180652171.png" alt="image-20230419180652171"></p><p>手动创建 <code>users.acl</code> 文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim users.acl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件加入下面内容</span></span><br><span class="line">user root +@all ~* on &gt;zhurs@123</span><br><span class="line">user dev +@list +@connection ~<span class="built_in">jobs</span>:* on &gt;ffa9203c493aa99</span><br><span class="line">user ops +@list +@connection ~<span class="built_in">jobs</span>:* on &gt;kka2023addwedw4</span><br></pre></td></tr></table></figure><p>重启 Redis 实例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart redis</span><br></pre></td></tr></table></figure><p>登录查看：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419181841209.png" alt="image-20230419181841209"></p><p>此时<code>redis.conf</code> 配置文件中定义的密码已经失效，因此这就导致原本的 default 用户又可以无密码登录了，所以我们需要禁用 default 用户：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACL SETUSER default reset</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230419183105049.png" alt="image-20230419183105049"></p><p><mark>哨兵和副本的 ACL 规则可查看<a href="https://redis.io/docs/management/security/acl/">官方文档。</a></mark></p><p><strong>参考</strong>：<a href="https://redis.io/docs/management/security/acl/">官方文档</a></p>]]></content>
    
    
    <summary type="html">Redis 6.0+ 的 ACL 机制。</summary>
    
    
    
    <category term="数据库" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="非关系型数据库" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://blog.rabcnops.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="Redis" scheme="https://blog.rabcnops.cn/tags/Redis/"/>
    
  </entry>
  
</feed>
