<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo + GitHub 个人博客部署</title>
      <link href="/posts/articles/2d762e62.html"/>
      <url>/posts/articles/2d762e62.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330132102576.png" alt="image-20230330132102576"></p><p><strong>官网</strong>：<a href="https://hexo.io/">https://hexo.io/</a></p><hr><h2 id="一、Hexo-运行环境"><a href="#一、Hexo-运行环境" class="headerlink" title="一、Hexo 运行环境"></a>一、Hexo 运行环境</h2><p><strong>1、运行平台</strong></p><ul><li><strong>Windows</strong>：10</li></ul><p><strong>2、运行软件环境</strong></p><ul><li><strong>NodeJS</strong>：18.15.0(包含 npm 9.5.0)</li><li><strong>Npm</strong>：9.05</li><li><strong>Git</strong>：2.36.1</li></ul><h2 id="二、Hexo-项目初始化"><a href="#二、Hexo-项目初始化" class="headerlink" title="二、Hexo 项目初始化"></a>二、Hexo 项目初始化</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>1、安装 Hexo</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230322164752092.png" alt="image-20230322164752092"></p><p>2、查看安装的 Hexo 版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230322164656592.png" alt="image-20230322164656592"></p><p>3、创建工程并初始化</p><blockquote><p><code>hexo-blog</code> 项目名可自定义</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexo-blog</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230322164432235.png" alt="image-20230322164432235"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230322164550392.png" alt="image-20230322164550392"></p><blockquote><p>初始化完成后的目录结构如下图所示</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230322170606051.png" alt="image-20230322170606051"></p><h3 id="2-2-启动"><a href="#2-2-启动" class="headerlink" title="2.2 启动"></a>2.2 启动</h3><p>1、启动 Hexo 项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo -g      <span class="comment"># 更新文件至pubulic</span></span><br><span class="line">hexo server  <span class="comment"># 启动hexo服务</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230322164341471.png" alt="image-20230322164341471"></p><p>2、本地浏览器访问</p><blockquote><p><a href="http://localhost:4000/">http://localhost:4000/</a></p><p>下图为 Hexo 的默认 Home</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230322170028665.png" alt="image-20230322170028665"></p><h3 id="2-3-主题"><a href="#2-3-主题" class="headerlink" title="2.3 主题"></a>2.3 主题</h3><blockquote><p>本次主题：<a href="https://butterfly.js.org/">Butterfly</a></p><p>更多官网主题：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></blockquote><h4 id="2-3-1-主题下载"><a href="#2-3-1-主题下载" class="headerlink" title="2.3.1 主题下载"></a>2.3.1 主题下载</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-blog</span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h4 id="2-3-2-主题应用"><a href="#2-3-2-主题应用" class="headerlink" title="2.3.2 主题应用"></a>2.3.2 主题应用</h4><blockquote><p>修改 Hexo 根目录下的 <code>_config.yml</code>，把主题改为 <code>butterfly</code></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><ul><li><p>修改前</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230322173612968.png" alt="image-20230322173612968"></p></li><li><p>修改后</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230322173653676.png" alt="image-20230322173653676"></p></li></ul><h4 id="2-3-3-安装插件"><a href="#2-3-3-安装插件" class="headerlink" title="2.3.3 安装插件"></a>2.3.3 安装插件</h4><blockquote><p>如果你沒有 pug 以及 stylus 的渲染器，请下载安装</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-blog</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h4 id="2-3-4-升级建议"><a href="#2-3-4-升级建议" class="headerlink" title="2.3.4 升级建议"></a>2.3.4 升级建议</h4><blockquote><p>摘至插件操作文档：<a href="https://butterfly.js.org/">Butterfly</a></p></blockquote><p>为了減少升级主题后带来的不便，请使用以下方法（建议，可以不做）。</p><p>在 hexo 的根目录创建一个文件 <code>_config.butterfly.yml</code>，并把主题目录的 <code>_config.yml</code> 内容复制到 <code>_config.butterfly.yml</code> 去。</p><blockquote><p>注意: 复制的是主题的 <code>_config.yml</code> ,而不是 hexo 的 <code>_config.yml</code>。</p><p>注意： 不要把主题目录的 <code>_config.yml</code> 刪掉。</p></blockquote><p>注意：以后只需要在 <code>_config.butterfly.yml</code> 进行配置就行。</p><p>如果使用了 <code>_config.butterfly.yml</code>， 配置主题的 <code>_config.yml</code> 将不会有效果。</p><p>Hexo 会自动合并主题中的 <code>_config.yml</code> 和 <code>_config.butterfly.yml</code> 里的配置，如果存在同名配置，会使用 <code>_config.butterfly.yml</code> 的配置，其优先级较高。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230322180036589.png" alt="image-20230322180036589"></p><h4 id="2-3-5-启动-Hexo"><a href="#2-3-5-启动-Hexo" class="headerlink" title="2.3.5 启动 Hexo"></a>2.3.5 启动 Hexo</h4><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230322180135166.png" alt="image-20230322180135166"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hxeo server</span><br></pre></td></tr></table></figure><p>本地浏览器访问</p><blockquote><p><a href="http://localhost:4000/">http://localhost:4000/</a></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230323100500616.png" alt="image-20230323100500616"></p><h2 id="三、GitHub-部署-Hexo"><a href="#三、GitHub-部署-Hexo" class="headerlink" title="三、GitHub 部署 Hexo"></a>三、GitHub 部署 Hexo</h2><p>以上的操作是在我们的 Windows 环境下实现的，我们需要发布到 GitHub 上让任何人都可以访问。</p><h3 id="3-1-创建-Git-仓库"><a href="#3-1-创建-Git-仓库" class="headerlink" title="3.1 创建 Git 仓库"></a>3.1 创建 Git 仓库</h3><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230323093845546.png" alt="image-20230323093845546"></p><h3 id="3-2-Git-客户端配置"><a href="#3-2-Git-客户端配置" class="headerlink" title="3.2 Git 客户端配置"></a>3.2 Git 客户端配置</h3><p>1、windows 本地配置并推送</p><blockquote><p>create a new repository on the command line</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# rabcnops.github.io&quot;</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/rabcnops/rabcnops.github.io.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><blockquote><p>or push an existing repository from the command line</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/rabcnops/rabcnops.github.io.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230323093941950.png" alt="image-20230323093941950"></p><p>2、推送后查看 GitHuab 详情</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230323095255306.png" alt="image-20230323095255306"></p><h3 id="3-3-发布项目至-GitHub"><a href="#3-3-发布项目至-GitHub" class="headerlink" title="3.3 发布项目至 GitHub"></a>3.3 发布项目至 GitHub</h3><p>1、下载 hexo-deployer-git</p><blockquote><p>目的是能在 Hexo 主配置中定义 GitHub 的远程仓库</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-blog</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>或者直接将 <code>public</code> 目录下的所有文件和目录推送至 <code>GitHub</code> 仓库中。</p></blockquote><p>2、修改 <code>_config.yml</code> 配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/rabcnops/rabcnops.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230323094703457.png" alt="image-20230323094703457"></p><p>3、将 Hexo 项目发布至 Git 仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  <span class="comment"># 清理缓存</span></span><br><span class="line">hexo g      <span class="comment"># 生成文件</span></span><br><span class="line">hexo d      <span class="comment"># 上传Git仓库</span></span><br></pre></td></tr></table></figure><p>4、最后看看推送结果</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230323101017404.png" alt="image-20230323101017404"></p><p>5、查看最终 Pages 地址</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230323101258269.png" alt="image-20230323101258269"></p><h3 id="3-4-访问-GitHub-Pages"><a href="#3-4-访问-GitHub-Pages" class="headerlink" title="3.4 访问 GitHub Pages"></a>3.4 访问 GitHub Pages</h3><p>在浏览器访问测试。</p><blockquote><p><a href="https://rabcnops.github.io/">https://rabcnops.github.io/</a></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230323101508913.png" alt="image-20230323101508913"></p><p><mark>至此，我们的博客系统已经发布至我们的 GitHub 上了。</mark></p><h2 id="四、自定义域名"><a href="#四、自定义域名" class="headerlink" title="四、自定义域名"></a>四、自定义域名</h2><p><strong>注意</strong>：这一步看你的实际情况来，这是可选的。如果你需要拥有自己的个性化域名，那你可以去<a href="https://www.aliyun.com/">阿里云</a>、<a href="https://cloud.tencent.com/">腾讯云</a>等云厂商购买域名并做域名解析配置即可。</p><h3 id="4-1-购买域名"><a href="#4-1-购买域名" class="headerlink" title="4.1 购买域名"></a>4.1 购买域名</h3><p>1、购买域名</p><p><a href="https://wanwang.aliyun.com/domain/searchresult/#/?keyword=rabcnops&suffix=cn">域名查询结果_域名信息_域名交易-万网-阿里云旗下品牌 (aliyun.com)</a></p><p>2、进入域名控制台查看购买的域名</p><p><a href="https://dc.console.aliyun.com/?spm=a2c4g.11186623.0.0.34943d96sbKudn#/domain-list/all">进入域名控制台 (aliyun.com)</a></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330122756957.png" alt="image-20230330122756957"></p><h3 id="4-2-域名解析"><a href="#4-2-域名解析" class="headerlink" title="4.2 域名解析"></a>4.2 域名解析</h3><p>1、对购买的域名进行 DNS 解析</p><p><a href="https://dns.console.aliyun.com/?spm=5176.100251.top-nav.4.307d4f15LtAcK7#/dns/domainList">云解析 DNS (aliyun.com)</a></p><p>2、操作步骤</p><ul><li><p>添加域名</p><blockquote><p>一般不用添加（会自动在列表中），除非你是在别的云平台购买的域名。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330122950530.png" alt="image-20230330122950530"></p></li><li><p>添加解析记录</p><blockquote><p>记录类型：CNAME</p><p>主机记录：自定义。比如你想你的网站叫 <a href="http://www.rabcnops.cn,那就填写/">www.rabcnops.cn，那就填写</a> www</p><p>记录值：也就是 Github 的 Pages 地址（最好不要填IP，因为IP可能会改变，除非是你自己的云服务器）</p><p>TTL：默认 10 分钟即可</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330123239185.png" alt="image-20230330123239185"></p></li><li><p>完成之后，你就会看到一条解析记录</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330125651673.png" alt="image-20230330125651673"></p></li></ul><h3 id="4-3-SSL-证书"><a href="#4-3-SSL-证书" class="headerlink" title="4.3 SSL 证书"></a>4.3 SSL 证书</h3><p>如果你有强迫症，不想看到 URL <code>不安全</code> 标志，如下图，那你就需要配置 SSL 数字证书。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330130031143.png" alt="image-20230330130031143"></p><p>1、进入数字证书控制台</p><p><a href="https://yundun.console.aliyun.com/?spm=5176.100251.top-nav.37.307d4f15LtAcK7&p=cas#/certExtend/free">数字证书管理服务管理控制台 - SSL 证书 (aliyun.com)</a></p><p>2、创建证书</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330130235706.png" alt="image-20230330130235706"></p><p>3、申请证书</p><blockquote><p>点击<code>申请证书</code></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330130313125.png" alt="image-20230330130313125"></p><p>4、填写申请</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330130609494.png" alt="image-20230330130609494"></p><p>5、等待下发证书即可</p><blockquote><p>查看状态：已签发</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330130724457.png" alt="image-20230330130724457"></p><p><mark>到这里，你的域名+SSL数字证书的准备工作已经完成！</mark></p><h3 id="4-3-Github-配置自定义域名"><a href="#4-3-Github-配置自定义域名" class="headerlink" title="4.3 Github 配置自定义域名"></a>4.3 Github 配置自定义域名</h3><p>去到你项目的 <code>GitHub Pages</code> 去添加你的域名，并强制启用 HTTPS。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330131357888.png"></p><h2 id="五、Hexo-主题"><a href="#五、Hexo-主题" class="headerlink" title="五、Hexo 主题"></a>五、Hexo 主题</h2><blockquote><p>本次主题：<a href="https://butterfly.js.org/">Butterfly</a></p><p>更多 Hexo 官网主题：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></blockquote><p>剩下的主题配置就不一步步演示了（内容太多了），更多配置看<a href="https://butterfly.js.org/">主题插件文档</a>，根据文档一步步操作即可。</p><p><mark>—END—</mark></p><p>附件：</p><hr><p>参考1：<a href="https://www.cnblogs.com/qisi007/p/13731562.html">hexo博客添加gitalk评论系统 - 俗的太不一样 - 博客园 (cnblogs.com)</a></p><p>参考2：<a href="https://www.cnblogs.com/MoYu-zc/p/14399186.html">图标颜色&#x2F;尺寸优化</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus - SSL 证书过期监控 - 钉钉告警</title>
      <link href="/posts/articles/462c3ed6.html"/>
      <url>/posts/articles/462c3ed6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次博客《Prometheus - SSL 证书过期监控》已经配置了 Grafana 如何展示 SSL 过期监控面板，本次接着将<code>告警</code>功能加上，这才是我们的最终目的。</p><h2 id="一、配置-Prometheus-告警规则"><a href="#一、配置-Prometheus-告警规则" class="headerlink" title="一、配置 Prometheus 告警规则"></a>一、配置 Prometheus 告警规则</h2><p><strong>1、先确定好 Prometheus 的规则文件路径</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330110201021.png" alt="image-20230330110201021"></p><p><strong>2、编写告警规则</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/data/prometheus/rules/ssl_cert_alerts.yml</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">groups</span>:</span><br><span class="line">- name: <span class="string">&quot;SSL证书过期提醒&quot;</span></span><br><span class="line">  rules:</span><br><span class="line">  - alert: <span class="string">&quot;证书过期时间&lt;30天&quot;</span></span><br><span class="line">    <span class="built_in">expr</span>: probe_ssl_earliest_cert_expiry&#123;job=<span class="string">&quot;SSL证书时间&quot;</span>&#125; - time() &lt; 86400 * 30</span><br><span class="line">    <span class="keyword">for</span>: 0s</span><br><span class="line">    labels:</span><br><span class="line">      severity: <span class="string">&quot;提示&quot;</span></span><br><span class="line">    annotations:</span><br><span class="line">      summary: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.instance &#125;&#125; SSL 证书将在30天后过期，请注意及时续费！&quot;</span></span><br><span class="line">      description: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.instance &#125;&#125; SSL 证书将在30天后过期，请注意及时续费！&quot;</span></span><br><span class="line">  - alert: <span class="string">&quot;证书过期时间&lt;7天&quot;</span></span><br><span class="line">    <span class="built_in">expr</span>: probe_ssl_earliest_cert_expiry&#123;job=<span class="string">&quot;SSL证书时间&quot;</span>&#125; - time() &lt; 86400 * 7</span><br><span class="line">    <span class="keyword">for</span>: 0s</span><br><span class="line">    labels:</span><br><span class="line">      severity: <span class="string">&quot;告警&quot;</span></span><br><span class="line">    annotations:</span><br><span class="line">      summary: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.instance &#125;&#125; SSL 证书将在7天后过期，请注意及时续费！&quot;</span></span><br><span class="line">      description: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.instance &#125;&#125; SSL 证书将在7天后过期，请注意及时续费！&quot;</span></span><br><span class="line">  - alert: <span class="string">&quot;证书过期时间&lt;1天&quot;</span></span><br><span class="line">    <span class="built_in">expr</span>: probe_ssl_earliest_cert_expiry&#123;job=<span class="string">&quot;SSL证书时间&quot;</span>&#125; - time() &lt; 86400 * 1</span><br><span class="line">    <span class="keyword">for</span>: 0s</span><br><span class="line">    labels:</span><br><span class="line">      severity: <span class="string">&quot;灾难&quot;</span></span><br><span class="line">    annotations:</span><br><span class="line">      summary: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.instance &#125;&#125; SSL 证书将在1天后过期，请注意及时续费！&quot;</span></span><br><span class="line">      description: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.instance &#125;&#125; SSL 证书将在1天后过期，请注意及时续费！&quot;</span></span><br></pre></td></tr></table></figure><p><strong>3、重启 Prometheus</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart prometheus</span><br></pre></td></tr></table></figure><h2 id="二、配置-Alertmanager"><a href="#二、配置-Alertmanager" class="headerlink" title="二、配置 Alertmanager"></a>二、配置 Alertmanager</h2><p><strong>1、修改配置文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/data/alertmanager/conf/config.yml</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">route:</span><br><span class="line">  group_wait: 0s</span><br><span class="line">  group_interval: 5s</span><br><span class="line">  repeat_interval: 1m</span><br><span class="line">  group_by: [<span class="string">&#x27;instance&#x27;</span>]</span><br><span class="line">  receiver: <span class="string">&#x27;web.hook.prometheusalert&#x27;</span></span><br><span class="line"></span><br><span class="line">receivers:</span><br><span class="line">- name: <span class="string">&#x27;web.hook.prometheusalert&#x27;</span></span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: <span class="string">&#x27;http://YourDingTalk_IP:8060/dingtalk/webhook1/send&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>2、重启 Alertmanager</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart alertmanager</span><br></pre></td></tr></table></figure><h2 id="三、配置-DingTalk"><a href="#三、配置-DingTalk" class="headerlink" title="三、配置 DingTalk"></a>三、配置 DingTalk</h2><p><strong>1、配置文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/data/dingtalk/conf/config.yml</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">templates:</span><br><span class="line">  - /etc/prometheus-webhook-dingtalk/templates/default.tmpl</span><br><span class="line">targets:</span><br><span class="line">  webhook1:</span><br><span class="line">    url: https://oapi.dingtalk.com/robot/send?access_token=8cf8d025f***a4537b22</span><br><span class="line">    secret: SECb***95fbab</span><br><span class="line">    mention:</span><br><span class="line">      all: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>2、模板文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /home/data/dingtalk/templates/default.tmpl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：这里的templates路径为什么与上面的templates路径不对应，那是因为我是用容器起的DingTalk，取的是容器内部路径</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">&#123;&#123;/* Firing */&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; define <span class="string">&quot;default.__text_alert_list&quot;</span> &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class="line"></span><br><span class="line">**触发时间:** &#123;&#123; dateInZone <span class="string">&quot;2006.01.02 15:04:05&quot;</span> (.StartsAt) <span class="string">&quot;Asia/Shanghai&quot;</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">**摘要:** &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class="line"></span><br><span class="line">**描述:** &#123;&#123; .Annotations.description &#125;&#125;</span><br><span class="line"></span><br><span class="line">**监控:** [grafana](http://grafana_ip:8000/grafana/d/GuJ5DHMnz/fu-wu-qi-jian-kong-tu-biao?orgId=1)</span><br><span class="line"></span><br><span class="line">**详情:**</span><br><span class="line">&#123;&#123; range .Labels.SortedPairs &#125;&#125;&#123;&#123; <span class="keyword">if</span> and (ne (.Name) <span class="string">&quot;severity&quot;</span>) (ne (.Name) <span class="string">&quot;summary&quot;</span>) &#125;&#125;&gt; - &#123;&#123; .Name &#125;&#125;: &#123;&#123; .Value | markdown | html &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;/* Resolved */&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; define <span class="string">&quot;default.__text_resolved_list&quot;</span> &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class="line"></span><br><span class="line">**触发时间:** &#123;&#123; dateInZone <span class="string">&quot;2006.01.02 15:04:05&quot;</span> (.StartsAt) <span class="string">&quot;Asia/Shanghai&quot;</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">**解除时间:** &#123;&#123; dateInZone <span class="string">&quot;2006.01.02 15:04:05&quot;</span> (.EndsAt) <span class="string">&quot;Asia/Shanghai&quot;</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">**摘要:** &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class="line"></span><br><span class="line">**监控:** [grafana](http://grafana_ip:8000/grafana/d/GuJ5DHMnz/fu-wu-qi-jian-kong-tu-biao?orgId=1)</span><br><span class="line"></span><br><span class="line">**详情:**</span><br><span class="line">&#123;&#123; range .Labels.SortedPairs &#125;&#125;&#123;&#123; <span class="keyword">if</span> and (ne (.Name) <span class="string">&quot;severity&quot;</span>) (ne (.Name) <span class="string">&quot;summary&quot;</span>) &#125;&#125;&gt; - &#123;&#123; .Name &#125;&#125;: &#123;&#123; .Value | markdown | html &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>3、重启 DingTalk</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart dingtalk</span><br></pre></td></tr></table></figure><h2 id="四、模拟告警与恢复"><a href="#四、模拟告警与恢复" class="headerlink" title="四、模拟告警与恢复"></a>四、模拟告警与恢复</h2><p><strong>1、钉钉告警通知</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330111655592.png" alt="image-20230330111655592"></p><p><strong>2、钉钉解除告警通知</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230330112013249.png" alt="image-20230330112013249"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体来说都比较简单，重点是要理清楚整个过程链，配置过程中仔细点即可，接下来会继续剖析告警的原理&#x2F;告警的时机。</p>]]></content>
      
      
      <categories>
          
          <category> 监控系统 </category>
          
          <category> Prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible 部署 Wordpress</title>
      <link href="/posts/articles/1c8d3a9.html"/>
      <url>/posts/articles/1c8d3a9.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、规划"><a href="#一、规划" class="headerlink" title="一、规划"></a>一、规划</h2><ul><li>Linux 环境：CentOS 7.9</li><li>ansible 控制节点：192.168.56.152</li><li>ansible 被管理节点：192.168.56.153</li><li>Wordpress 版本：4.9.4</li></ul><h2 id="二、部署"><a href="#二、部署" class="headerlink" title="二、部署"></a>二、部署</h2><h3 id="2-1-定义-inventory"><a href="#2-1-定义-inventory" class="headerlink" title="2.1 定义 inventory"></a>2.1 定义 inventory</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim inventory.yaml</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mywebhost:</span><br><span class="line">  hosts:</span><br><span class="line">    vm01:</span><br><span class="line">      ansible_host: 192.168.56.153</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：mywebhost 为组名</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-定义-playbook"><a href="#2-2-定义-playbook" class="headerlink" title="2.2 定义 playbook"></a>2.2 定义 playbook</h3><p>1、下载 wordpress 安装包</p><p>下载地址<a href="https://cn.wordpress.org/download/releases/">https://cn.wordpress.org/download/releases/</a></p><p>2、上传安装包至 ansible 控制节点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/data/ansible</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230328233159669.png" alt="image-20230328233159669"></p><p>3、ansible 控制节点编写 playbook</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim wordpress.yml</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: mywebhost</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars:</span><br><span class="line">    db_pkgs:</span><br><span class="line">      - mariadb</span><br><span class="line">      - mariadb-server</span><br><span class="line">    web_pkgs:</span><br><span class="line">      - httpd</span><br><span class="line">      - php</span><br><span class="line">      - php-gd</span><br><span class="line">      - php-mysql</span><br><span class="line">      - gd</span><br><span class="line">  tasks:</span><br><span class="line">    - name: install mariadb</span><br><span class="line">      yum: name=&#123;&#123; db_pkgs &#125;&#125; state=latest</span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;wordpress&#x27;</span></span><br><span class="line">    - name: install webserver</span><br><span class="line">      yum: name=&#123;&#123; web_pkgs &#125;&#125; state=latest</span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;wordpress&#x27;</span></span><br><span class="line">    - name: start mariadb</span><br><span class="line">      service: name=mariadb state=started</span><br><span class="line">      notify: create_db</span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;wordpress&#x27;</span>      </span><br><span class="line">    - name: start webserver</span><br><span class="line">      service: name=httpd state=started</span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;wordpress&#x27;</span></span><br><span class="line">      </span><br><span class="line">    - name: to package</span><br><span class="line">      unarchive: src=/home/data/ansible/wordpress-4.9.4-zh_CN.tar.gz dest=/var/www/html</span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;wordpress&#x27;</span>   </span><br><span class="line">    - name: <span class="built_in">chown</span></span><br><span class="line">      file: owner=apache group=apache recurse=<span class="built_in">yes</span> path=/var/www/html</span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;wordpress&#x27;</span>     </span><br><span class="line">  handlers:</span><br><span class="line">    - name: create_db</span><br><span class="line">      shell: mysql -e <span class="string">&quot;create database wordpress;grant all on *.* to &#x27;remote&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;flush privileges;&quot;</span></span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;wordpress&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-运行-playbook"><a href="#2-3-运行-playbook" class="headerlink" title="2.3 运行 playbook"></a>2.3 运行 playbook</h3><p>1、运行前三部曲</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查错误</span></span><br><span class="line">ansible-playbook wordpress.yml -i inventory.yaml --syntax-check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有任务</span></span><br><span class="line">ansible-playbook wordpress.yml -i inventory.yaml --list-task</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出在那些机器执行</span></span><br><span class="line">ansible-playbook wordpress.yml -i inventory.yaml --list-hosts</span><br></pre></td></tr></table></figure><p>2、运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook wordpress.yml -i inventory.yaml</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230329103140769.png" alt="image-20230329103140769"></p><h3 id="2-4-安装-wordpress"><a href="#2-4-安装-wordpress" class="headerlink" title="2.4 安装 wordpress"></a>2.4 安装 wordpress</h3><p>1、浏览器访问</p><blockquote><p><a href="http://192.168.56.153/wordpress">http://192.168.56.153/wordpress</a></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230329095308748.png" alt="image-20230329095308748"></p><p>2、配置数据库</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230329095739451.png" alt="image-20230329095739451"></p><p>3、开始安装 wordpress</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230329110018596.png" alt="image-20230329110018596"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230329110415294.png" alt="image-20230329110415294"></p><h3 id="2-5-登录-wordpress"><a href="#2-5-登录-wordpress" class="headerlink" title="2.5 登录 wordpress"></a>2.5 登录 wordpress</h3><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230329110544631.png" alt="image-20230329110544631"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230329110715387.png" alt="image-20230329110715387"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230329110829054.png" alt="image-20230329110829054"></p><p><mark>说明：我这里为了演示，就在一台服务器上进行安装 wordpress 了，如果你想把你的数据库&#x2F;nginx等分开在不同的服务器部署，那也是可以的，只需要指定 playbook 文件中的 <code>ansible_nodename</code> 为你对应的主机名即可，具体一份案例如下。</mark></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="comment"># 功能：ansible搭建LAMP环境及WordPress项目部署</span></span><br><span class="line"><span class="comment"># 对所有主机操作（即通过ansible机器向web:155和database:156机器进行批量操作）</span></span><br><span class="line"><span class="comment"># hosts: 后面可写主机组名或主机名</span></span><br><span class="line">- hosts: mywebhost</span><br><span class="line">  remote_user: root</span><br><span class="line">  <span class="comment"># 定义变量</span></span><br><span class="line">  vars:</span><br><span class="line">    db_pkgs:</span><br><span class="line">      <span class="comment"># 以下的-为变量“值”，也就是在引用db_pkgs变量时，可取变量中的值</span></span><br><span class="line">      - mariadb</span><br><span class="line">      - mariadb-server</span><br><span class="line">    web_pkgs:</span><br><span class="line">      - httpd</span><br><span class="line">      - php</span><br><span class="line">      - php-gd</span><br><span class="line">      - php-mysql</span><br><span class="line">      - gd</span><br><span class="line">  <span class="comment"># tasks：ansible机器要执行操作的任务列表（依次执行）</span></span><br><span class="line">  tasks:</span><br><span class="line">    <span class="comment"># 安装mariadb</span></span><br><span class="line">    - name: install mariadb</span><br><span class="line">    <span class="comment"># 引用变量时使用&#123;&#123;&#125;&#125;</span></span><br><span class="line">      yum: name=&#123;&#123; db_pkgs &#125;&#125; state=latest</span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;database&#x27;</span></span><br><span class="line">    <span class="comment"># 安装webserver相关服务（httpd、php）</span></span><br><span class="line">    - name: install webserver</span><br><span class="line">      yum: name=&#123;&#123; web_pkgs &#125;&#125; state=latest</span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;web&#x27;</span></span><br><span class="line">    <span class="comment"># 启动mariadb</span></span><br><span class="line">    - name: start mariadb</span><br><span class="line">      service: name=mariadb state=started</span><br><span class="line">      <span class="comment"># 触发（类似c语言的中断信号），触发后会去handlers执行相关操作</span></span><br><span class="line">      notify: create_db</span><br><span class="line">      <span class="comment"># when判断，用来针对某主机执行的操作，比如这里是指定对database组里的机器进行操作</span></span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;database&#x27;</span></span><br><span class="line">    <span class="comment"># 启动webserver相关服务</span></span><br><span class="line">    - name: start webserver</span><br><span class="line">      service: name=httpd state=started</span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;web&#x27;</span></span><br><span class="line">    <span class="comment"># 将项目包发送到指定机器（及解包）  </span></span><br><span class="line">    - name: to package</span><br><span class="line">      unarchive: src=/home/data/ansible/wordpress-4.9.4-zh_CN.tar.gz dest=/var/www/html</span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;web&#x27;</span></span><br><span class="line">    <span class="comment"># 修改指定机器网站发布目录属组/主</span></span><br><span class="line">    - name: <span class="built_in">chown</span></span><br><span class="line">      file: owner=apache group=apache recurse=<span class="built_in">yes</span> path=var/www/html</span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;web&#x27;</span></span><br><span class="line">      </span><br><span class="line">  handlers:</span><br><span class="line">    <span class="comment"># 注意：这里的name名字必须和notify的触发名称保持一致</span></span><br><span class="line">    - name: create_db</span><br><span class="line">      <span class="comment"># 调用shell解释器执行相关命令</span></span><br><span class="line">      shell: mysql -e <span class="string">&quot;create database wordpress;grant all on *.* to &#x27;remote&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;flush privileges;&quot;</span></span><br><span class="line">      <span class="comment"># 同样这里是针对database这个主机组里的机器</span></span><br><span class="line">      when: ansible_nodename == <span class="string">&#x27;database&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="三、FAQ"><a href="#三、FAQ" class="headerlink" title="三、FAQ"></a>三、FAQ</h2><p>1、普通用户连接失败</p><p><code>ERROR 1045 (28000): Access denied for user &#39;remote&#39;@&#39;localhost</code></p><p>2、原因分析与解决方案</p><p>这里注意数据库 MariaDB 的匿名用户问题，匿名用户会导致我们普通用户无法登录（连接）数据库，如下这些红框部分就是匿名用户：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230329111136989.png" alt="image-20230329111136989"></p><p>因此我们需要删除这些匿名用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user &#x27;&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">user &#x27;&#x27;@&#x27;wordpress&#x27;;</span><br><span class="line">flush privileges</span><br></pre></td></tr></table></figure><blockquote><p>如下图，确保数据库中不存在匿名用户</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230329111747894.png" alt="image-20230329111747894"></p><p><mark>至此，问题已经解决。</mark></p>]]></content>
      
      
      <categories>
          
          <category> 自动化运维 </category>
          
          <category> Ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Docker 的 Prometheus 监控方案</title>
      <link href="/posts/articles/e36de20c.html"/>
      <url>/posts/articles/e36de20c.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/prometheus.jpeg" alt="prometheus"></p><p><font color=Brown><strong>Author</strong>：rab</font><br><font color=Brown><strong>Date</strong>：2022&#x2F;07&#x2F;18</font><br><font color=Brown><strong>Blog</strong>：<a href="https://blog.csdn.net/IT_ZRS?type=blog"><font color=Brown>https://blog.csdn.net/IT_ZRS?type&#x3D;blog</font></a></font></p><hr><h2 id="一、规划"><a href="#一、规划" class="headerlink" title="一、规划"></a>一、规划</h2><h3 id="1-1-架构图"><a href="#1-1-架构图" class="headerlink" title="1.1 架构图"></a>1.1 架构图</h3><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/architecture.png" alt="architecture"></p><p>我们将按照架构图来实现。</p><h3 id="1-2-主机规划"><a href="#1-2-主机规划" class="headerlink" title="1.2 主机规划"></a>1.2 主机规划</h3><blockquote><p>由于主机资源问题，暂且以两台服务器进行演示。</p></blockquote><table><thead><tr><th>Host</th><th>server</th><th>备注</th></tr></thead><tbody><tr><td>192.168.56.141</td><td>Prometheus、Node_exporter</td><td>Prometheus 服务、采集插件</td></tr><tr><td>192.168.56.142</td><td>Grafana、Alertmanager、Node_exporter、DingTalk</td><td>监控展示、告警服务、采集插件</td></tr></tbody></table><p>版本：</p><ul><li><p>CentOS：7.9</p></li><li><p>Prometheus：2.37.0</p></li><li><p>Grafana：9.0.3</p></li><li><p>Alertmanager：0.20.0</p></li><li><p>node-exporter：1.4.0</p></li><li><p>Dingding：1.4.0</p></li></ul><p>下载：</p><ul><li>Prometheus：<a href="https://prometheus.io/docs/prometheus/latest/installation/">https://prometheus.io/docs/prometheus/latest/installation/</a></li><li>Grafana：<a href="https://grafana.com/grafana/download">https://grafana.com/grafana/download</a></li><li>Alertmanager：</li><li>node-exporter：</li></ul><h2 id="二、部署"><a href="#二、部署" class="headerlink" title="二、部署"></a>二、部署</h2><blockquote><p>相关组件下载地址：<a href="https://prometheus.io/download/">https://prometheus.io/download/</a></p><p>前提：已经对服务器做了相关初始化，且安装了 docker 容器引擎。</p></blockquote><h3 id="2-1-Prometheus"><a href="#2-1-Prometheus" class="headerlink" title="2.1 Prometheus"></a>2.1 Prometheus</h3><blockquote><p>官方文档：<a href="https://prometheus.io/docs/introduction/overview/">https://prometheus.io/docs/introduction/overview/</a></p></blockquote><p>1、pull 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull bitnami/prometheus:2.37.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本次采用最新稳定版</span></span><br></pre></td></tr></table></figure><p>2、创建监控用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g 2000 monitor</span><br><span class="line">useradd -u 2000 -g monitor monitor</span><br></pre></td></tr></table></figure><p>3、创建相关目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/data/prometheus/&#123;etc,data,rules&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etc：配置文件目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">data：数据目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rules：规则目录</span></span><br></pre></td></tr></table></figure><p>4、创建配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /home/data/prometheus/etc/prometheus.yml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或先启动临时容器再copy也是可以的</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">my global config</span></span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">scrape_timeout is <span class="built_in">set</span> to the global default (10s).</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Alertmanager configuration</span></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      # - alertmanager:9093</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Load rules once and periodically evaluate them according to the global <span class="string">&#x27;evaluation_interval&#x27;</span>.</span></span><br><span class="line">rule_files:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">- <span class="string">&quot;first_rules.yml&quot;</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">- <span class="string">&quot;second_rules.yml&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Here it<span class="string">&#x27;s Prometheus itself.</span></span></span><br><span class="line">scrape_configs:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span></span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line"></span><br><span class="line">    # metrics_path defaults to &#x27;/metrics&#x27;</span><br><span class="line">    # scheme defaults to &#x27;http&#x27;.</span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;localhost:9090&#x27;]</span><br></pre></td></tr></table></figure><p>5、目录授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown monitor. -R /home/data/prometheus</span><br></pre></td></tr></table></figure><p>6、启动容器</p><blockquote><p>运行容器前，先看看这个镜像容器启动后会执行什么命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f &#x27;&#123;&#123;.Config.Cmd&#125;&#125;&#x27; bitnami/prometheus:2.37.0</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220924181619392.png" alt="image-20220924181619392"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --user root \</span><br><span class="line">    --name=prometheus \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -p 9090:9090 \</span><br><span class="line">    -v /home/data/prometheus/etc/prometheus.yml:/etc/prometheus/prometheus.yml \</span><br><span class="line">    -v /home/data/prometheus/rules:/etc/prometheus/rules \</span><br><span class="line">    -v /home/data/prometheus/data:/data/prometheus \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    bitnami/prometheus:2.37.0 \</span><br><span class="line">    --config.file=&quot;/etc/prometheus/prometheus.yml&quot; \</span><br><span class="line">    --storage.tsdb.path=&quot;/data/prometheus&quot; \</span><br><span class="line">    --web.console.libraries=/opt/bitnami/prometheus/conf/console_libraries \</span><br><span class="line">    --web.console.templates=/opt/bitnami/prometheus/conf/consoles \</span><br><span class="line">    --web.enable-lifecycle \</span><br><span class="line">    --web.enable-admin-api</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">至于为什么跟什么--参数，在我前面 docker 原理中有讲到</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker inspect &lt;image&gt;   <span class="comment"># 查看CMD参数</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">想要使用热加载，需指定--web.enable-lifecycle参数</span></span><br></pre></td></tr></table></figure><p>7、访问验证</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220718122145247.png" alt="image-20220718122145247">8、热更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://192.168.56.141:9090/-/reload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我docker方式部署的热加载无效，正在找原因</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原因已经找到，我自己大意，没看镜像的相关信息，已解决</span></span><br></pre></td></tr></table></figure><p>9、语法检测</p><blockquote><p>这一点的好处在于检测你更新配置后是否有语法错误</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec prometheus promtool check config /etc/prometheus/prometheus.yml</span><br></pre></td></tr></table></figure><p>确保无误后即可重启或热更新 Prometheus。 </p><h3 id="2-2-Grafana"><a href="#2-2-Grafana" class="headerlink" title="2.2 Grafana"></a>2.2 Grafana</h3><blockquote><p>官方文档：<a href="https://grafana.com/docs/">https://grafana.com/docs/</a></p></blockquote><p>1、pull 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull grafana/grafana:9.0.3</span><br></pre></td></tr></table></figure><p>2、创建监控用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g 2000 monitor</span><br><span class="line">useradd -u 2000 -g monitor monitor</span><br></pre></td></tr></table></figure><p>3、创建相关目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/data/grafana/data</span><br><span class="line">mkdir -p /home/data/grafana/logs</span><br></pre></td></tr></table></figure><p>4、启动临时容器（copy相关配置文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:3000 --name=tmp grafana/grafana:9.0.3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制配置文件</span></span><br><span class="line">docker cp tmp:/etc/grafana/ /home/data/grafana/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出临时容器</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件名</span></span><br><span class="line">mv /home/data/grafana/grafana /home/data/grafana/etc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除临时容器</span></span><br><span class="line">docker stop tmp</span><br><span class="line">docker rm tmp</span><br></pre></td></tr></table></figure><p>5、目录授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R monitor. /home/data/grafana</span><br><span class="line">chmod 777 -R /home/data/grafana</span><br></pre></td></tr></table></figure><p>6、启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --user root \</span><br><span class="line">    --name=grafana \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -p 3000:3000 \</span><br><span class="line">    -v /home/data/grafana/etc:/etc/grafana \</span><br><span class="line">    -v /home/data/grafana/data:/var/lib/grafana \</span><br><span class="line">    -v /home/data/grafana/logs:/var/log/grafana \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    grafana/grafana:9.0.3</span><br></pre></td></tr></table></figure><p>7、登录验证</p><blockquote><p>默认用户：admin</p><p>默认密码：admin</p><p>输入完成之后，会提示你再次输入新的登录密码。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220718134653471.png" alt="image-20220718134653471"></p><p>功能界面</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220718134806098.png" alt="image-20220718134806098"></p><p>8、忘记密码</p><blockquote><p>如果忘记密码，如何重置？</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法：grafana-cli &lt;登录用户&gt; reset-admin-password &lt;新密码&gt;</span></span><br><span class="line"></span><br><span class="line">docker exec grafana grafana-cli admin reset-admin-password admin@123</span><br></pre></td></tr></table></figure><p>9、插件安装</p><ul><li><p>在线安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker exec grafana grafana-cli plugins list-remote | more   # 查看远程可用插件</span><br><span class="line">id: abhisant-druid-datasource version: 0.0.6</span><br><span class="line">id: aceiot-svg-panel version: 0.0.11</span><br><span class="line">id: ae3e-plotly-panel version: 0.5.0</span><br><span class="line">id: agenty-flowcharting-panel version: 0.9.1</span><br><span class="line">id: aidanmountford-html-panel version: 0.0.2</span><br><span class="line">id: akumuli-datasource version: 1.3.12</span><br><span class="line">id: alexanderzobnin-zabbix-app version: 4.2.10</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>根据这些远程可用插件即可进行安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例：grafana-cli plugins install &lt;插件名&gt; &lt;插件版本号&gt;</span></span><br><span class="line">grafana-cli plugins install alexanderzobnin-zabbix-app 4.2.10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定安装路径</span></span><br><span class="line">grafana-cli --pluginsDir=/data/grafana/plugins plugins install alexanderzobnin-zabbix-app 4.1.5</span><br></pre></td></tr></table></figure><blockquote><p>安装语法</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">COMMANDS:</span><br><span class="line">   install                  install &lt;plugin id&gt; &lt;plugin version (optional)&gt;</span><br><span class="line">   list-remote              list remote available plugins</span><br><span class="line">   list-versions            list-versions &lt;plugin id&gt;</span><br><span class="line">   update, upgrade          update &lt;plugin id&gt;</span><br><span class="line">   update-all, upgrade-all  update all your installed plugins</span><br><span class="line">   ls                       list all installed plugins</span><br><span class="line">   uninstall, remove        uninstall &lt;plugin id&gt;</span><br><span class="line">   help, h                  Shows a list of commands or help for one command</span><br></pre></td></tr></table></figure></li><li><p>手动安装</p><blockquote><p>如果在线安装失败，可进行手动安装</p></blockquote><p>第一步：访问grafana官网 <a href="https://grafana.com/grafana/plugins?orderBy=weight&direction=asc">https://grafana.com/grafana/plugins?orderBy=weight&direction=asc</a></p><p>第二步：查找要下载的插件，如：Pie Chart</p><p>第三步：根据安官网提供的装步骤下载即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在线下载zip包</span></span><br><span class="line">wget -nv https://grafana.com/api/plugins/grafana-piechart-panel/versions/latest/download -O /tmp/grafana-piechart-panel.zip</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或上传</span></span><br><span class="line">unzip -q /tmp/grafana-piechart-panel.zip -d /tmp</span><br><span class="line">mv /tmp/grafana-piechart-panel-* /var/lib/grafana/plugins/grafana-piechart-panel</span><br><span class="line">sudo service grafana-server restar</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-Node-Exporter"><a href="#2-3-Node-Exporter" class="headerlink" title="2.3 Node_Exporter"></a>2.3 Node_Exporter</h3><p><code>node_exporter</code> 作为 Prometheus 的 agent 端，部署在被采集数据的 Host 上，其负责采集数据供 Prometheus 进行抓取。这里采用二进制方式部署即可。</p><p>1、下载二进制包</p><p><a href="https://github.com/prometheus/node_exporter">https://github.com/prometheus/node_exporter</a></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220924165651183.png" alt="image-20220924165651183"></p><p>2、配置 systemd 管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/node_exporter.service</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Node Exporter</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=prometheus</span><br><span class="line">ExecStart=/home/data/prometheus/exporters/node_exporter/node_exporter --collector.textfile.directory /home/data/node_texfile --collector.systemd --collector.systemd.unit-include=&quot;(docker|sshd).service&quot;</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">具体参数参考我有道云笔记《Exporter+Promethue+Grafana监控平台》部分</span></span><br></pre></td></tr></table></figure><p>3、启动并设置开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start node_exporter.service</span><br><span class="line">systemctl enable node_exporter.service</span><br></pre></td></tr></table></figure><p>5、验证</p><blockquote><p>这里以 141 服务器演示</p><p>浏览器访问：<a href="http://192.168.56.141:9100/metrics">http://192.168.56.141:9100/metrics</a></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220924170321058.png" alt="image-20220924170321058"></p><p>&#x3D;&#x3D;这里用 Host 的方式部署即可，当然你也可以通过 Docker 的防暑部署。&#x3D;&#x3D;</p><p>pull 镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull prom/node-exporter:latest</span><br></pre></td></tr></table></figure><p>运行容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=node-exporter \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --privileged=true \</span><br><span class="line">  --hostname=harbor-nexus \</span><br><span class="line">  -p 9100:9100 \</span><br><span class="line">  -v /proc:/host/proc:ro \</span><br><span class="line">  -v /sys:/host/sys:ro \</span><br><span class="line">  -v /:/rootfs:ro \</span><br><span class="line">  prom/node-exporter:latest</span><br></pre></td></tr></table></figure><p>Prometheus 添加配置即可（这里不再演示）</p><h3 id="2-4-Alertmanager"><a href="#2-4-Alertmanager" class="headerlink" title="2.4 Alertmanager"></a>2.4 Alertmanager</h3><blockquote><p>官方文档：<a href="https://prometheus.io/docs/alerting/latest/alertmanager/">https://prometheus.io/docs/alerting/latest/alertmanager/</a></p></blockquote><p>告警采用 Alertmanager 进行管理，其告警原理可简单概括为：当采集数据值达到告警阈值时（在prometheus设定的告警规则），就会触发 Alertmanager 进行告警（经过分组、删除重复等处理），告警通过可邮件等方式发送给相应的运维人员。主要配置步骤：</p><ul><li>设置和配置 Alertmanager；</li><li>配置 Prometheus 与 Alertmanager 之间的对话；</li><li>在 Prometheus 中创建警报规则。</li></ul><p><code>prometheus---&gt;触发阈值---&gt;超出持续时间---&gt;alertmanager---&gt;分组|抑制|静默---&gt;媒体类型---&gt;邮件|钉钉|微信等。</code></p><p>&#x3D;&#x3D;这里我采用单节点部署，一般我们生产环境中 Alertmanager 采用集群部署。&#x3D;&#x3D;</p><h4 id="2-4-1-部署与配置"><a href="#2-4-1-部署与配置" class="headerlink" title="2.4.1 部署与配置"></a>2.4.1 部署与配置</h4><p>1、先看容器启动时会加载哪些参数</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220924193728233.png" alt="image-20220924193728233"></p><p>2、创建本地持久化目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/data/alertmanager/&#123;conf,data,template&#125;</span><br></pre></td></tr></table></figure><p>3、创建配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/data/alertmanager/conf/config.yml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">  smtp_smarthost: &#x27;smtp.163.com:465&#x27;                # 邮箱服务器</span><br><span class="line">  smtp_from: &#x27;zhurongsen_admin@163.com&#x27;             # 邮箱地址（发送用户）</span><br><span class="line">  smtp_auth_username: &#x27;zhurongsen_admin@163.com&#x27;    # 邮箱登录地址</span><br><span class="line">  smtp_auth_password: &#x27;DYKIFIZYKUOXRPFV&#x27;            # 邮箱授权码（注意是授权码，不是登录密码）</span><br><span class="line">  smtp_require_tls: false</span><br><span class="line"></span><br><span class="line">templates:</span><br><span class="line">- &#x27;/etc/alertmanager/template/*.tmpl&#x27;</span><br><span class="line"></span><br><span class="line">route:</span><br><span class="line">  group_by: [&#x27;alertname&#x27;]</span><br><span class="line">  group_wait: 20s</span><br><span class="line">  group_interval: 5m</span><br><span class="line">  repeat_interval: 3h</span><br><span class="line">  receiver: &#x27;ops&#x27;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="built_in">continue</span>: <span class="literal">false</span></span></span><br><span class="line">  routes:</span><br><span class="line">  - match:</span><br><span class="line">      severity: critical</span><br><span class="line">    receiver: &#x27;dev&#x27;</span><br><span class="line">    # continue: true</span><br><span class="line">  - match_re:</span><br><span class="line">      severity: ^(warning|critical)$</span><br><span class="line">    receiver: &#x27;test&#x27;</span><br><span class="line"></span><br><span class="line">receivers:</span><br><span class="line">- name: &#x27;ops&#x27;</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &#x27;2564395767@qq.com&#x27;</span><br><span class="line">    send_resolved: true</span><br><span class="line"></span><br><span class="line">- name: &#x27;dev&#x27;</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &#x27;2318099451@qq.com&#x27;</span><br><span class="line">    send_resolved: true</span><br><span class="line">    </span><br><span class="line">- name: &#x27;test&#x27;</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &#x27;zhurongsen_admin@126.com&#x27;</span><br><span class="line">    send_resolved: true</span><br><span class="line"></span><br><span class="line">inhibit_rules:</span><br><span class="line">  - source_match:</span><br><span class="line">      severity: &#x27;critical&#x27;</span><br><span class="line">    target_match:</span><br><span class="line">      severity: &#x27;warning&#x27;</span><br><span class="line">    equal: [&#x27;alertname&#x27;, &#x27;dev&#x27;, &#x27;instance&#x27;]</span><br></pre></td></tr></table></figure><p>4、运行容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --name=alertmanager \</span><br><span class="line">  --privileged=true \</span><br><span class="line">  -p 9093:9093 \</span><br><span class="line">  -v /home/data/alertmanager/conf/config.yml:/etc/alertmanager/alertmanager.yml \</span><br><span class="line">  -v /home/data/alertmanager/template:/etc/alertmanager/template \</span><br><span class="line">  -v /etc/localtime:/etc/localtime \</span><br><span class="line">  docker.io/prom/alertmanager:latest</span><br></pre></td></tr></table></figure><p>5、web 验证</p><blockquote><p>浏览器访问：<a href="http://192.168.56.142:9093/">http://192.168.56.142:9093/</a></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220924201055281.png" alt="image-20220924201055281"></p><p>6、Prometheus 配置</p><blockquote><p>配置与 Alertmanager 通信</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Alertmanager configuration</span></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - 192.168.56.142:9093</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>Alertmanager 自身也进行了数据采集，自然也可以进行状态监控</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220924204227389.png" alt="image-20220924204227389"></p><h4 id="2-4-2-告警规则"><a href="#2-4-2-告警规则" class="headerlink" title="2.4.2 告警规则"></a>2.4.2 告警规则</h4><p>Alertmanager 配置完成后，还需要在 prometheus 配置文件中进行告警配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rule_files:</span><br><span class="line">  - &quot;first_rules.yml&quot;      # 记录规则</span><br><span class="line">  - &quot;second_rules.yml&quot;     # 告警规则</span><br></pre></td></tr></table></figure><blockquote><p>修改 Prometheus 配置文件，定义这两个文件得路径</p><p>docker 目录映射规则：&#x2F;home&#x2F;data&#x2F;prometheus&#x2F;rules:&#x2F;etc&#x2F;prometheus&#x2F;rules</p><p>所以我只需要在 &#x2F;home&#x2F;data&#x2F;prometheus&#x2F;rules 目录下创建规则即可</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">rule_files:</span><br><span class="line">  - &#x27;/etc/prometheus/rules/*_rules.yml&#x27;</span><br><span class="line">  - &#x27;/etc/prometheus/rules/*_alerts.yml&#x27;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="2-4-2-1-记录规则"><a href="#2-4-2-1-记录规则" class="headerlink" title="2.4.2.1 记录规则"></a>2.4.2.1 记录规则</h5><blockquote><p>新建记录规则文件：简单测试被采集服务器得健康状况</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/data/prometheus/rules</span><br><span class="line">vim host_rules.yml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">groups:</span><br><span class="line">- name: host.rules</span><br><span class="line">  rules:</span><br><span class="line">    - record: instance:node_stat:up</span><br><span class="line">      expr: up&#123;job=&quot;linux&quot;&#125; == 0</span><br></pre></td></tr></table></figure><h5 id="2-4-2-2-告警规则"><a href="#2-4-2-2-告警规则" class="headerlink" title="2.4.2.2 告警规则"></a>2.4.2.2 告警规则</h5><blockquote><p>主机节点基础告警</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/data/prometheus/rules</span><br><span class="line">vim host_alerts.yml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">groups:</span><br><span class="line">- name: host.alter</span><br><span class="line">  rules:</span><br><span class="line">    - alert: host_up</span><br><span class="line">      expr: instance:node_stat:up == 0</span><br><span class="line">      for: 20s</span><br><span class="line">      labels:</span><br><span class="line">        severity: warning</span><br><span class="line">      annotations:</span><br><span class="line">        summary: &quot;&#123;&#123; $labels.instance &#125;&#125; 已停止运行超过20s！请手动检查服务健康状态&quot;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;在 Prometheus 服务上可看见定义的告警规则&#x3D;&#x3D;</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220924232204472.png" alt="image-20220924232204472"></p><h4 id="2-4-3-告警验证"><a href="#2-4-3-告警验证" class="headerlink" title="2.4.3 告警验证"></a>2.4.3 告警验证</h4><p>以上记录规则和告警规则都完成后，现在就模拟服务器故障，看是否发送告警。</p><p>1、先看看健康状态</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220924231451970.png" alt="image-20220924231451970"></p><p>2、停掉 141 服务器的 node_exporter 插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">141</span></span><br><span class="line">systemctl stop node_exporter.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">142</span></span><br><span class="line">systemctl stop node_exporter.service</span><br></pre></td></tr></table></figure><p>下图是我 126 邮箱收到的信息，原因是根据 Alertmanager 的路由策略来分发的，即当收到 wornning 告警时会匹配到该邮件并发送邮件。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220924233102780.png" alt="image-20220924233102780"></p><h2 id="三、应用案例"><a href="#三、应用案例" class="headerlink" title="三、应用案例"></a>三、应用案例</h2><h3 id="3-1-主机发现"><a href="#3-1-主机发现" class="headerlink" title="3.1 主机发现"></a>3.1 主机发现</h3><h4 id="3-1-1-静态配置"><a href="#3-1-1-静态配置" class="headerlink" title="3.1.1 静态配置"></a>3.1.1 静态配置</h4><p><code>node_exporter</code> 部署完成后，还需要在 Prometheus 服务配置文件中进行配置，以此来 pull node_exporter 采集的数据。</p><p>什么是静态配置？所谓的静态配置就是在 Prometheus 配置文件中直接指定目标 Host。</p><p>1、修改 Prometheus 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">    # - targets: [&#x27;localhost:9090&#x27;]</span><br><span class="line"></span><br><span class="line">  - job_name: &#x27;linux&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;192.168.56.141:9100&#x27;, &#x27;192.168.56.142:9100&#x27;]</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>2、Prometheus 服务热更新或重启</p><blockquote><p>先检测语法是否错误再重启或热加载，否则你也是启动不了的。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart prometheus</span><br></pre></td></tr></table></figure><h4 id="3-1-2-动态配置"><a href="#3-1-2-动态配置" class="headerlink" title="3.1.2 动态配置"></a>3.1.2 动态配置</h4><h5 id="3-1-2-1-基于本地文件"><a href="#3-1-2-1-基于本地文件" class="headerlink" title="3.1.2.1 基于本地文件"></a>3.1.2.1 基于本地文件</h5><p>动态配置是将被采集的目标 Host 写入一个 json 文件中，Prometheus 服务会定期去扫描其中的目标主机，如果有新的主机添加，则 Prometheus 自动获取无需热更或重启 Prometheus 服务。</p><p>1、修改 Prometheus 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">  - job_name: &#x27;linux&#x27;</span><br><span class="line">    file_sd_configs:</span><br><span class="line">      - files:</span><br><span class="line">        - /data/prometheus/target/nodes/*.json</span><br><span class="line">        refresh_interval: 1m</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这个 json 文件可以是一个泛文件：<code>/data/prometheus/target/nodes/*.json</code> 表示 Prometheus 或每隔 1 分钟查找 <code>/data/prometheus/target/nodes/</code> 目录下的所有以 <code>.json</code> 结尾的文件。</p><p>2、编写 json 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建存放json目录（对于docker部署的Prometheus，该目录在容器内部必须能读取得到）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上面得配置文件中/data/prometheus/目录已经被映射到/home/data/prometheus/data/目录下了</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所以直接在/home/data/prometheus/data/目录下创建相关文件即可</span></span><br><span class="line">mkdir -p /home/data/prometheus/data/target/nodes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在*.json文件中添加目标主机IP</span></span><br><span class="line">vim host.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  &quot;targets&quot;: [</span><br><span class="line">    &quot;192.168.56.141:9100&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先写一台Host IP进行测试，成功再添加另一台</span></span><br></pre></td></tr></table></figure><p>3、Prometheus 语法检测</p><p>4、等 1 分钟时间后再去验证一下</p><blockquote><p>可看到 141 服务器已经被添加上来了</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220924173134729.png" alt="image-20220924173134729"></p><p>我再次添加 142 主机 IP，再次验证是否自动添加，同样修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  &quot;targets&quot;: [</span><br><span class="line">    &quot;192.168.56.141:9100&quot;,</span><br><span class="line">    &quot;192.168.56.142:9100&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>再次验证：可看到在 1 分钟后 142 服务器被自动添加</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220924173427913.png" alt="image-20220924173427913"></p><p><mark>如何给主机节点添加标签？</mark></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  &quot;targets&quot;: [&quot;192.168.56.141:9100&quot;],</span><br><span class="line">  &quot;labels&quot;: &#123;</span><br><span class="line">    &quot;instance&quot;: &quot;192.168.56.141&quot;,</span><br><span class="line">    &quot;Hostname&quot;: &quot;prometheus&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  &quot;targets&quot;: [&quot;192.168.56.142:9100&quot;],</span><br><span class="line">  &quot;labels&quot;: &#123;</span><br><span class="line">    &quot;instance&quot;: &quot;192.168.56.142&quot;,</span><br><span class="line">    &quot;Hostname&quot;: &quot;grafana&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h5 id="3-1-2-2-基于-DNS"><a href="#3-1-2-2-基于-DNS" class="headerlink" title="3.1.2.2 基于 DNS"></a>3.1.2.2 基于 DNS</h5><p>1、Prometheus 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- job_name: &#x27;webapp&#x27;</span><br><span class="line">  dns_sd_configs:</span><br><span class="line">    - names: [&#x27;app.scedutek.com&#x27;]  # 域名，保证该域名需做了解析</span><br><span class="line">      refresh_interval: 5m         # 5每分钟执行（刷新）一次</span><br><span class="line">      type: A</span><br><span class="line">      port: 80</span><br></pre></td></tr></table></figure><p>2、热更或重启 prometheus</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart prometheus</span><br></pre></td></tr></table></figure><h3 id="3-2-钉钉集成"><a href="#3-2-钉钉集成" class="headerlink" title="3.2 钉钉集成"></a>3.2 钉钉集成</h3><h4 id="3-2-1-钉钉机器人配置"><a href="#3-2-1-钉钉机器人配置" class="headerlink" title="3.2.1 钉钉机器人配置"></a>3.2.1 钉钉机器人配置</h4><blockquote><p>进入钉钉应用进行相关配置</p></blockquote><p>1、创建项目群</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221007102952619.png" alt="image-20221007102952619"></p><p>2、群聊添加告警机器人</p><ul><li><p>项目群中点击设置</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221007103334618.png" alt="image-20221007103334618"></p></li><li><p>点击群智能助手</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221007103440941.png" alt="image-20221007103440941"></p></li><li><p>添加机器人</p><blockquote><p>点击添加机器人</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221007103654901.png" alt="image-20221007103654901"></p><blockquote><p>进一步点击设置进行添加</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221007103802892.png" alt="image-20221007103802892"></p></li><li><p>添加自定义机器人</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221007104024684.png" alt="image-20221007104024684"></p></li></ul><p>3、配置认证（加签）</p><blockquote><ol><li>自定义机器人名字；</li><li>将机器人添加到群组；</li><li>安全设置处加签，并记录加签值（钉钉插件配置文件会用到）</li></ol></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221007104211324.png" alt="image-20221007104211324"></p><p>4、获取机器人 <code>webhook</code></p><blockquote><p>钉钉插件配置文件会用到</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221007104600830.png" alt="image-20221007104600830"></p><h4 id="3-2-2-部署钉钉插件"><a href="#3-2-2-部署钉钉插件" class="headerlink" title="3.2.2 部署钉钉插件"></a>3.2.2 部署钉钉插件</h4><p>1、准备配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建</span></span><br><span class="line">mkdir -p /home/data/dingtalk/conf/&#123;conf,templates&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动临时容器</span></span><br><span class="line">docker run --rm --name=tmp timonwong/prometheus-webhook-dingtalk:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制相关配置文件至Host</span></span><br><span class="line">cd /home/data/dingtalk/conf &amp;&amp; docker cp tmp:/etc/prometheus-webhook-dingtalk/config.yml .</span><br><span class="line">cd /home/data/dingtalk/templates &amp;&amp; docker cp dingtalk:/etc/prometheus-webhook-dingtalk/templates/default.tmpl .</span><br></pre></td></tr></table></figure><p>2、准备告警模板</p><blockquote><p>可以先简单测试一下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /home/data/dingtalk/templates/default.tmpl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; define &quot;ding.link.content&quot; &#125;&#125;</span><br><span class="line">&#123;&#123; if gt (len .Alerts.Firing) 0 -&#125;&#125;</span><br><span class="line">告警列表:</span><br><span class="line">&#123;&#123; template &quot;__text_alert_list&quot; .Alerts.Firing &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123; if gt (len .Alerts.Resolved) 0 -&#125;&#125;</span><br><span class="line">恢复列表:</span><br><span class="line">&#123;&#123; template &quot;__text_resolve_list&quot; .Alerts.Resolved &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上测试无误后，以下为最终模板</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /home/data/dingtalk/templates/default.tmpl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; template &quot;ding.link.content&quot; . &#125;&#125;&#123;&#123; define &quot;__subject&quot; &#125;&#125;[&#123;&#123; .Status | toUpper &#125;&#125;&#123;&#123; if eq .Status &quot;firing&quot; &#125;&#125;:&#123;&#123; .Alerts.Firing | len &#125;&#125;&#123;&#123; end &#125;&#125;] &#123;&#123; .GroupLabels.SortedPairs.Values | join &quot; &quot; &#125;&#125; &#123;&#123; if gt (len .CommonLabels) (len .GroupLabels) &#125;&#125;(&#123;&#123; with .CommonLabels.Remove .GroupLabels.Names &#125;&#125;&#123;&#123; .Values | join &quot; &quot; &#125;&#125;&#123;&#123; end &#125;&#125;)&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;__alertmanagerURL&quot; &#125;&#125;&#123;&#123; $alertURL := &quot;http://192.168.56.142:9093&quot; &#125;&#125; &#123;&#123;- $alertURL -&#125;&#125;/#/alerts?receiver=&#123;&#123; .Receiver &#125;&#125;&amp;tmp=&#123;&#123; .ExternalURL &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line"> </span><br><span class="line">&#123;&#123; define &quot;__text_alert_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class="line">**Labels**</span><br><span class="line">&#123;&#123; range .Labels.SortedPairs &#125;&#125;&gt; - &#123;&#123; .Name &#125;&#125;: &#123;&#123; .Value | markdown | html &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br><span class="line">**Annotations**</span><br><span class="line">&#123;&#123; range .Annotations.SortedPairs &#125;&#125;&gt; - &#123;&#123; .Name &#125;&#125;: &#123;&#123; .Value | markdown | html &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br><span class="line">**Source:** [&#123;&#123; .GeneratorURL &#125;&#125;](&#123;&#123; .GeneratorURL &#125;&#125;)</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line"> </span><br><span class="line">&#123;&#123;/* Firing */&#125;&#125;</span><br><span class="line"> </span><br><span class="line">&#123;&#123; define &quot;default.__text_alert_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class="line"> </span><br><span class="line">**触发时间:** &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.StartsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line">**摘要:** &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class="line"></span><br><span class="line">**描述:** &#123;&#123; .Annotations.description &#125;&#125;</span><br><span class="line"></span><br><span class="line">**监控:** [grafana](http://192.168.25.10:3000/grafana/d/GuJ5DHMnz/fu-wu-qi-jian-kong-tu-biao?orgId=1)</span><br><span class="line"></span><br><span class="line">**详情:**</span><br><span class="line">&#123;&#123; range .Labels.SortedPairs &#125;&#125;&#123;&#123; if and (ne (.Name) &quot;severity&quot;) (ne (.Name) &quot;summary&quot;) &#125;&#125;&gt; - &#123;&#123; .Name &#125;&#125;: &#123;&#123; .Value | markdown | html &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line"> </span><br><span class="line">&#123;&#123;/* Resolved */&#125;&#125;</span><br><span class="line"> </span><br><span class="line">&#123;&#123; define &quot;default.__text_resolved_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class="line"> </span><br><span class="line">**触发时间:** &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.StartsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line">**解除时间:** &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.EndsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class="line"> </span><br><span class="line">**摘要:** &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class="line">**监控:** [grafana](http://192.168.25.10:8000/grafana/d/GuJ5DHMnz/fu-wu-qi-jian-kong-tu-biao?orgId=1)</span><br><span class="line">**详情:**</span><br><span class="line">&#123;&#123; range .Labels.SortedPairs &#125;&#125;&#123;&#123; if and (ne (.Name) &quot;severity&quot;) (ne (.Name) &quot;summary&quot;) &#125;&#125;&gt; - &#123;&#123; .Name &#125;&#125;: &#123;&#123; .Value | markdown | html &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;/* Default */&#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;default.title&quot; &#125;&#125;&#123;&#123; template &quot;__subject&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;default.content&quot; &#125;&#125;#### \[&#123;&#123; .Status | toUpper &#125;&#125;&#123;&#123; if eq .Status &quot;firing&quot; &#125;&#125;:&#123;&#123; .Alerts.Firing | len &#125;&#125;&#123;&#123; end &#125;&#125;\] **[&#123;&#123; index .GroupLabels &quot;alertname&quot; &#125;&#125;](&#123;&#123; template &quot;__alertmanagerURL&quot; . &#125;&#125;)**</span><br><span class="line">&#123;&#123; if gt (len .Alerts.Firing) 0 -&#125;&#125;</span><br><span class="line"></span><br><span class="line">![Firing-img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic1.zhimg.com%2F50%2Fv2-6cf86cca04090c375720cd5a90cb9156_720w.jpg%3Fsource%3D1940ef5c&amp;refer=http%3A%2F%2Fpic1.zhimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1658461957&amp;t=25a208eae036691050ea197ccfbb3a7b)</span><br><span class="line"></span><br><span class="line">**告警通知**</span><br><span class="line">&#123;&#123; template &quot;default.__text_alert_list&quot; .Alerts.Firing &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123; if gt (len .Alerts.Resolved) 0 -&#125;&#125;</span><br><span class="line"></span><br><span class="line">![Resolved-img](https://t10.baidu.com/it/u=3212103844,163082301&amp;fm=30&amp;app=106&amp;f=JPEG?w=640&amp;h=480&amp;s=03801B6418732B8E0C9D2DDA030010A2)</span><br><span class="line"></span><br><span class="line">**告警解除**</span><br><span class="line">&#123;&#123; template &quot;default.__text_resolved_list&quot; .Alerts.Resolved &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;/* Legacy */&#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;legacy.title&quot; &#125;&#125;&#123;&#123; template &quot;__subject&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;legacy.content&quot; &#125;&#125;#### \[&#123;&#123; .Status | toUpper &#125;&#125;&#123;&#123; if eq .Status &quot;firing&quot; &#125;&#125;:&#123;&#123; .Alerts.Firing | len &#125;&#125;&#123;&#123; end &#125;&#125;\] **[&#123;&#123; index .GroupLabels &quot;alertname&quot; &#125;&#125;](&#123;&#123; template &quot;__alertmanagerURL&quot; . &#125;&#125;)**</span><br><span class="line">&#123;&#123; template &quot;__text_alert_list&quot; .Alerts.Firing &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;/* Following names for compatibility */&#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;ding.link.title&quot; &#125;&#125;&#123;&#123; template &quot;default.title&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;ding.link.content&quot; &#125;&#125;&#123;&#123; template &quot;default.content&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line">                                                                          </span><br></pre></td></tr></table></figure><p>3、修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /home/data/dingtalk/conf/config.yml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">templates:</span><br><span class="line">  - /etc/prometheus-webhook-dingtalk/templates/default.tmpl</span><br><span class="line">targets:</span><br><span class="line">  webhook1:</span><br><span class="line">    url: https://oapi.dingtalk.com/robot/send?access_token=8cf8d025f4cffb1c140129360bd373c6fa64a74dc29d6a41fcd07bb5a4537b22 </span><br><span class="line">    secret: SECb7e604e38d9d58456f4811c29daaa8953f39f3bfc5b98cccb664325a1d95fbab</span><br><span class="line">    mention:                            </span><br><span class="line">      all: true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">templates：指定模板位置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webhook1：指定钉钉的Token</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">securet：机器人加签的值</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mention：告警时提醒对象</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   all：提醒所有人</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   mobiles: [<span class="string">&#x27;152***&#x27;</span>, <span class="string">&#x27;134***&#x27;</span>]  提醒指定钉钉用户</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221012134825735.png" alt="image-20221012134825735"></p><p>3、运行钉钉插件容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=dingtalk \</span><br><span class="line">  --restart always \</span><br><span class="line">  -p 8060:8060 \</span><br><span class="line">  -v /home/data/dingtalk/conf/config.yml:/etc/prometheus-webhook-dingtalk/config.yml \</span><br><span class="line">  -v /home/data/dingtalk/templates/default.tmpl:/etc/prometheus-webhook-dingtalk/templates/default.tmpl \</span><br><span class="line">  timonwong/prometheus-webhook-dingtalk:latest --web.enable-ui --config.file=/etc/prometheus-webhook-dingtalk/config.yml</span><br></pre></td></tr></table></figure><p><mark>以上钉钉是通过加签的方式进行认证，接下来介绍通过 IP 的方式进行认证</mark></p><p>同样在钉钉告警机器人处设置，添加 IP，下图解释很清楚，只有同个网络下的请求才能被处理，有一定的局限性，加签的方式却没有这些局限。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221012133219719.png" alt="image-20221012133219719"></p><p><mark>此时钉钉的配置文件如下：</mark></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /home/data/dingtalk/conf/config.yml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">templates:</span><br><span class="line">  - /etc/prometheus-webhook-dingtalk/templates/default.tmpl</span><br><span class="line">targets:</span><br><span class="line">  webhook1:</span><br><span class="line">    url: https://oapi.dingtalk.com/robot/send?access_token=8cf8d025f4cffb1c140129360bd373c6fa64a74dc29d6a41fcd07bb5a4537b22</span><br><span class="line">    mention:</span><br><span class="line">      all: true</span><br><span class="line">      </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">templates：指定模板位置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">webhook1：指定钉钉的Token</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mention：告警时提醒对象</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   all：提醒所有人</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   mobiles: [<span class="string">&#x27;152***&#x27;</span>, <span class="string">&#x27;134***&#x27;</span>]  提醒指定钉钉用户</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221012133818087.png" alt="image-20221012133818087"></p><p>修改完配置重启即可！</p><h4 id="3-2-3-Alertmanager-配置"><a href="#3-2-3-Alertmanager-配置" class="headerlink" title="3.2.3 Alertmanager 配置"></a>3.2.3 Alertmanager 配置</h4><blockquote><p>设置<code>alertmanager</code> 的yml的<code>route</code>与<code>receivers</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">route:</span><br><span class="line">  group_wait: 25s</span><br><span class="line">  group_interval: 30s</span><br><span class="line">  repeat_interval: 1m</span><br><span class="line">  group_by: [&#x27;instance&#x27;]</span><br><span class="line">  receiver: &#x27;web.hook.prometheusalert&#x27;</span><br><span class="line"></span><br><span class="line">receivers:</span><br><span class="line">- name: &#x27;web.hook.prometheusalert&#x27;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: &#x27;http://192.168.56.142:8060/dingtalk/webhook1/send&#x27;</span><br><span class="line">    send_resolved: true</span><br></pre></td></tr></table></figure><blockquote><p>上面的配置是，无论什么的告警级别，都会向钉钉发送告警。而下面的配置则会根据告警级别选择性发送告警</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">route:</span><br><span class="line">  group_by: [&#x27;alertname&#x27;]</span><br><span class="line">  group_wait: 20s</span><br><span class="line">  group_interval: 30s</span><br><span class="line">  repeat_interval: 1m</span><br><span class="line">  receiver: &#x27;ops&#x27;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="built_in">continue</span>: <span class="literal">false</span></span></span><br><span class="line">  routes:</span><br><span class="line">  - match:</span><br><span class="line">      severity: critical</span><br><span class="line">    receiver: &#x27;dev&#x27;</span><br><span class="line">    # continue: true</span><br><span class="line">  - match_re:</span><br><span class="line">      severity: ^(warning|critical)$</span><br><span class="line">    receiver: &#x27;webhook&#x27;</span><br><span class="line"></span><br><span class="line">receivers:</span><br><span class="line">- name: &#x27;dev&#x27;</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &#x27;2222222@qq.com&#x27;</span><br><span class="line">    send_resolved: true</span><br><span class="line">- name: &#x27;webhook&#x27;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: http://192.168.56.142:8060/dingtalk/webhook1/send</span><br><span class="line">    send_resolved: true</span><br></pre></td></tr></table></figure><p>比如：一般信息告警 ——&gt; 普通告警 ——&gt; 灾难告警，不同的告警分别发送给不同的用户。为了快速测试，我选择了无论什么告警我都发送告警。</p><h4 id="3-2-4-告警测试验证"><a href="#3-2-4-告警测试验证" class="headerlink" title="3.2.4 告警测试验证"></a>3.2.4 告警测试验证</h4><h5 id="3-2-4-1-默认告警模板"><a href="#3-2-4-1-默认告警模板" class="headerlink" title="3.2.4.1 默认告警模板"></a>3.2.4.1 默认告警模板</h5><p>如果钉钉配置文件不指定 templates 的位置，则使用默认告警模板。</p><p>1、告警</p><blockquote><p>故意停掉 node_exporter 进程</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221004231759335.png" alt="image-20221004231759335"></p><p>2、恢复</p><blockquote><p>恢复 node_exporter 进程</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221004232000604.png" alt="image-20221004232000604"></p><h5 id="3-2-4-2-自定义告警模板"><a href="#3-2-4-2-自定义告警模板" class="headerlink" title="3.2.4.2 自定义告警模板"></a>3.2.4.2 自定义告警模板</h5><p>1、告警</p><blockquote><p>故意停掉 node_exporter 进程</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221012134640168.png" alt="image-20221012134640168"></p><p>2、恢复</p><blockquote><p>恢复 node_exporter 进程</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221012134722471.png" alt="image-20221012134722471"></p><h3 id="3-3-企业微信集成"><a href="#3-3-企业微信集成" class="headerlink" title="3.3 企业微信集成"></a>3.3 企业微信集成</h3><h4 id="3-3-1-应用告警"><a href="#3-3-1-应用告警" class="headerlink" title="3.3.1 应用告警"></a>3.3.1 应用告警</h4><h5 id="3-3-1-1-创建应用"><a href="#3-3-1-1-创建应用" class="headerlink" title="3.3.1.1 创建应用"></a>3.3.1.1 创建应用</h5><p>1、windows 登录企业微信后台创建应用</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221007095158587.png" alt="image-20221007095158587"></p><blockquote><ol><li>上传 logo；</li><li>填写应用名；</li><li>应用介绍（可选）；</li><li>选择可见范围（即哪些部门&#x2F;成员可使用）。</li></ol></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221007095324360.png" alt="image-20221007095324360"></p><p>2、记录应用的 <code>AgentId</code>、<code>Secret</code></p><blockquote><p><strong>AgentId</strong>：<code>1000002</code></p><p><strong>Secret</strong>：<code>EKmMR_DieISGXZDallbdnFb1OGaV2kADrrjN_UCj56Y</code></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221007095829708.png" alt="image-20221007095829708"></p><p>3、记录企业 ID</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221007100654570.png" alt="image-20221007100654570"></p><p>4、记录部门 ID</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221007114732172.png" alt="image-20221007114732172"></p><h5 id="3-3-1-2-Alertmanager-配置"><a href="#3-3-1-2-Alertmanager-配置" class="headerlink" title="3.3.1.2 Alertmanager 配置"></a>3.3.1.2 Alertmanager 配置</h5><p>看官方配置：<a href="https://prometheus.io/docs/alerting/latest/configuration/#wechat_config">https://prometheus.io/docs/alerting/latest/configuration/#wechat_config</a></p><p>1、配置说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Whether to notify about resolved alerts.</span></span><br><span class="line">[ send_resolved: &lt;boolean&gt; | default = false ]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The API key to use when talking to the WeChat API.</span></span><br><span class="line">[ api_secret: &lt;secret&gt; | default = global.wechat_api_secret ]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The WeChat API URL.</span></span><br><span class="line">[ api_url: &lt;string&gt; | default = global.wechat_api_url ]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The corp <span class="built_in">id</span> <span class="keyword">for</span> authentication.</span></span><br><span class="line">[ corp_id: &lt;string&gt; | default = global.wechat_api_corp_id ]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">API request data as defined by the WeChat API.</span></span><br><span class="line">[ message: &lt;tmpl_string&gt; | default = &#x27;&#123;&#123; template &quot;wechat.default.message&quot; . &#125;&#125;&#x27; ]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Type of the message <span class="built_in">type</span>, supported values are `text` and `markdown`.</span></span><br><span class="line">[ message_type: &lt;string&gt; | default = &#x27;text&#x27; ]</span><br><span class="line">[ agent_id: &lt;string&gt; | default = &#x27;&#123;&#123; template &quot;wechat.default.agent_id&quot; . &#125;&#125;&#x27; ]</span><br><span class="line">[ to_user: &lt;string&gt; | default = &#x27;&#123;&#123; template &quot;wechat.default.to_user&quot; . &#125;&#125;&#x27; ]</span><br><span class="line">[ to_party: &lt;string&gt; | default = &#x27;&#123;&#123; template &quot;wechat.default.to_party&quot; . &#125;&#125;&#x27; ]</span><br><span class="line">[ to_tag: &lt;string&gt; | default = &#x27;&#123;&#123; template &quot;wechat.default.to_tag&quot; . &#125;&#125;&#x27; ]</span><br></pre></td></tr></table></figure><p>2、消息模板定义，用于格式化消息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/data/alertmanager/conf &amp;&amp; vim wechat.tmpl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; define &quot;wechat.default.message&quot; &#125;&#125;</span><br><span class="line">&#123;&#123;- if gt (len .Alerts.Firing) 0 -&#125;&#125;</span><br><span class="line">&#123;&#123;- range $index, $alert := .Alerts -&#125;&#125;</span><br><span class="line">&#123;&#123;- if eq $index 0 -&#125;&#125;</span><br><span class="line">告警类型: &#123;&#123; $alert.Labels.alertname &#125;&#125;</span><br><span class="line">告警级别: &#123;&#123; $alert.Labels.severity &#125;&#125;</span><br><span class="line">=====================</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">===告警详情===</span><br><span class="line">告警详情: &#123;&#123; $alert.Annotations.message &#125;&#125;</span><br><span class="line">故障时间: &#123;&#123; $alert.StartsAt.Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;</span><br><span class="line">===参考信息===</span><br><span class="line">&#123;&#123; if gt (len $alert.Labels.instance) 0 -&#125;&#125;故障实例ip: &#123;&#123; $alert.Labels.instance &#125;&#125;;&#123;&#123;- end -&#125;&#125;</span><br><span class="line">&#123;&#123;- if gt (len $alert.Labels.namespace) 0 -&#125;&#125;故障实例所在namespace: &#123;&#123; $alert.Labels.namespace &#125;&#125;;&#123;&#123;- end -&#125;&#125;</span><br><span class="line">&#123;&#123;- if gt (len $alert.Labels.node) 0 -&#125;&#125;故障物理机ip: &#123;&#123; $alert.Labels.node &#125;&#125;;&#123;&#123;- end -&#125;&#125;</span><br><span class="line">&#123;&#123;- if gt (len $alert.Labels.pod_name) 0 -&#125;&#125;故障pod名称: &#123;&#123; $alert.Labels.pod_name &#125;&#125;&#123;&#123;- end &#125;&#125;</span><br><span class="line">=====================</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- if gt (len .Alerts.Resolved) 0 -&#125;&#125;</span><br><span class="line">&#123;&#123;- range $index, $alert := .Alerts -&#125;&#125;</span><br><span class="line">&#123;&#123;- if eq $index 0 -&#125;&#125;</span><br><span class="line">告警类型: &#123;&#123; $alert.Labels.alertname &#125;&#125;</span><br><span class="line">告警级别: &#123;&#123; $alert.Labels.severity &#125;&#125;</span><br><span class="line">=====================</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">===告警详情===</span><br><span class="line">告警详情: &#123;&#123; $alert.Annotations.message &#125;&#125;</span><br><span class="line">故障时间: &#123;&#123; $alert.StartsAt.Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;</span><br><span class="line">恢复时间: &#123;&#123; $alert.EndsAt.Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;</span><br><span class="line">===参考信息===</span><br><span class="line">&#123;&#123; if gt (len $alert.Labels.instance) 0 -&#125;&#125;故障实例ip: &#123;&#123; $alert.Labels.instance &#125;&#125;;&#123;&#123;- end -&#125;&#125;</span><br><span class="line">&#123;&#123;- if gt (len $alert.Labels.namespace) 0 -&#125;&#125;故障实例所在namespace: &#123;&#123; $alert.Labels.namespace &#125;&#125;;&#123;&#123;- end -&#125;&#125;</span><br><span class="line">&#123;&#123;- if gt (len $alert.Labels.node) 0 -&#125;&#125;故障物理机ip: &#123;&#123; $alert.Labels.node &#125;&#125;;&#123;&#123;- end -&#125;&#125;</span><br><span class="line">&#123;&#123;- if gt (len $alert.Labels.pod_name) 0 -&#125;&#125;故障pod名称: &#123;&#123; $alert.Labels.pod_name &#125;&#125;;&#123;&#123;- end &#125;&#125;</span><br><span class="line">=====================</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br></pre></td></tr></table></figure><p>3、修改 Alertmanager 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/data/alertmanager/template &amp;&amp; vim config.yml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">  smtp_smarthost: &#x27;smtp.163.com:465&#x27;                # 邮箱服务器</span><br><span class="line">  smtp_from: &#x27;zhurongsen_admin@163.com&#x27;             # 邮箱地址（发送用户）</span><br><span class="line">  smtp_auth_username: &#x27;zhurongsen_admin@163.com&#x27;    # 邮箱登录地址</span><br><span class="line">  smtp_auth_password: &#x27;DYKIFIZYKUOXRPFV&#x27;            # 邮箱授权码（注意是授权码，不是登录密码）</span><br><span class="line">  smtp_require_tls: false</span><br><span class="line">  wechat_api_url: &#x27;https://qyapi.weixin.qq.com/cgi-bin/&#x27;   # 企业微信URL</span><br><span class="line">  wechat_api_corp_id: &#x27;wwb5ef1460edf62593&#x27;                 # 企业ID</span><br><span class="line"></span><br><span class="line">templates:</span><br><span class="line">- &#x27;/etc/alertmanager/template/*.tmpl&#x27;                  # 消息模板的位置</span><br><span class="line"></span><br><span class="line">route:</span><br><span class="line">  group_by: [&#x27;alertname&#x27;]</span><br><span class="line">  group_wait: 25s</span><br><span class="line">  group_interval: 30s</span><br><span class="line">  repeat_interval: 1m</span><br><span class="line">  receiver: &#x27;ops&#x27;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="built_in">continue</span>: <span class="literal">false</span></span></span><br><span class="line">  routes:</span><br><span class="line">  - match:</span><br><span class="line">      severity: critical</span><br><span class="line">    receiver: &#x27;dev&#x27;</span><br><span class="line">    # continue: truea</span><br><span class="line">  - match:</span><br><span class="line">      severity: warning</span><br><span class="line">    receiver: &#x27;wechat&#x27;</span><br><span class="line">  - match_re:</span><br><span class="line">      severity: ^(warning|critical)$</span><br><span class="line">    receiver: &#x27;dingtalk&#x27;</span><br><span class="line">    </span><br><span class="line">receivers:</span><br><span class="line">- name: &#x27;ops&#x27;</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &#x27;2564395767@qq.com&#x27;</span><br><span class="line">    send_resolved: true</span><br><span class="line">- name: &#x27;dev&#x27;</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &#x27;2318099451@qq.com&#x27;</span><br><span class="line">    send_resolved: true</span><br><span class="line">- name: &#x27;test&#x27;</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &#x27;zhurongsen_admin@126.com&#x27;</span><br><span class="line">    send_resolved: true</span><br><span class="line">- name: &#x27;dingtalk&#x27;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: http://192.168.56.142:8060/dingtalk/webhook1/send</span><br><span class="line">    send_resolved: true</span><br><span class="line">- name: &#x27;wechat&#x27;</span><br><span class="line">  wechat_configs:</span><br><span class="line">  - send_resolved: true</span><br><span class="line">    to_user: &#x27;@all&#x27;    # 所有用户</span><br><span class="line">    message: &#x27;&#123;&#123; template &quot;wechat.default.message&quot; . &#125;&#125;&#x27;</span><br><span class="line">    agent_id: &#x27;1000002&#x27;                                           # 应用的 AgentId</span><br><span class="line">    api_secret: &#x27;EKmMR_DieISGXZDallbdnFb1OGaV2kADrrjN_UCj56Y&#x27;     # 应用的 Secret</span><br><span class="line"></span><br><span class="line">inhibit_rules:</span><br><span class="line">  - source_match:</span><br><span class="line">      severity: &#x27;critical&#x27;</span><br><span class="line">    target_match:</span><br><span class="line">      severity: &#x27;warning&#x27;</span><br><span class="line">    equal: [&#x27;alertname&#x27;, &#x27;dev&#x27;, &#x27;instance&#x27;]</span><br></pre></td></tr></table></figure><p>4、重启 Alertmanager</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart alertmanager</span><br></pre></td></tr></table></figure><p><mark>我这里的企业微信无法完成认证（企业认证），先暂时搁置。</mark>其实完全可以用机器人来实现。</p><h4 id="3-3-2-机器人告警"><a href="#3-3-2-机器人告警" class="headerlink" title="3.3.2 机器人告警"></a>3.3.2 机器人告警</h4><h5 id="3-3-2-1-添加机企业微信器人"><a href="#3-3-2-1-添加机企业微信器人" class="headerlink" title="3.3.2.1 添加机企业微信器人"></a>3.3.2.1 添加机企业微信器人</h5><p>1、登录企业微信管理后台启用机器人</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221017163651760.png" alt="image-20221017163651760"></p><p>2、启用机器人</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221017163732481.png" alt="image-20221017163732481"></p><p>3、在客户端对应的群聊中添加机器人</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221017153756504.png" alt="image-20221017153756504"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221017153928431.png" alt="image-20221017153928431"></p><p>4、复制生成的 webhook 地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=6bce5460-be7e-4f33-8de9-8b5f0b1c9b9a</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221017154037011.png" alt="image-20221017154037011"></p><p>至此机器人添加完成！</p><h5 id="3-3-2-2-安装企业微信报警插件"><a href="#3-3-2-2-安装企业微信报警插件" class="headerlink" title="3.3.2.2 安装企业微信报警插件"></a>3.3.2.2 安装企业微信报警插件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name wechat \</span><br><span class="line">  --restart always \</span><br><span class="line">  -p 8880:80 \</span><br><span class="line">  guyongquan/webhook-adapter:latest \</span><br><span class="line">  --adapter=/app/prometheusalert/wx.js=/wx=&lt;你的webhook地址&gt;</span><br></pre></td></tr></table></figure><h5 id="3-3-2-3-Alertmanager-配置"><a href="#3-3-2-3-Alertmanager-配置" class="headerlink" title="3.3.2.3 Alertmanager 配置"></a>3.3.2.3 Alertmanager 配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">route:</span><br><span class="line">  group_wait: 0s</span><br><span class="line">  group_interval: 5s</span><br><span class="line">  repeat_interval: 1m</span><br><span class="line">  group_by: [&#x27;instance&#x27;]</span><br><span class="line">  receiver: &#x27;web.hook.prometheusalert&#x27;</span><br><span class="line">...</span><br><span class="line">- name: &#x27;web.hook.prometheusalert&#x27;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: &#x27;http://192.168.56.142:8880/adapter/wx&#x27;</span><br><span class="line">    send_resolved: true</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221017155618326.png" alt="image-20221017155618326"></p><h5 id="3-3-2-4-机器人告警验证"><a href="#3-3-2-4-机器人告警验证" class="headerlink" title="3.3.2.4 机器人告警验证"></a>3.3.2.4 机器人告警验证</h5><p>1、触发告警</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221017161205328.png" alt="image-20221017161205328"></p><p>2、解除告警</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221017161311414.png" alt="image-20221017161311414"></p><h3 id="3-4-Grafana-模板导入"><a href="#3-4-Grafana-模板导入" class="headerlink" title="3.4 Grafana 模板导入"></a>3.4 Grafana 模板导入</h3><blockquote><p>官方参考模板：<a href="https://grafana.com/grafana/dashboards/">https://grafana.com/grafana/dashboards/</a></p></blockquote><p>1、添加数据源为 Prometheus</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221005203521799.png" alt="image-20221005203521799"></p><p>2、导入模板</p><blockquote><p>我此处的模板是官方模板：11074</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221005203718190.png" alt="image-20221005203718190"></p><p>3、数据展示</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221005203029392.png" alt="image-20221005203029392"></p><p>&#x3D;&#x3D;该模板展示了 node 节点的基本情况，在大多数情况下已经够用了，当然你也可以根据自己公司的实际情况进行自定义配置。&#x3D;&#x3D;</p><h3 id="3-5-容器监控"><a href="#3-5-容器监控" class="headerlink" title="3.5 容器监控"></a>3.5 容器监控</h3><p>为了解决 <code>docker stats</code> 的问题(存储、展示)，谷歌开源的 <code>cadvisor</code> 诞生了，&#96;&#96;cadvisor<code>不仅可以搜集一台机器上所有运行的容器信息，还提供基础查询界面和</code>http<code>接口，方便其他组件如</code>Prometheus<code>进行数据抓取，或者</code>cadvisor + influxdb + grafna&#96; 搭配使用。</p><h4 id="3-5-1-Cadvisor-部署"><a href="#3-5-1-Cadvisor-部署" class="headerlink" title="3.5.1 Cadvisor 部署"></a>3.5.1 Cadvisor 部署</h4><p>1、pull 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull google/cadvisor:latest</span><br></pre></td></tr></table></figure><p>2、启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -itd -u root \</span><br><span class="line">  --privileged=true \</span><br><span class="line">  --detach=true \</span><br><span class="line">  --name=cadvisor \</span><br><span class="line">  --restart always \</span><br><span class="line">  -v /:/rootfs:ro \</span><br><span class="line">  -v /var/run:/var/run:rw \</span><br><span class="line">  -v /sys:/sys:ro \</span><br><span class="line">  -v /var/lib/docker/:/var/lib/docker:ro \</span><br><span class="line">  -v /dev/disk/:/dev/disk:ro \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  google/cadvisor:latest</span><br></pre></td></tr></table></figure><p>3、验证</p><blockquote><p><a href="http://192.168.56.142:8080/containers/">http://192.168.56.142:8080/containers/</a></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221005210013965.png" alt="image-20221005210013965"></p><p>4、监控指标展示（TXT）</p><blockquote><p><a href="http://192.168.56.142:8080/metrics">http://192.168.56.142:8080/metrics</a></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221005215249368.png" alt="image-20221005215249368"></p><h4 id="3-5-2-Prometheus-配置"><a href="#3-5-2-Prometheus-配置" class="headerlink" title="3.5.2 Prometheus 配置"></a>3.5.2 Prometheus 配置</h4><p>通过监控指标展示（TXT），类似于 <code>noed_export</code> 我们可以在 Prometheus 进行配置。</p><p>1、配置JOB</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">my global config</span></span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s</span><br><span class="line">  evaluation_interval: 15s</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">scrape_timeout is <span class="built_in">set</span> to the global default (10s).</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Alertmanager configuration</span></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - 192.168.56.142:9093</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Load rules once and periodically evaluate them according to the global <span class="string">&#x27;evaluation_interval&#x27;</span>.</span></span><br><span class="line">rule_files:</span><br><span class="line">  - &#x27;/etc/prometheus/rules/*.yml&#x27;</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&#x27;192.168.56.141:9090&#x27;]</span><br><span class="line">  - job_name: &#x27;Alertmanager&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&#x27;192.168.56.142:9093&#x27;]</span><br><span class="line">  - job_name: &#x27;Linux节点监控&#x27;</span><br><span class="line">    file_sd_configs:</span><br><span class="line">      - files:</span><br><span class="line">        - /data/prometheus/target/nodes/*.json</span><br><span class="line">        refresh_interval: 1m</span><br><span class="line">  - job_name: &#x27;容器监控&#x27;</span><br><span class="line">    file_sd_configs:</span><br><span class="line">      - files:</span><br><span class="line">        - /data/prometheus/target/container/*.json</span><br><span class="line">        refresh_interval: 1m</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、添加主机发现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/data/prometheus/data/target/container/Cadvisor.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">        &quot;targets&quot;: [&quot;192.168.56.141:8080&quot;],</span><br><span class="line">        &quot;labels&quot;: &#123;</span><br><span class="line">                &quot;instance&quot;: &quot;192.168.56.141&quot;,</span><br><span class="line">                &quot;Hostname&quot;: &quot;prometheus&quot;,</span><br><span class="line">                &quot;type&quot;: &quot;container&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">        &quot;targets&quot;: [&quot;192.168.56.142:8080&quot;],</span><br><span class="line">        &quot;labels&quot;: &#123;</span><br><span class="line">                &quot;instance&quot;: &quot;192.168.56.142&quot;,</span><br><span class="line">                &quot;Hostname&quot;: &quot;grafana&quot;,</span><br><span class="line">                &quot;type&quot;: &quot;container&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">        &quot;targets&quot;: [&quot;192.168.56.180:8080&quot;],</span><br><span class="line">        &quot;labels&quot;: &#123;</span><br><span class="line">                &quot;instance&quot;: &quot;192.168.56.180&quot;,</span><br><span class="line">                &quot;Hostname&quot;: &quot;habor-nexus&quot;,</span><br><span class="line">                &quot;type&quot;: &quot;container&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221012145115351.png" alt="image-20221012145115351"></p><p>3、验证</p><blockquote><p>Prometheus 服务上查看健康状态</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221012144650621.png" alt="image-20221012144650621"></p><p>4、容器的 grafana 模板</p><blockquote><p>导入模板ID：14282</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221012145310021.png" alt="image-20221012145310021"></p><p>&#x3D;&#x3D;Prometheus 数据持久化存储方案会在后续介绍，本次就简单介绍到这里，欢迎大家进行补充。&#x3D;&#x3D;</p><h2 id="四、FAQ"><a href="#四、FAQ" class="headerlink" title="四、FAQ"></a>四、FAQ</h2><h3 id="4-1-钉钉配置"><a href="#4-1-钉钉配置" class="headerlink" title="4.1 钉钉配置"></a>4.1 钉钉配置</h3><p>1、错误描述</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">level=error ts=2022-10-04T14:08:53.510Z caller=dingtalk.go:103 component=web target=webhook1 msg=&quot;Failed to send notification to DingTalk&quot; respCode=310000 respMsg=description:关键词不匹配;solution:请联系群管理员查看此机器人的关键词，并在发送的信息中包含此关键词;</span><br></pre></td></tr></table></figure><p>2、解决方案</p><p>在钉钉机器人配置处加签，如下图：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221004222615046.png" alt="image-20221004222615046"></p><h3 id="4-2-其他"><a href="#4-2-其他" class="headerlink" title="4.2 其他"></a>4.2 其他</h3><p>暂时没遇到其他问题，欢迎大家进行补充。</p>]]></content>
      
      
      <categories>
          
          <category> 监控系统 </category>
          
          <category> Prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus - SSL 证书过期监控</title>
      <link href="/posts/articles/2f967c8.html"/>
      <url>/posts/articles/2f967c8.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230328101307841.png" alt="image-20230328101307841"></p><hr><h2 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h2><ol><li><p>数据采集：</p><blockquote><p>Exporter：blackbox_exporter</p><p>Version：0.22.0</p><p>Exporter 下载：<a href="https://prometheus.io/download/#blackbox_exporter">https://prometheus.io/download/#blackbox_exporter</a></p></blockquote></li><li><p>数据存储：</p><blockquote><p>Aplica：Prometheus</p><p>Version：2.37.0</p></blockquote></li><li><p>数据展示：</p><blockquote><p>Aplica：Grafana</p><p>Version：9.0.3</p><p>Dashboards：<a href="https://grafana.com/grafana/dashboards/">https://grafana.com/grafana/dashboards/</a></p><p>Dashboard ID（SSL 证书监控）：13230</p><p>Dashboard ID（HTTP 状态监控）：13659</p><p>Dashboard ID（SSL TCP HTTP 监控）：9965</p></blockquote></li></ol><h2 id="二、部署-Exporter"><a href="#二、部署-Exporter" class="headerlink" title="二、部署 Exporter"></a>二、部署 Exporter</h2><h3 id="2-1-配置-blackbox-exporter"><a href="#2-1-配置-blackbox-exporter" class="headerlink" title="2.1 配置 blackbox_exporter"></a>2.1 配置 blackbox_exporter</h3><p>1、下载 blackbox_exporter 并上传至服务器</p><p>2、解压 blackbox_exporter</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xzf blackbox_exporter-0.22.0.linux-amd64.tar.gz -C /home/data/prometheus/exporters/</span><br><span class="line"><span class="built_in">cd</span> /home/data/prometheus/exporters/</span><br><span class="line"><span class="built_in">mv</span> blackbox_exporter-0.22.0.linux-amd64 blackbox_exporter</span><br></pre></td></tr></table></figure><p>3、修改配置文件</p><blockquote><p>blackbox_exporter 以模块的方式工作，如果你仅仅是获取 SSL 证书过期时间，那部署在任意节点即可。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/data/prometheus/exporters/blackbox_exporter</span><br><span class="line">vim blackbox.yml  <span class="comment"># 启用http_2xx模块</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">modules:</span><br><span class="line">  http_2xx:</span><br><span class="line">    prober: http</span><br><span class="line">    <span class="built_in">timeout</span>: 30s</span><br><span class="line">    http:</span><br><span class="line">      valid_http_versions: [<span class="string">&quot;HTTP/1.1&quot;</span>, <span class="string">&quot;HTTP/2&quot;</span>]</span><br><span class="line">      valid_status_codes: [200]</span><br><span class="line">      method: GET</span><br><span class="line">      preferred_ip_protocol: <span class="string">&quot;ip4&quot;</span></span><br></pre></td></tr></table></figure><p>4、配置 systemd 管理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/blackbox_exporter.service</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=blackbox_exporter</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=prometheus</span><br><span class="line">Group=prometheus</span><br><span class="line">WorkingDirectory=/home/data/prometheus/exporters/blackbox_exporter</span><br><span class="line">ExecStart=/home/data/prometheus/exporters/blackbox_exporter/blackbox_exporter</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>5、启动 blackbox_exporter</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start blackbox_exporter.service</span><br><span class="line">systemctl <span class="built_in">enable</span> blackbox_exporter.service</span><br><span class="line">systemctl status blackbox_exporter.service</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230328102210764.png" alt="image-20230328102210764"></p><h3 id="2-2-配置-Prometheus"><a href="#2-2-配置-Prometheus" class="headerlink" title="2.2 配置 Prometheus"></a>2.2 配置 Prometheus</h3><p>1、修改配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /home/data/prometheus/etc/prometheus.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加JOB</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">  - job_name: <span class="string">&#x27;blackbox_http_2xx&#x27;</span></span><br><span class="line">    metrics_path: /probe</span><br><span class="line">    params:</span><br><span class="line">      module: [http_2xx]</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - https://blog.rabcnops.cn</span><br><span class="line">        - https://www.baidu.com</span><br><span class="line">        ...</span><br><span class="line">    relabel_configs:</span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        target_label: __param_target</span><br><span class="line">      - source_labels: [__param_target]</span><br><span class="line">        target_label: instance</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: 192.168.56.141:9115</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>2、重启（或热加载）Prometheus</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart prometheus</span><br></pre></td></tr></table></figure><h3 id="2-3-Grafana-监控面板"><a href="#2-3-Grafana-监控面板" class="headerlink" title="2.3 Grafana 监控面板"></a>2.3 Grafana 监控面板</h3><p>1、导入模板（在文章开头已经给出模板 ID）</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230328104918498.png" alt="image-20230328104918498"></p><p>2、查看最终效果</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230328101307841.png" alt="image-20230328101307841"></p><p><mark>SSL 证书过期告警部分后面在进行配置！</mark></p>]]></content>
      
      
      <categories>
          
          <category> 监控系统 </category>
          
          <category> Prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 容器文件（数据）共享</title>
      <link href="/posts/articles/7dd3df1e.html"/>
      <url>/posts/articles/7dd3df1e.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220908134844265.png" alt="image-20220908134844265"></p><p><font color=Brown><strong>Author</strong>：rab</font></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有这样一个场景，当我们的服务都是通过容器化方式时，不仅要考虑数据持久化的问题，在 web 集群的时候也要考虑到数据共享的问题，如我需要负载均衡多个 web 服务（这些 web 主要是作为前端展示），且这些 web 服务的功能完全一致，那这时就可用到我们的文件共享技术了。而文件共享又分为两种情况：<code>容器与 Host 共享</code>、<code>容器间数据共享</code>，接下来分别介绍以下这两种文件（数据）共享方式。</p><h2 id="一、共享"><a href="#一、共享" class="headerlink" title="一、共享"></a>一、共享</h2><h3 id="1-1-容器与-Host-共享"><a href="#1-1-容器与-Host-共享" class="headerlink" title="1.1 容器与 Host 共享"></a>1.1 容器与 Host 共享</h3><p>对于容器与 Host 共享间进行数据共享也是比较常用的，比如，当我们运行某个容器的时候，我们需要获取到该容器的配置文件（实现动态配置和持久化），我们一般的做法就是去该服务的官网去下载配置文件或 copy 容器中的配置文件到 Host（其实这就实现了文档的共享了）。</p><p>以 Nginx 为例，看看容器的文件如何共享到 Host 上。</p><p>1、先运行一个 nginx 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name=my-web nginx:1.20.2</span><br></pre></td></tr></table></figure><p>2、将容器数据复制到 Host</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp my-web:/etc/nginx/nginx.conf .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这样就将nginx容器的配置文件复制到Host的当前目录下</span></span><br></pre></td></tr></table></figure><p>3、将 Host 的数据复制到容器内部</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在Host上创建一个测试文件</span></span><br><span class="line">touch web.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将创建的文件copy到容器内部</span></span><br><span class="line">docker cp web.conf my-web:/etc/nginx/conf.d/</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;这样就实现了容器与 Host 间的数据共享了，准确说不叫共享，应该叫做容器和 Host 之间可以互相传输文件或实现 Docker 容器的持久化存储。&#x3D;&#x3D;</p><h3 id="1-2-容器间共享"><a href="#1-2-容器间共享" class="headerlink" title="1.2 容器间共享"></a>1.2 容器间共享</h3><h4 id="1-2-1-bind-mount"><a href="#1-2-1-bind-mount" class="headerlink" title="1.2.1 bind mount"></a>1.2.1 bind mount</h4><p>这种共享方式是多个容器共享 Host 上的数据，即将共享数据放在 bind mount 中，然后将其 mount 到多个容器中，我们以 nginx 容器为例进行演示。</p><p>1、创建共享数据（目录或文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/web/conf.d</span><br><span class="line">touch /data/web/conf.d/web.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我就以一个目录为共享数据</span></span><br></pre></td></tr></table></figure><p>2、运行 nginx 容器（并将共享数据 mount 到容器中）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name=web-1 -v /data/web/conf.d:/etc/nginx/conf.d nginx:1.20.2</span><br><span class="line">docker run -itd --name=web-2 -v /data/web/conf.d:/etc/nginx/conf.d nginx:1.20.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行两个容器，且这两个容器共享同一个Host数据（目录或文件）</span></span><br></pre></td></tr></table></figure><p>3、验证数据是否 mount 到容器中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@shop ~]# docker exec -it web-1 bash</span><br><span class="line">root@5d3c487a409a:/# ls /etc/nginx/conf.d/</span><br><span class="line">web.conf</span><br><span class="line">root@5d3c487a409a:/# exit</span><br><span class="line">exit</span><br><span class="line">[root@shop ~]# docker exec -it web-2 bash</span><br><span class="line">root@fdbb7e98d971:/# ls /etc/nginx/conf.d/</span><br><span class="line">web.conf</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220908115951256.png" alt="image-20220908115951256"></p><p>&#x3D;&#x3D;这样就实现了多个容器共享同个数据。&#x3D;&#x3D;</p><h4 id="1-2-2-volume-container"><a href="#1-2-2-volume-container" class="headerlink" title="1.2.2 volume container"></a>1.2.2 volume container</h4><p>上面是多个容器共享 Host 里面的数据（目录或文件），而这个方式共享则是多个容器共享同个容器中的数据卷（该数据卷类型可以是 bind mount，也可以是 managed volume）。</p><p>1、创建共享容器的数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /root/conf.d</span><br><span class="line">touch /root/conf.d/web.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我就以一个目录为共享数据</span></span><br></pre></td></tr></table></figure><p>2、运行共享容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker create --name=share_data -v /root/conf.d:/etc/nginx/conf.d busybox</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：提供数据共享的这个容器是可以不需要运行的，因此只需创建即可</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220908124543366.png" alt="image-20220908124543366"></p><p>3、其他容器共享刚创建的容器数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name=web-1 --volumes-from share_data nginx:1.20.2</span><br><span class="line">docker run -itd --name=web-2 --volumes-from share_data nginx:1.20.2</span><br></pre></td></tr></table></figure><p>4、验证数据是否被共享</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@shop ~]# docker exec -it web-1 bash</span><br><span class="line">root@5daf7ba565cd:/# ls /etc/nginx/conf.d/</span><br><span class="line">web.conf</span><br><span class="line">root@5daf7ba565cd:/# exit</span><br><span class="line">exit</span><br><span class="line">[root@shop ~]# docker exec -it web-2 bash</span><br><span class="line">root@5510e1b6b4cb:/# ls /etc/nginx/conf.d/</span><br><span class="line">web.conf</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220908124816867.png" alt="image-20220908124816867"></p><p>&#x3D;&#x3D;这有什么好处？其实对于多个容器共享数据（或数据持久化时），在运行容器时不需要指定 Host 的共享目录，而只需指定提供共享数据的容器的容器名即可，这样的话更便于管理。&#x3D;&#x3D;</p><p>还有这样一种场景，如果我需要做容器应用数据迁移（如将容器 web-1 从主机 A 迁移至主机 B），对于以上的数据共享策略来说，还没真正实现数据随容器的迁移而迁移，于是我们可以将数据直接持久化到某个镜像中，这样在做数据迁移的时候就会随镜像的迁移而迁移，而这类方法只适用于数据存储较小或数据改动不是很大容器服务（如配置文件、静态文件等）。要实现这样的功能，就需要我们制作自定义镜像（如 Dockerfile），将数据 copy 到镜像中。</p><p>5、创建 Dockerfile </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/dockerfile &amp;&amp; cd /root/dockerfile</span><br><span class="line">touch web.conf</span><br><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220908131305346.png" alt="image-20220908131305346"></p><p>6、构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t share:v1 .</span><br></pre></td></tr></table></figure><p>7、创建共享容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create --name=share_data-1 share:v1</span><br></pre></td></tr></table></figure><p>8、运行 web 容器并进行数据共享</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name=web-1 --volumes-from share_data-1 nginx:1.20.2</span><br><span class="line">docker run -itd --name=web-2 --volumes-from share_data-1 nginx:1.20.2</span><br></pre></td></tr></table></figure><p>9、验证数据是否被共享</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@shop dockerfile]# docker exec -it web-1 bash</span><br><span class="line">root@34a7c0d48078:/# ls /etc/nginx/conf.d/</span><br><span class="line">web.conf</span><br><span class="line">root@34a7c0d48078:/# exit</span><br><span class="line">exit</span><br><span class="line">[root@shop dockerfile]# docker exec -it web-2 bash</span><br><span class="line">root@d3a5bcf6b10b:/# ls /etc/nginx/conf.d/</span><br><span class="line">web.conf</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220908131129793.png" alt="image-20220908131129793"></p><p>&#x3D;&#x3D;运行的 web 容器能正确读取 共享容器 volume 中数据，我们可看到，创建的共享容器不依赖于 Host 提供的数据，真正实现了 docker 容器服务的迁移即应用，只需要迁移目标提供 docker 环境即可。&#x3D;&#x3D;</p><h2 id="二、小结"><a href="#二、小结" class="headerlink" title="二、小结"></a>二、小结</h2><p>Docker 容器共享可实现容器与 Host 间共享、容器与容器间共享，其中共享 Host 数据的情况用的比较多，容器间共享也有在使用，如一些数据变动较小的容器服务，就可以采用容器间数据共享。</p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 容器间通信</title>
      <link href="/posts/articles/ffa06faa.html"/>
      <url>/posts/articles/ffa06faa.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/docker.png" alt="docker"></p><hr><p>这里分两个部分来讲解，分别为：<code>容器间通信</code>和<code>外部（宿主机外的网络）与容器的通信</code>。</p><h2 id="一、容器间通信"><a href="#一、容器间通信" class="headerlink" title="一、容器间通信"></a>一、容器间通信</h2><h3 id="1-1-IP"><a href="#1-1-IP" class="headerlink" title="1.1 IP"></a>1.1 IP</h3><p>通过 IP 的形式来通信。试想一下，两个容器之间是相互隔离的，因此是无法互相 ping 通的，那如果运行的这两个容器使用的是同一个<code>自定义的网络模式</code>，那是否可以连接呢？答案是可以的。我们来实际测试一下。</p><p>前提条件：</p><ul><li>自定义网络名：net_b</li><li>自定义网络IP段：192.168.4.0&#x2F;244</li></ul><p><strong>创建 A 容器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker run -it --name test_a --network=net_b busybox</span><br><span class="line">/ # ifconfig </span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:04:05  </span><br><span class="line">          inet addr:192.168.4.5  Bcast:192.168.4.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:726 (726.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure><p><strong>创建 B 容器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker run -it --name test_b --network=net_b busybox</span><br><span class="line">/ # ifconfig </span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:04:06  </span><br><span class="line">          inet addr:192.168.4.6  Bcast:192.168.4.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:6 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:516 (516.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure><p>B 容器 ping A 容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/ # ping 192.168.4.5</span><br><span class="line">PING 192.168.4.5 (192.168.4.5): 56 data bytes</span><br><span class="line">64 bytes from 192.168.4.5: seq=0 ttl=64 time=0.117 ms</span><br><span class="line">64 bytes from 192.168.4.5: seq=1 ttl=64 time=0.126 ms</span><br><span class="line">64 bytes from 192.168.4.5: seq=2 ttl=64 time=0.125 ms</span><br></pre></td></tr></table></figure><p>A 容器 ping B 容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/ # ping 192.168.4.6</span><br><span class="line">PING 192.168.4.6 (192.168.4.6): 56 data bytes</span><br><span class="line">64 bytes from 192.168.4.6: seq=0 ttl=64 time=0.177 ms</span><br><span class="line">64 bytes from 192.168.4.6: seq=1 ttl=64 time=0.132 ms</span><br><span class="line">64 bytes from 192.168.4.6: seq=2 ttl=64 time=0.116 ms</span><br></pre></td></tr></table></figure><p>从结果看，A、B 容器可互相 通信。</p><p><strong>创建 C 容器：</strong></p><p>如果该容器为<code>普通 Bridge 网络模式</code>的容器（如：Nginx），那么容器 A 或容器 B 是否能访问 Nginx 容器呢？<code>答案是不能访问</code>。如何解决不可访问的问题？</p><p>如果 Host 上对每个网络都有一条路由，且 Host 打开了路由转发（net.ipv4.ip_forward &#x3D; 1），那不同网桥上的网络就可互相通信。此时，我在 C 容器上加入一块 A、B 容器的虚拟网卡设备，来实现与 A、B 容器的通信。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker network connect net_b nginx</span><br></pre></td></tr></table></figure><p>Nginx 容器里没有查看 IP 地址的命令，可通过 <code>docker inspect nginx</code> 来查看，如下图，Nginx 容器已经分配了 net_b 网络的一个 IP 地址。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214182720975.png" alt="image-20221214182720975"></p><p>Nginx 容器的 index.html 我已经提前更改为：hello zhurs 111</p><p>A 容器 ping 一下 C 容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/ # ping 192.168.4.4</span><br><span class="line">PING 192.168.4.4 (192.168.4.4): 56 data bytes</span><br><span class="line">64 bytes from 192.168.4.4: seq=0 ttl=64 time=0.214 ms</span><br><span class="line">64 bytes from 192.168.4.4: seq=1 ttl=64 time=0.129 ms</span><br><span class="line">64 bytes from 192.168.4.4: seq=2 ttl=64 time=0.225 ms</span><br></pre></td></tr></table></figure><p>A 容器访问 C 容器的 Nginx 内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/ # wget 192.168.4.4</span><br><span class="line">Connecting to 192.168.4.4 (192.168.4.4:80)</span><br><span class="line">saving to &#x27;index.html&#x27;</span><br><span class="line">index.html           100% |**************************************************************************************************************************|    16  0:00:00 ETA</span><br><span class="line">&#x27;index.html&#x27; saved</span><br><span class="line">/ # cat index.html </span><br><span class="line">hello zhurs 111</span><br></pre></td></tr></table></figure><p>从结果看，A 容器可正常访问 C 容器的资源。</p><p><strong>小结：</strong></p><ul><li>结论1：同一个<code>自定义网络（&quot;Driver&quot;: &quot;bridge&quot;）</code>下的所有容器可互相通信。</li><li>结论2：<code>自定义网络（&quot;Driver&quot;: &quot;bridge&quot;）</code> 想与<code>普通 Bridge 网络模式</code>进行通信，可在双方任意一方加入对方的网络模式即可。</li></ul><h3 id="1-2-Docker-DNS-Server"><a href="#1-2-Docker-DNS-Server" class="headerlink" title="1.2 Docker DNS Server"></a>1.2 Docker DNS Server</h3><p>上面提到网络驱动 Driver 为 bridge 的自定义网络模式下的容器可通过 IP 进行通信，但在实际应用场景中，IP 可能并不稳定（除非你自定义 IP），因此，我们可以通过<code>容器名</code>的方式进行通信。</p><p>创建容器名为 dns1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker run -it --network=net_b --name=dns1 busybox</span><br></pre></td></tr></table></figure><p>创建容器名为 dns2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker run -it --network=net_b --name=dns2 busybox</span><br><span class="line">/ # ping dns1</span><br><span class="line">PING dns1 (192.168.4.5): 56 data bytes</span><br><span class="line">64 bytes from 192.168.4.5: seq=0 ttl=64 time=0.107 ms</span><br><span class="line">64 bytes from 192.168.4.5: seq=1 ttl=64 time=0.121 ms</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可见，通过域名可正常通信，该通信方式等效于 IP 通信方式，无非就是一个通过 IP 方式，另一个通过容器名的方式。</p><p>但是需要注意，通过容器名通信的前提是：网络模式必须为<code>自定义网络（&quot;Driver&quot;: &quot;bridge&quot;）</code>模式</p><h3 id="1-3-Joined"><a href="#1-3-Joined" class="headerlink" title="1.3 Joined"></a>1.3 Joined</h3><p>这种模式类似 k8s 中 pod 的多容器情况，在 k8s 中，一个 pod 可有一个或多个容器，一般我们多出的那些容器主要起辅助作用，比如一些日志监控等。Docker 的 Joined 通信类型也类似，该模式的作用是：它可使两个或多个容器共享一个网络栈（网卡、配置信息等），因此 Joined 模式下的所有容器可通过 <code>127.0.0.1</code> 直接通信，你可以将他们想象为是一个整体。</p><p><strong>如何实现？</strong></p><blockquote><p>在运行容器时指定要 joined 的目标容器，成功后将共享目标容器的网络栈。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker run -it --name=join-test --network=container:nginx busybox</span><br><span class="line">/ # ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">388: eth1@if389: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:c0:a8:04:04 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.4.4/24 brd 192.168.4.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">216: eth0@if217: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>查看 IP 信息，完全共享被 joined 目标容器的网络。</p><h2 id="二、容器与外部通信"><a href="#二、容器与外部通信" class="headerlink" title="二、容器与外部通信"></a>二、容器与外部通信</h2><p>其实这是通过 Host 的 iptables 机制来实现的，如下标红的几个示例，当收到 172.19.0.0&#x2F;16 网段的外出包，就把它交给 MASQUERADE 处理，MASQUERADE 则将外出包的源地址转换为 Host 的地址发送出去，实现了网络的 NAT 转换。这也是容器可以与外部通信的原因。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214182740504.png" alt="image-20221214182740504"></p><p>容器能与外界通信，那外部是如何与容器内部通信呢？其实道理是一样的，也是通过 NAT 技术，在结合端口映射的方式实现外部与 Host 下的容器通信。</p><h3 id="2-1-动态端口映射"><a href="#2-1-动态端口映射" class="headerlink" title="2.1 动态端口映射"></a>2.1 动态端口映射</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker run -itd --name=httpd -p 80 httpd</span><br><span class="line">[root@qcloud ~]# docker port httpd</span><br><span class="line">80/tcp -&gt; 0.0.0.0:1024</span><br></pre></td></tr></table></figure><p>该方式会随机生成一个动态端口，且是用于浏览器访问的端口号。</p><h3 id="2-2-静态端口映射"><a href="#2-2-静态端口映射" class="headerlink" title="2.2 静态端口映射"></a>2.2 静态端口映射</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker run -itd --name=httpd-1 -p 8686:80 httpd</span><br><span class="line">[root@qcloud ~]# docker port httpd-1</span><br><span class="line">80/tcp -&gt; 0.0.0.0:8686</span><br></pre></td></tr></table></figure><p>该方式会指定一个静态端口，且是用于浏览器访问的端口号。静态端口映射用的居多。</p><p><strong>小结：</strong></p><p>没映射一个端口，Host 都会启动一个 docker-proxy 进程来处理访问容器的流量。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214182755401.png" alt="image-20221214182755401"></p><hr><p>附件：容器内&#x2F;外通信图解</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/Docker-network.jpg" alt="Docker-network"></p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 环境下 Docker 容器的 PID 变化情况</title>
      <link href="/posts/articles/377c1d95.html"/>
      <url>/posts/articles/377c1d95.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/docker-docs.webp" alt="docker-docs"></p><p>参考1：<a href="https://www.modb.pro/db/100271">https://www.modb.pro/db/100271</a></p><p>参考2：<a href="http://www.asznl.com/post/31">http://www.asznl.com/post/31</a></p><hr><p>有时候你使用 Docker 部署服务，在你的 Linux 系统上你会发现多出来一些进程，那我们如何通过这些进程 ID 来查看是由谁产生的呢？其实很简单，找到它父进程即可。</p><p>首先查看 Docker 服务本身进程 ID：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep dockerd</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221221155349700.png" alt="image-20221221155349700"></p><p>可看到其 Dockerd 服务的子进程 ID 为 31803，父进程 ID 为 1。我们知道，Linux 中有<code>pid 0、pid 1 和 pid 2</code> 三个特殊的进程。</p><ul><li>pid 0：即 <code>“swapper”</code> 进程，是 pid 1 和 pid 2 的父进程；</li><li>pid 1：即 <code>“init”</code> 进程，是用户空间所有进程的父进程；</li><li>pid 2，即 <code>“kthreadd”</code> 进程，是内核空间所有进程的父进程。</li></ul><p>继续查看 <code>31803</code> 的进程信息：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep 31803</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221221155615309.png" alt="image-20221221155615309"></p><p>可以看到作为 <code>31803</code> 的父进程产生了很多子进程，其中就包括所有已经创建的容器进程 ID，可看到我们 Jenkins 容器监听的两个端口进程也是来源于 <code>31803</code>，如下图所示：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221221152518700.png" alt="image-20221221152518700"></p><p>这里就出现一个问题，不同容器之间是相互隔离的，实际就是对进程的隔离，那这些容器运行的进程又在哪找呢？</p><p>我们先看看 <code>containerd-shim</code> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep containerd-shim</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221221161405255.png" alt="image-20221221161405255"></p><p>继续看看 949 的 PPID 是多少？</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221221174525177.png" alt="image-20221221174525177"></p><p>这个时候，我们可以来看看 Docker 的基本架构图。从 Docker 1.11 版本开始，Docker 容器运行就不是简单通过 Docker Daemon 来启动了，而是通过集成 containerd、runc 等多个组件来完成的。虽然 Docker Daemon 守护进程模块在不停的重构，但是基本功能和定位没有太大的变化，一直都是 CS 架构，守护进程负责和 Docker Client 端交互，并管理 Docker 镜像和容器。现在的架构中组件 containerd 就会负责集群节点上容器的生命周期管理，并向上为 Docker Daemon 提供 gRPC 接口。</p><p>参考图1：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221221161634949.png" alt="image-20221221161634949"></p><p>参考图2：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221221163546886.png" alt="image-20221221163546886"></p><p>可以根据以下概念截图进程树查看：</p><ul><li><code>docker CLI</code> 命令行工具，是给用户和 docker daemon 建立通信的客户端</li><li><code>dockerd</code>: 是 docker 架构中一个常驻在后台的系统进程，称为 docker daemon，dockerd 实际调用的还是 containerd 的 api 接口。有了 containerd 之后，dockerd 可以独立升级，以此避免之前 dockerd 升级会导致所有容器不可用的问题。</li><li><code>containerd</code> 是 dockerd 和 runc 之间的一个中间交流组件，docker 对容器的管理和操作基本都是通过 containerd 完成的。containerd 的主要功能有：容器生命周期管理、日志管理、镜像管理、存储管理、容器网络接口及网络管理</li><li><code>containerd-shim</code> 是一个真实运行容器的载体，每启动一个容器都会起一个新的containerd-shim的一个进程， 它直接通过指定的三个参数：容器id，boundle目录（containerd 对应某个容器生成的目录，一般位于：&#x2F;var&#x2F;run&#x2F;docker&#x2F;libcontainerd&#x2F;containerID，其中包括了容器配置和标准输入、标准输出、标准错误三个管道文件），运行时二进制（默认为runC）来调用 runc 的 api 创建一个容器，上面的 docker 进程图中可以直观的显示。其主要作用是：<ul><li>它允许容器运行时(即 runC)在启动容器之后退出，简单说就是不必为每个容器一直运行一个容器运行时(runC)；</li><li>即使在 containerd 和 dockerd 都挂掉的情况下，容器的标准 IO 和其它的文件描述符也都是可用的；</li><li>向 containerd 报告容器的退出状态；</li><li>有了它就可以在不中断容器运行的情况下升级或重启 dockerd，对于生产环境来说意义重大。</li><li><code>runC</code> 是 Docker 公司按照 OCI 标准规范编写的一个操作容器的命令行工具，其前身是 libcontainer 项目演化而来，runC 实际上就是 libcontainer 配上了一个轻型的客户端，是一个命令行工具端，根据 OCI（开放容器组织）的标准来创建和运行容器，实现了容器启停、资源隔离等功能。</li></ul></li><li><code>docker-proxy</code>: 用来做端口映射的，其底层是默认使用iptables实现。</li></ul><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221221181247275.png" alt="image-20221221181247275"></p><p>以上是 docker 19 的架构，但是到了 docker 20 时，结构就有变化了，貌似不再经过 containerd 了。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221221173702572.png" alt="image-20221221173702572"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree -p</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221221180909732.png" alt="image-20221221180909732"></p><p>和上图对比可看到少了 <code>containerd</code></p><p>通过 <code>docker inspect</code> 查看容器本身的 PID，如下图：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect &lt;容器名&gt;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221221181913969.png" alt="image-20221221181913969"></p><p>通过该 PID 就可以查看容器在 Host 中产生的 PID</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221221182051790.png" alt="image-20221221182051790"></p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 容器镜像制作</title>
      <link href="/posts/articles/550cc753.html"/>
      <url>/posts/articles/550cc753.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、镜像制作"><a href="#一、镜像制作" class="headerlink" title="一、镜像制作"></a>一、镜像制作</h2><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><p>通过命令行的交互式方式来生成新镜像，而且是基于运行的容器来制作的新镜像。</p><blockquote><p>语法：docker commit &lt;正在运行的容器名&gt; &lt;自定义新的镜像名:冒号后面为指定镜像版本&gt;</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                                      NAMES</span><br><span class="line">a4cd671837dd   centos7.9:v1      &quot;/bin/bash&quot;              5 minutes ago    Up 5 minutes                                               ctos-1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将正在运行的ctos-1容器提交为新的镜像</span></span><br><span class="line">[root@qcloud ~]# docker commit ctos-1 centos7.9:v1</span><br></pre></td></tr></table></figure><h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><p>第二种方法就是通过 Dockerfile 文件进行镜像构建。实际上就是第一种方法 docker commit xx 指令的集合写在了 Dockerfile 文本中。</p><blockquote><p>语法1：docker build -t &lt;自定义新镜像名&gt; .<br>语法2：docker -f &#x2F;root&#x2F;Dockerfile build -t &lt;自定义新镜像名&gt; .</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t centos7.9:v2 .</span><br><span class="line"></span><br><span class="line">docker build -f /opt/Dockerfile -t centos7.9:v2 .</span><br></pre></td></tr></table></figure><p>在 Dockerfile 文件里的每一个命令都会生成一个镜像，如 RUN yum install -y vim，docker 会生成一个临时镜像来进行相关写操作（其实就是我们提到镜像顶层的<code>容器层</code>），当该写操作执行完成后 Docker 就会 remove 掉这个临时镜像，并类似 docker commit xxx 生成一个新镜像层。</p><h2 id="二、镜像缓存"><a href="#二、镜像缓存" class="headerlink" title="二、镜像缓存"></a>二、镜像缓存</h2><p>Docker 具备镜像缓存功能，也就是说 Docker 会缓存已存在的镜像（我们知道 Dockerfile 里面的每条指令都会生成一层层镜像，这每一层镜像都会被容器引擎 Docker 给缓存下来），当我们通过 Dockerfile 生成新镜像的时候，如果 Dockerfile 里面的语句（如：RUN yum install -y vim）和 Docker 镜像缓存中一致时，则直接使用缓存镜像，大大提高了镜像构建速度，但是有一个前提，就是新构建的镜像的基础镜像需和 Docker 缓存的镜像的基础镜像属于同一镜像才行。</p><p>举个例子：<br>基础镜像：p<br>基础镜像：u</p><p>新镜像1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM P</span><br><span class="line">RUN yum install -y vim</span><br></pre></td></tr></table></figure><p>新镜像2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM p</span><br><span class="line">RUN yum install -y vim</span><br><span class="line">RUN touch /opt/docker.txt</span><br></pre></td></tr></table></figure><p>新镜像3：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM u</span><br><span class="line">RUN yum install -y vim</span><br></pre></td></tr></table></figure><p>构建顺序：新镜像1 ——&gt; 新镜像2 ——&gt; 新镜像3</p><p>是否使用到镜像缓存？</p><ul><li>镜像2：<br>新镜像2 使用到了镜像1的缓存，因为他们的 Dockerfile 都是同一个基础镜像，而且在该基础镜像上，他们都使用了相同的 <code>RUN yum install -y vim（即同个镜像）</code>，此时镜像2 就会直接使用镜像1 的缓存（即省略了安装 vim 的步骤），加快了镜像的构建。</li><li>镜像3：<br>但是镜像3 没有使用到镜像1 或者镜像2 的缓存，因为他们 Dockerfile 文件的基础镜像不同。</li></ul><p>但是有一个问题，如果镜像1、镜像2的 Dockerfile 文件的指令顺序发生变化，那镜像缓存就不会生效，具体如下：</p><p>对上述镜像2的 Dockerfile 的指令顺序做如下修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM p</span><br><span class="line">RUN touch /opt/docker.txt</span><br><span class="line">RUN yum install -y vim</span><br></pre></td></tr></table></figure><p>此时的 Dockerfile 构建的镜像是不会使用到镜像1的缓存的，尽管镜像1和镜像2的基础镜像是一样的，但是镜像2的 Dockerfile 的指令顺序与镜像1的 Dockerfile 指令顺序不一样，所以不会引用镜像1的镜像缓存。尽管内容没发生变化，仅仅顺序发生变化，但是由于 Docker 分层结构特性，Docker 必须重建受影响的镜像。</p><p>查看镜像构建的过程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker history centos7.9:v2</span><br><span class="line">IMAGE          CREATED             CREATED BY                                      SIZE      COMMENT</span><br><span class="line">9f16f2ab2cbc   About an hour ago   /bin/sh -c yum install -y vim &amp;&amp; touch /opt/…   221MB     </span><br><span class="line">eeb6ee3f44bd   7 months ago        /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B        </span><br><span class="line">&lt;missing&gt;      7 months ago        /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B        </span><br><span class="line">&lt;missing&gt;      7 months ago        /bin/sh -c #(nop) ADD file:b3ebbe8bd304723d4…   204MB </span><br></pre></td></tr></table></figure><p>如果不想使用缓存功能，可以在镜像构建时添加 –no-cache</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --no-cache -t centos7.2:v3 .</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 应用架构</title>
      <link href="/posts/articles/ff3ea403.html"/>
      <url>/posts/articles/ff3ea403.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/docker-ct.jpg" alt="docker-ct"></p><p><font color=Brown><strong>Author</strong>：rab</font></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Docker 采用 C&#x2F;S 网络应用模型，其核心组件包括：Docker 客户端（Client）、Docker 服务端（Docker Daemon）、Docker 镜像（Image）、Docker 仓库（Registry）及 Docker 容器（Container）。接下来通过架构图，详细说明一下 Docker 架构组件的功能及作用。</p><h2 id="一、架构"><a href="#一、架构" class="headerlink" title="一、架构"></a>一、架构</h2><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/Docker-cs.jpg" alt="Docker-cs"></p><p>&#x3D;&#x3D;流程&#x3D;&#x3D;：Docker 客户端（Client）向 Docker 服务端（Docker Daemon）发起请求（如 docker pull&#x2F;run&#x2F;build … 等），Docker 服务端（Docker Daemon）收到请求后就会做出响应。假如是一个 pull 请求，那 Docker 服务端（Docker Daemon）就会向 Docker 仓库（Registry）拉取指定的镜像至 Host 本地进行存储，最后再根据 Docker 客户端（Client）的请求决定是否运行容器或做其他请求操作。</p><h2 id="二、组件"><a href="#二、组件" class="headerlink" title="二、组件"></a>二、组件</h2><h3 id="2-1-客户端（Client）"><a href="#2-1-客户端（Client）" class="headerlink" title="2.1 客户端（Client）"></a>2.1 客户端（Client）</h3><p><code>Docker 客户端（Client）</code>，即 Docker 的客户端管理命令（如上图所示），Docker 客户端（Client） 可以与 Docker 服务端（Daemon）处于同个 Host 下，也可以分开（然后可通过 socket&#x2F;RESET API 进行交互）。Docker 客户端（Client）向 Docker 服务端（Daemon）发起请求，然后 Docker 服务端（Daemon）负责构建、运行和分发容器。</p><h3 id="2-2-服务端（Daemon）"><a href="#2-2-服务端（Daemon）" class="headerlink" title="2.2 服务端（Daemon）"></a>2.2 服务端（Daemon）</h3><p><code>Docker 服务端（Daemon）</code>，即以 Linux 后台服务方式运行的服务器组件，作为服务端，其为 Docker 客户端（Client）的相关请求提供服务和响应，并为客户端的请求负责创建、运行容器，及镜像构建与存储等。下图为后台运行的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker.service</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220906111549565.png" alt="image-20220906111549565"></p><p>Docker 服务端（Daemon）只能响应本地 Host 的 Docker 客户端（Client）请求，如果需要运行远程客户端的请求，需要启用 TCP 监听服务，具体步骤如下：</p><p><strong>1、修改 Docker 配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/multi-user.target.wants/docker.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">追加 -H tcp://0.0.0.0</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220906111859229.png" alt="image-20220906111859229"></p><p><strong>2、重启 Docker 服务端（Daemon）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure><p><strong>3、远程请求 Docker 服务端（Daemon）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker -H 10.150.16.95 info</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">10.150.16.95：远程Docker服务端（Daemon）的IP地址</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220906112508384.png" alt="image-20220906112508384"></p><h3 id="2-3-镜像（Image）"><a href="#2-3-镜像（Image）" class="headerlink" title="2.3 镜像（Image）"></a>2.3 镜像（Image）</h3><p>在前面的博文已经提到，Image 是一种分层结构的只读镜像，它可通过服务端运行（run）为容器。而什么是镜像呢？又如何创建镜像呢？我们说，镜像是容器的基础。首先要了解镜像就先要了解一个概念——<code>base 镜像</code>，我们的任何镜像都是基于一个基础（base）镜像构建而成的。</p><p>而什么又是基础镜像呢？你需要明确基础镜像的两个特点：</p><ul><li>基础镜像不依赖于其他镜像，也即是说它是镜像的基本单元；</li><li>其他镜像就可以以基础镜像为基准进行构建。</li></ul><p>那这些（基础）镜像又存储于什么位置呢？一般我们可以通过创建自己的私有 docker 镜像仓库（如 Harbor）或直接使用官方的镜像仓库来实现基础镜像及其他镜像的存储，这就是接下来即将说到的 docker 仓库（Registry）。关于如何拉取 docker 仓库（Registry）中的镜像或其他镜像管理指令，大家可以自行看官方文档，这里不作为重点。</p><p>如下图就是从镜像仓库中拉取下来的镜像：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220906114947026.png" alt="image-20220906114947026"></p><p>&#x3D;&#x3D;那问题来了：既然镜像只读，那我其他镜像又是如何基于某个基础镜像来进行构建的呢？&#x3D;&#x3D;</p><p>关于这个问题我也已经做了总结，大家可以看看我前面的文章<a href="https://blog.csdn.net/IT_ZRS/article/details/124692778?spm=1001.2014.3001.5501">《Docker 的 Copy-on-Write 特性》</a></p><h3 id="2-4-仓库（Registry）"><a href="#2-4-仓库（Registry）" class="headerlink" title="2.4 仓库（Registry）"></a>2.4 仓库（Registry）</h3><p>在镜像一节中我们说了，仓库（Registry）就是用来存放镜像（Image）的，它分为私有镜像仓库和公有镜像仓库，所谓的私有镜像仓库就是你个人或你们公司内部搭建的镜像仓库（如 Harbor），只有你个人或你公司内部相关技术人员可使用。而公有镜像仓库默认是 Docker Hub，由 Docker 公司进行维护，该镜像仓库所有人都可进行下载使用。</p><p>关于如何部署一个私有 Docker 镜像仓库，大家可以参考我这篇部署文档<a href="https://blog.csdn.net/IT_ZRS/article/details/121585898?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166244634216800180625588%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=166244634216800180625588&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-121585898-null-null.nonecase&utm_term=harbor&spm=1018.2226.3001.4450">《Harbor 私有镜像仓库部署》</a></p><h3 id="2-5-容器（Container）"><a href="#2-5-容器（Container）" class="headerlink" title="2.5 容器（Container）"></a>2.5 容器（Container）</h3><p>有了以上的基础后，紧接着就是通过镜像（Image）来运行一个容器实例了，用户可通过 Docker 客户端工具来运行、停止、删除容器了。如下图就是运行中的一个 Nginx 容器实例：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220906110737069.png" alt="image-20220906110737069"></p><p><mark>以上就是 Docker 的基础架构及各组件的功能介绍。</mark></p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Swarm NFS 数据持久化存储</title>
      <link href="/posts/articles/2499c9dc.html"/>
      <url>/posts/articles/2499c9dc.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/mydockerswarm.png" alt="mydockerswarm"></p><hr><h2 id="一、Swarm-集群部署"><a href="#一、Swarm-集群部署" class="headerlink" title="一、Swarm 集群部署"></a>一、Swarm 集群部署</h2><p>可参考我前面的博客<a href="https://blog.csdn.net/IT_ZRS/article/details/126106608?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167341759716800222849511%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=167341759716800222849511&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-126106608-null-null.blog_rank_default&utm_term=swarm&spm=1018.2226.3001.4450">《基于 Linux 的 Docker Swarm 集群部署及应用》</a>。</p><p><strong>本次实验：</strong></p><ul><li><strong>master</strong>：192.168.56.142</li><li><strong>work1</strong>：192.168.56.132</li><li><strong>work2</strong>：192.168.56.180</li></ul><h2 id="二、NFS-服务部署"><a href="#二、NFS-服务部署" class="headerlink" title="二、NFS 服务部署"></a>二、NFS 服务部署</h2><p>可参考我前面的博客<a href="https://blog.csdn.net/IT_ZRS/article/details/109248320?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167341767316800182198924%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=167341767316800182198924&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-109248320-null-null.blog_rank_default&utm_term=NFS&spm=1018.2226.3001.4450">《构建NFS-FTP文件共享存储》</a>。</p><p><strong>本次实验：</strong></p><ul><li><strong>NFS IP</strong>：192.168.56.141</li><li><strong>Shared Dir</strong>：&#x2F;data&#x2F;sharedir</li></ul><h2 id="三、Swarm-使用-NFS"><a href="#三、Swarm-使用-NFS" class="headerlink" title="三、Swarm 使用 NFS"></a>三、Swarm 使用 NFS</h2><blockquote><p>参考1：<a href="https://blog.dahanne.net/2017/11/20/docker-swarm-and-nfs-volumes/">https://blog.dahanne.net/2017/11/20/docker-swarm-and-nfs-volumes/</a></p><p>参考2：<a href="https://blog.csdn.net/lms99251/article/details/108702547">https://blog.csdn.net/lms99251/article/details/108702547</a></p><p>参考3：<a href="https://www.jianshu.com/p/38e1c81af9bd">https://www.jianshu.com/p/38e1c81af9bd</a></p></blockquote><h3 id="3-1-通过-Volume"><a href="#3-1-通过-Volume" class="headerlink" title="3.1 通过 Volume"></a>3.1 通过 Volume</h3><h4 id="3-1-1-创建-Volume"><a href="#3-1-1-创建-Volume" class="headerlink" title="3.1.1 创建 Volume"></a>3.1.1 创建 Volume</h4><p><strong>1、创建 Docker Volume</strong></p><blockquote><p>每个 swarm 节点均创建相同名称的 Docker Volume（名称为 nfsdata）</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --driver <span class="built_in">local</span> \</span><br><span class="line">  --opt <span class="built_in">type</span>=nfs \</span><br><span class="line">  --opt o=addr=192.168.56.141,rw \</span><br><span class="line">  --opt device=:/data/sharedir \</span><br><span class="line">  nfsdata</span><br></pre></td></tr></table></figure><p><strong>2、查看 Volume 是否创建成功</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># swarm集群节点依次进行验证</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230111144019356.png" alt="image-20230111144019356"></p><p><strong>3、查看 Volume 详情</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect nfsdata</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230111144430328.png" alt="image-20230111144430328"></p><blockquote><p>其中：<code>Mountpoint</code> 为 Host 挂载点，<code>Options</code> 为 NFS 服务共享目录信息。</p></blockquote><h4 id="3-1-2-使用-Volume"><a href="#3-1-2-使用-Volume" class="headerlink" title="3.1.2 使用 Volume"></a>3.1.2 使用 Volume</h4><p>1、在 docker swarm 的 master 节点执行创建服务操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --name nginx-nfs-test \</span><br><span class="line">  --publish 1180:80 \</span><br><span class="line">  --mount <span class="built_in">type</span>=volume,<span class="built_in">source</span>=nfsdata,destination=/data/web \</span><br><span class="line">  --replicas 3 \</span><br><span class="line">  nginx:1.20.2</span><br></pre></td></tr></table></figure><p>2、查看 Service 部署情况</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230111145635747.png" alt="image-20230111145635747"></p><h4 id="3-1-3-验证数据共享特性"><a href="#3-1-3-验证数据共享特性" class="headerlink" title="3.1.3 验证数据共享特性"></a>3.1.3 验证数据共享特性</h4><p><strong>1、NFS 服务创建测试数据</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230111150058510.png" alt="image-20230111150058510"></p><p><strong>2、Service 验证是否共享 NFS 数据</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230111150309868.png" alt="image-20230111150309868"></p><p>可见，数据被共享了，当然，你在容器中 <code>/data/web</code> 目录下产生的数据也会被持久化到 NFS 服务上。</p><blockquote><p>当然，Nginx 也是正常运行的</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230111151444719.png" alt="image-20230111151444719"></p><h3 id="3-2-通过-Docker-Stack"><a href="#3-2-通过-Docker-Stack" class="headerlink" title="3.2 通过 Docker Stack"></a>3.2 通过 Docker Stack</h3><blockquote><p><a href="https://docs.docker.com/engine/reference/commandline/stack/">Docker Stack CLI</a></p></blockquote><p>通过 Volume 方式，你会发现每台 swarm 集群 work 节点都需要创建 Volume（如果 master 节点也为 work 节点，也要创建 Volume ）。稍显麻烦，我们可通过 Docker Stack 方式来弥补这点不足，也就是使用 Docker Stack 方式时，就不需要手动创建 Docker Volume 了。</p><h4 id="3-2-1-创建-YAML-文件"><a href="#3-2-1-创建-YAML-文件" class="headerlink" title="3.2.1 创建 YAML 文件"></a>3.2.1 创建 YAML 文件</h4><blockquote><p>参考1：<a href="https://docs.docker.com/engine/reference/commandline/compose/">docker compose CLI</a></p><p>参考2：<a href="https://zhuanlan.zhihu.com/p/387840381">docker compose 配置文件主要配置</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim nginx-compose.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下配置文件会创建一个名为myweb_nginx-nfs-test-1的service</span></span><br><span class="line"><span class="comment"># service命名规则：stack名_service名</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  nginx-nfs-test-1:</span><br><span class="line">    image: nginx:1.20.2</span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 3</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;1181:80&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      my-overlay-network:</span><br><span class="line">        aliases:</span><br><span class="line">          - nginx-test-net</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;mountdata:/data/web&quot;</span></span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  mountdata:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line">    driver_opts:</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">&quot;nfs&quot;</span></span><br><span class="line">      o: <span class="string">&quot;addr=192.168.56.141,rw&quot;</span></span><br><span class="line">      device: <span class="string">&quot;:/data/sharedir&quot;</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  my-overlay-network:</span><br><span class="line">    driver: overlay</span><br></pre></td></tr></table></figure><p>如果你需要在指定的 Node 节点上运行 Service，可在配置文件中进行指定 Node 节点名（新增 placement 字段）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  nginx-nfs-test-1:</span><br><span class="line">    image: nginx:1.20.2</span><br><span class="line">    deploy:</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - <span class="string">&quot;node.hostname==harbor-nexus&quot;</span></span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 3</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><blockquote><p>除了可指定节点名外，还可以指定节点 ID、标签等。</p></blockquote><h4 id="3-2-2-使用-YAML-文件"><a href="#3-2-2-使用-YAML-文件" class="headerlink" title="3.2.2 使用 YAML 文件"></a>3.2.2 使用 YAML 文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c nginx-compose.yml myweb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个名为myweb的stack</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230111155010050.png" alt="image-20230111155010050"></p><blockquote><p>查看 Service 所在集群节点</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230111155249105.png" alt="image-20230111155249105"></p><h4 id="3-2-3-验证数据共享特性"><a href="#3-2-3-验证数据共享特性" class="headerlink" title="3.2.3 验证数据共享特性"></a>3.2.3 验证数据共享特性</h4><p>我在 <code>3.1</code> 小节中已经向 NFS 添加过测试数据了，现在来验证容器内部有没有测试数据。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it myweb_nginx-nfs-test-1.2.dahr1c6am279qgnhf2910449c bash</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230111155733010.png" alt="image-20230111155733010"></p><p><strong>可见，数据已经同步到 swarm service 容器内部。</strong></p><p><mark>至此，Docker Swarm 的数据持久化问题已经解决。当然，除了 NFS 共享存储外，还有 Ceph、ClusterFS 等存储也能实现。实际生产中大家自行修改使用即可。</mark></p><p><strong>这里你有没有考虑过一个问题：当我们有多个模块的时候，NFS 的共享存储目录要怎么规划呢？</strong></p><p>其实很简单，每个模块依次添加即可，如下案例（假设有 web、center 两个模块）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    image: nginx:1.20.2</span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 3</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;1080:80&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      web-net:</span><br><span class="line">        aliases:</span><br><span class="line">          - web-net-test</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;mywebdata:/data/web&quot;</span></span><br><span class="line">  center:</span><br><span class="line">    image: center:1.20.2</span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 3</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8181:8080&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      web-net:</span><br><span class="line">        aliases:</span><br><span class="line">          - web-net-test</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;mycenterdata:/data/center&quot;</span></span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  mywebdata:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line">    driver_opts:</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">&quot;nfs&quot;</span></span><br><span class="line">      o: <span class="string">&quot;addr=192.168.56.141,rw&quot;</span></span><br><span class="line">      device: <span class="string">&quot;:/data/sharedir/web&quot;</span></span><br><span class="line">  mycenterdata:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line">    driver_opts:</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">&quot;nfs&quot;</span></span><br><span class="line">      o: <span class="string">&quot;addr=192.168.56.141,rw&quot;</span></span><br><span class="line">      device: <span class="string">&quot;:/data/sharedir/center&quot;</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  web-net:</span><br><span class="line">    driver: overlay</span><br></pre></td></tr></table></figure><blockquote><p>注意：要在 NFS 共享目录 &#x2F;data&#x2F;sharedir&#x2F; 下创建对应的目录<br>如：mkdir &#x2F;data&#x2F;sharedir&#x2F;{web,center}<br>之后，容器产生的数据将会存储于对应的目录下。</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Docker_Swarm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible 快速入门</title>
      <link href="/posts/articles/7fbc334.html"/>
      <url>/posts/articles/7fbc334.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ansible-快速入门"><a href="#Ansible-快速入门" class="headerlink" title="Ansible 快速入门"></a><center>Ansible 快速入门</center></h1><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/timg.jpg" alt="timg"></p><p><a href="https://docs.ansible.com/ansible/latest/">官方文档</a></p><hr><h2 id="一、Ansible-是什么"><a href="#一、Ansible-是什么" class="headerlink" title="一、Ansible 是什么?"></a>一、Ansible 是什么?</h2><p><code>Ansible</code>它是一个 IT 自动化工具。它可以配置系统、部署软件并协调更高级的 IT 任务，例如持续部署或零停机时间滚动更新等。Ansible 的主要目标是简单和易用，它还非常关注安全性和可靠性，具有最少的移动部件，其使用 <code>OpenSSH</code> 进行传输。</p><h2 id="二、Ansible-安装"><a href="#二、Ansible-安装" class="headerlink" title="二、Ansible 安装"></a>二、Ansible 安装</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><h4 id="2-1-1-Python-方式"><a href="#2-1-1-Python-方式" class="headerlink" title="2.1.1 Python 方式"></a>2.1.1 Python 方式</h4><p>1、安装最新版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install --user ansible</span><br></pre></td></tr></table></figure><p>2、安装指定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install --user ansible-core==2.12.3</span><br></pre></td></tr></table></figure><p>3、升级 Ansible</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install --upgrade --user ansible</span><br></pre></td></tr></table></figure><p>4、验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible --version</span><br></pre></td></tr></table></figure><p>5、Ansible 的 shell补全</p><ul><li><p>安装 argcomplete</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install --user argcomplete</span><br></pre></td></tr></table></figure></li><li><p>配置 argcomplete</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局配置：要求 bash 4.2</span></span><br><span class="line">activate-global-python-argcomplete</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果您没有 bash 4.2，则必须单独注册每个脚本</span></span><br><span class="line">eval $(register-python-argcomplete ansible)</span><br><span class="line">eval $(register-python-argcomplete ansible-config)</span><br><span class="line">eval $(register-python-argcomplete ansible-console)</span><br><span class="line">eval $(register-python-argcomplete ansible-doc)</span><br><span class="line">eval $(register-python-argcomplete ansible-galaxy)</span><br><span class="line">eval $(register-python-argcomplete ansible-inventory)</span><br><span class="line">eval $(register-python-argcomplete ansible-playbook)</span><br><span class="line">eval $(register-python-argcomplete ansible-pull)</span><br><span class="line">eval $(register-python-argcomplete ansible-vault)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-1-2-Yum-方式"><a href="#2-1-2-Yum-方式" class="headerlink" title="2.1.2 Yum 方式"></a>2.1.2 Yum 方式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br><span class="line">sudo yum install ansible</span><br></pre></td></tr></table></figure><p>其他特定系统安装请看<a href="https://docs.ansible.com/ansible/latest/installation_guide/installation_distros.html">官方文档</a>。</p><h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><p>配置文件位于 <code>/etc/ansible</code> 下，Ansible 中的某些设置可通过配置文件 (ansible.cfg) 进行调整。对于大多数用户来说，Inventory 配置已经足够了。</p><h2 id="三、快速入门"><a href="#三、快速入门" class="headerlink" title="三、快速入门"></a>三、快速入门</h2><h3 id="3-1-三组件"><a href="#3-1-三组件" class="headerlink" title="3.1 三组件"></a>3.1 三组件</h3><p>一个基本的 Ansible 环境包含三个主要组件：<code>Control node</code>、<code>Managed node</code>、<code>Inventory</code></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220922100244734.png" alt="image-20220922100244734"></p><p><strong>1、Control node</strong></p><p>安装了 Ansible 的系统，安装完成后，可以在控制节点上运行 Ansible 相关命令，例如<code>ansible</code>或<code>ansible-inventory</code>。</p><p><strong>2、Managed node</strong></p><p>Ansible 控制的远程系统或主机，即接下来要说到的 hosts 文件中的主机清单。</p><p><strong>3、Inventory</strong></p><p>逻辑组织的受管节点列表，在控制节点上创建一个清单以向 Ansible 描述主机部署。</p><h3 id="3-2-基础使用"><a href="#3-2-基础使用" class="headerlink" title="3.2 基础使用"></a>3.2 基础使用</h3><blockquote><p>我的 ansible 机器为：192.168.56.132</p></blockquote><p><strong>1、安装 Ansible</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install --user ansible</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或 yum 安装</span></span><br><span class="line">yum install -y ansible</span><br></pre></td></tr></table></figure><p><strong>2、添加主机列表</strong></p><blockquote><p>通过将一个或多个远程系统的 IP 地址或完全限定域名 (FQDN) 添加到<code>/etc/ansible/hosts</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[web]</span><br><span class="line">192.168.56.132</span><br><span class="line">192.168.56.180</span><br></pre></td></tr></table></figure><p><strong>3、验证清单中的主机</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all --list-hosts</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hosts (2):</span><br><span class="line">  192.168.56.132</span><br><span class="line">  192.168.56.180</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220922101103515.png" alt="image-20220922101103515"></p><p><strong>3、设置 SSH 连接</strong></p><blockquote><p>将 <code>Control node</code> 主机的 SSH 公密添加到每个远程系统（主机）上的 <code>authorized_keys</code> 文件中，以便 Ansible 可以连接到受管节点。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id 192.168.56.180</span><br></pre></td></tr></table></figure><p>如果控制节点上的用户名在主机上不同，则需要将<code>-u</code>选项与<code>ansible</code>命令一起传递。</p><p><strong>4、Ping 受管节点</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m ping</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">192.168.56.180 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.56.132 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220922101829925.png" alt="image-20220922101829925"></p><h3 id="3-3-创建-Inventory"><a href="#3-3-创建-Inventory" class="headerlink" title="3.3 创建 Inventory"></a>3.3 创建 Inventory</h3><p>Inventory 文件位于 Control node 节点上（即安装 ansible 的主机）。使用清单文件，Ansible 可以通过单个命令管理大量主机，我们也可以直接将受管节点添加到<code>/etc/ansible/hosts</code>文件中，来实现批量主机管理。在 Inventory 文件编写中，其语法格式可以是<code>INI</code>或<code>YAML</code>格式，建立一个 Inventory 的基本步骤如下：</p><ul><li>在您的控制节点上打开一个终端窗口。</li><li>在任何目录中创建一个新的库存文件<code>inventory.yaml</code>并打开它进行编辑。</li><li>为您的主机添加一个新组，然后使用该字段指定每个受管节点的 IP 地址或完全限定域名 (FQDN) <code>ansible_host</code>。</li></ul><p><strong>1、创建名为 inventory.yaml 的 Inventory</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat inventory.yaml</span><br><span class="line"></span><br><span class="line">mywebhost:</span><br><span class="line">  hosts:</span><br><span class="line">    vm01:</span><br><span class="line">      ansible_host: 192.168.56.132</span><br><span class="line">    vm02:</span><br><span class="line">      ansible_host: 192.168.56.180</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明：mywebhost 为组名</span></span><br></pre></td></tr></table></figure><p><strong>2、验证 Inventory</strong></p><blockquote><p>如果你在主目录以外的目录中创建了清单，请使用该<code>-i</code>选项指定完整路径。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-inventory -i inventory.yaml --list</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220922104607536.png" alt="image-20220922104607536"></p><p><strong>2、ping 清单中的受管节点</strong></p><blockquote><p>在此示例中，组名称是<code>mywebhost</code>，此时可以使用<code>ansible</code>命令。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible mywebhost -m ping -i inventory.yaml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vm01 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">vm02 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220922104904636.png" alt="image-20220922104904636"></p><p><mark>注意 Inventory 与 hosts 文件的区别：</mark></p><p>Ansible 的主机清单是 Inventory，我们可以通过创建 <code>*.yaml</code> 文件来作为我们的主机清单（Inventory）文件，如果你没有创建这个 yaml 文件，那 Ansible 的默认主机清单文件就是 hosts，这个文件在安装 Ansible 时默认存在 的。当找不到 *.yaml 主机清单文件时，就会去找 hosts 文件。</p><p>由于 hosts 文件是默认的主机清单文件，如果你想使用你自定义的其他主机清单文件，需通过 <code>-i</code> 参数指定，如 <code>ansible mywebhost -m ping -i inventory.yaml</code>，否则它会默认去找 hosts 文件。</p><h3 id="3-4-创建-playbook"><a href="#3-4-创建-playbook" class="headerlink" title="3.4 创建 playbook"></a>3.4 创建 playbook</h3><p><code>YAML</code>剧本是 Ansible 用于部署和配置托管节点的自动化蓝图。看看几个重要元素：</p><ul><li><p><strong>Playbook</strong></p><p>定义 Ansible 从上到下执行操作以实现总体目标的顺序的剧本列表。</p></li><li><p><strong>Play</strong></p><p>映射到清单中的受管节点的有序任务列表。</p></li><li><p><strong>Task</strong></p><p>定义 Ansible 执行的操作的一个或多个模块的列表。</p></li><li><p><strong>Module</strong></p><p>Ansible 在托管节点上运行的代码或二进制单元。</p></li></ul><p><mark>创建一个 playbook 的步骤如下：</mark></p><ul><li><p>在控制节点上打开一个终端窗口。</p></li><li><p>在任何目录中创建一个新的 playbook 文件<code>playbook.yaml</code>并打开它进行编辑。</p></li></ul><p><strong>1、创建 playbook</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">playbook.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">My</span> <span class="string">first</span> <span class="string">play</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">mywebhost</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ping</span> <span class="string">my</span> <span class="string">hosts</span></span><br><span class="line">     <span class="attr">ansible.builtin.ping:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Print</span> <span class="string">message</span></span><br><span class="line">     <span class="attr">ansible.builtin.debug:</span></span><br><span class="line">       <span class="attr">msg:</span> <span class="string">Hello</span> <span class="string">world</span></span><br><span class="line">       </span><br><span class="line"><span class="comment"># 可看到我的主机清单指定的是mywebhost组，而这个组是在我自定义的Inventory文件中定义的</span></span><br><span class="line"><span class="comment"># 因此我在运行playbook时需要-i指定自定义的Inventory文件，如果不指定，ansible就回去找默认的hosts文件，而这个文件中根本没有mywebhost这个组名，所以会报错。</span></span><br></pre></td></tr></table></figure><p><strong>2、运行 playbook</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ansible-playbook</span> <span class="string">-i</span> <span class="string">inventory.yaml</span> <span class="string">playbook.yaml</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220922112600610.png" alt="image-20220922112600610"></p><p><mark>剧本的执行过程：</mark></p><ul><li>任务隐式运行。默认情况下，Ansible 会收集可以在 playbook 中使用的库存信息（Inventory），<code>Gather Facts</code>。</li><li>每个任务的状态。每个任务都有一个状态，<code>ok</code>这意味着它运行成功。</li><li>对每个主机的剧本中所有任务的结果进行总结的剧本回顾。在此示例中，共有三个任务，因此<code>ok=3</code>表明每个任务都运行成功。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 自动化运维 </category>
          
          <category> Ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 数据存储及持久化应用</title>
      <link href="/posts/articles/ff15f591.html"/>
      <url>/posts/articles/ff15f591.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/cunchu.webp" alt="cunchu"></p><p><font color=Brown><strong>Author</strong>：rab</font><br><font color=Brown><strong>Date</strong>：2022&#x2F;08&#x2F;09</font><br><font color=Brown><strong>Blog</strong>：<a href="https://blog.csdn.net/IT_ZRS?type=blog"><font color=Brown>https://blog.csdn.net/IT_ZRS?type&#x3D;blog</font></a></font></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Docker 为容器提供了两种存放数据的资源：</p><ul><li>storage driver：管理镜像层和容器层；</li><li>data volume：管理容器应用数据。</li></ul><h2 id="一、Storage-Driver"><a href="#一、Storage-Driver" class="headerlink" title="一、Storage Driver"></a>一、Storage Driver</h2><h3 id="1-1-Storage-Driver-介绍"><a href="#1-1-Storage-Driver-介绍" class="headerlink" title="1.1 Storage Driver 介绍"></a>1.1 Storage Driver 介绍</h3><p>不同操作系统 Docker 默认的存储驱动可能不同，如 Ubuntu 15.04 使用的存储驱动是 aufs，底层文件系统时 extfs。而我下图中是 CentOS 7.9。其 Docker 存储驱动就是 overlay2。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220809122145202.png" alt="image-20220809122145202"></p><blockquote><p>查看存储驱动</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220809121816382.png" alt="image-20220809121816382"></p><p>之前博客中提到 Docker 的 Copy-on-Write 特性，之所以可以实现这样的特性，主要是因为我们 Docker Storage Driver 存储驱动，它实现了多层数据堆叠，并为用户提供一个单一的合并之后的统一视图。有兴趣的可以去看看我前面的博客<a href="https://blog.csdn.net/IT_ZRS/article/details/124692778">《Docker 的 Copy-on-Write 特性》</a>。</p><h3 id="1-2-Storage-Driver-类型"><a href="#1-2-Storage-Driver-类型" class="headerlink" title="1.2 Storage Driver 类型"></a>1.2 Storage Driver 类型</h3><p>Docker 支持多种 Storage Driver，主要有这几种类型：</p><ul><li><p>VFS</p></li><li><p>ZFS</p></li><li><p>Btrfs</p></li><li><p>AUFS</p></li><li><p>OverlayFS</p></li><li><p>Device Mapper</p></li></ul><p>对于 DOcker 使用哪种类型的存储引擎，官方给出的答案是：默认使用你当前 Linux 发行版的 Storage Driver，因为默认的 Storage Driver 是最稳定存储引擎，在发行版上经过了严格的测试。</p><p>使用 Storage Driver 数据存储有什么优势呢？对于那些无状态（即无需数据持久化到本地）的容器，Storage Driver  的优势将是毫无疑问的，因为它能从镜像直接创建、删除（且删除时生成的数据也一并随容器删除）。</p><p>而对于需要做数据持久化的容器，Storage Driver 显然就不如 Data Volume，也就是对于这类有状态的容器，我们要用到 Docker 的 Data Volume 来做容器数据持久化存储。</p><h2 id="二、Data-Volume"><a href="#二、Data-Volume" class="headerlink" title="二、Data Volume"></a>二、Data Volume</h2><h3 id="2-1-Data-Volume-介绍"><a href="#2-1-Data-Volume-介绍" class="headerlink" title="2.1 Data Volume 介绍"></a>2.1 Data Volume 介绍</h3><p>Data Volume 实际上是我们宿主机上的目录或文件，我们通过挂载的方式将 Host 的目录或文件挂载到容器内部文件系统，有时也可以说是把容器文件系统映射到宿主机上。</p><p>这样一来容器产生的数据就可以往 Volume 写入数据了，并持久化到 Host 本地了，即使该容器被删除了，再次运行一个新的容器，状态也是与之前保持一致的。</p><h3 id="2-2-Data-Volume-类型"><a href="#2-2-Data-Volume-类型" class="headerlink" title="2.2 Data Volume 类型"></a>2.2 Data Volume 类型</h3><h4 id="2-2-1-bind-mount"><a href="#2-2-1-bind-mount" class="headerlink" title="2.2.1 bind mount"></a>2.2.1 bind mount</h4><p>该类型是将 Host 上已存在的目录或文件 mount 到容器。</p><p>1、具体案例</p><p>看下面案例：其语法结构为 <code>-v &lt;Host_path&gt;:&lt;container_path(不存在则创建)&gt;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">--name=elasticsearch \</span><br><span class="line">--privileged=true \</span><br><span class="line">--restart=always \</span><br><span class="line">--net=host \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-v /data/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /data/elasticsearch/logs:/usr/share/elasticsearch/logs \</span><br><span class="line">-v /data/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-v /data/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-e ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot; \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; \</span><br><span class="line">-d elasticsearch:6.8.20</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;如果 <code>container_path</code> 存在数据，则会被隐藏，取而代之的是 Host mount 的目录或文件，这与 Linux 中 mount 效果一样。</p><p>2、带有权限的 bind mount</p><p>类似 Linux 的 mount，在挂载时可指定挂载目录权限，默认时<code>读写权限</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">...</span><br><span class="line">-v /data/elasticsearch/plugins:/usr/share/elasticsearch/plugins:ro \</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ro：只读</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rw：读写</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;小结：&#x3D;&#x3D;从上面的案例上看，bind mount 可实现对目录或文件的 mount 操作，可根据你的实际情况操作。</p><h4 id="2-2-2-docker-managed-volume"><a href="#2-2-2-docker-managed-volume" class="headerlink" title="2.2.2 docker managed volume"></a>2.2.2 docker managed volume</h4><p>与 bind mount 不同的是，<code>docker managed volume</code> 不需要指定 mount 源，只需指明挂载点（mount point）即可。</p><p>1、案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=tmp -p 8280:80 -v /usr/local/apache2/htdocs httpd</span><br></pre></td></tr></table></figure><blockquote><p>我只指定了容器内部挂载点，并没有指定 Host 源目录&#x2F;文件，那这个数据持久化到 Host 的哪个位置呢？</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220809150246050.png" alt="image-20220809150246050"></p><p>继续查看容器的详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker inspect tmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">看 Mount 部分</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220809150430133.png" alt="image-20220809150430133"></p><p>2、如何持久化呢？</p><p>此时上图红框中的部分就是数据持久化目录了，就可以像 bind mount 对持久化目录&#x2F;文件进行相关更新了。具体如下：</p><ul><li><p>当前内容</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220809151421398.png" alt="image-20220809151421398"></p></li><li><p>内容更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker_swarm_work1 _data]# pwd</span><br><span class="line">/var/lib/docker/volumes/fb39b435deb9bd50531b7da00ff1313f94bed8e489afb0ff69f27b77cd8a9253/_data</span><br><span class="line">[root@docker_swarm_work1 _data]# cat index.html </span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">[root@docker_swarm_work1 _data]# echo &#x27;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Update It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#x27; &gt; index.html</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220809151823689.png" alt="image-20220809151823689"></p></li><li><p>删除容器并新起一个容器（验证数据持久化）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker stop tmp &amp;&amp; docker rm tmp</span><br><span class="line">docker run -d --name=tmp -p 8288:80 -v /usr/local/apache2/htdocs httpd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再起一个新容器的话，docker 又会重新创建一个随机的持久话目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但是我们之前的数据依然是在红框的上一个目录里面的</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220809152528267.png" alt="image-20220809152528267"></p></li></ul><h3 id="2-3-查看-Data-Volume"><a href="#2-3-查看-Data-Volume" class="headerlink" title="2.3 查看 Data Volume"></a>2.3 查看 Data Volume</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220809154016353.png" alt="image-20220809154016353"></p><p>但是需注意，<code>docker volume ls</code> 只能查看 <code>docker managed volume</code> 类型的 <code>Data Volume</code>， <code>bind mount</code> 的 <code>Data Volume</code> 需要通过 <code>docker inspect &lt;container_name&gt;</code> 来查看。</p><p>&#x3D;&#x3D;如果我想在删除容器时，连 volume 也一并删除，如何操作？&#x3D;&#x3D;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker stop tmp</span><br><span class="line">docker rm -v tmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其中-v就表示volume</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你确定不再需要这些持久化数据了就可执行 -v 操作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker <span class="built_in">rm</span> -v &lt;container_name&gt; 对 <span class="built_in">bind</span> mount 类型的volume无效（也是无法删除，想删除需手动）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你运行容器时指定了--<span class="built_in">rm</span>，那在停止容器时volume也会被自动删除（当然也是只对docker managed volume才有效）</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220809154426361.png" alt="image-20220809154426361"></p><blockquote><p>如果删除 docker managed volume 类型容器的时候，忘记带 -v 参数了，这样的化会产生孤儿 volume，也就是说被删除的容器数据还持久化在 Host 上的（除非你确定该数据已经不需要要了，那就可以删除了），如何删除？</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定volume</span></span><br><span class="line">docker volume rm 02cc4ecdf7ac50fe346d67476e5e1e5ef67e207ca5ce0dd5db93cb510377c79f</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有volume</span></span><br><span class="line">docker volume rm $(docker volume ls -q)</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220809170514878.png" alt="image-20220809170514878"></p><h2 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h2><p><code>bind mount</code> 与 <code>docker managed volume</code> 就类似于动态指定端口和静态指定端口，动态指定端口：<code>-p 80</code> 此时会将容器的 80 端口在 Host 上映射一个随机端口，静态指定端口：<code>-p 8080:80</code>。</p><p>&#x3D;&#x3D;区别：&#x3D;&#x3D;</p><ul><li><p><code>bind mount</code> 指定的数据卷是静态的，而 <code>docker managed volume</code> 指定的数据卷是随机动态的；</p></li><li><p><code>bind mount</code> 挂载时 Host 源 path 会覆盖掉容器目标 path（但并不代表被永久替换），而  <code>docker managed volume</code> 则是将容器原有的目录或文件随机持久化在 <code>/var/lib/docker/volumes</code> 目录下；</p></li><li><p><code>bind mount</code> 可指定挂载目录的读写权限，而 <code>docker managed volume</code> 不能；</p></li><li><p><code>bind mount</code> 的 mount 源可以是目录或文件，而 <code>docker managed volume</code> 只能是目录。</p></li></ul><p>对于无状态（无需做数据持久化）的容器我们可以选择 <code>Storage Driver</code> 默认存储引擎即可，如果对于有状态（需做数据持久化）的容器我们需要引入 <code>Data Volume</code> 实现数据持久化。</p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 底层技术</title>
      <link href="/posts/articles/3afbe0a6.html"/>
      <url>/posts/articles/3afbe0a6.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Cgroup"><a href="#一、Cgroup" class="headerlink" title="一、Cgroup"></a>一、Cgroup</h2><p>cgroup（Control Group），它用于 linux 系统资源分配、限制，前面提到的 Docker 资源分配与限制就是使用的 linux 底层技术来实现。</p><ul><li><p>CPU：&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;docker</p></li><li><p>内存：&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;docker</p></li><li><p>磁盘 IO：&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;blkio&#x2F;docker</p></li></ul><p>当运行一个容器时，linux系统（宿主机）就会为这个容器创建一个 cgroup 目录，并以容器长 ID 命名，如下图：</p><p><img src="https://note.youdao.com/yws/res/16889/WEBRESOURCE25d35d64d34541c81435100fef10d9b5" alt="image"></p><p>该长 ID 目录下就有一个 cpu.shares 文件，其值为默认值或是你在运行容器时指定的值，如下图：</p><p><img src="https://note.youdao.com/yws/res/16888/WEBRESOURCE67b6b3c07f78727bfdebf529db1f53d0" alt="image"></p><p>内存、磁盘 IO 类似。</p><h2 id="二、Namespace"><a href="#二、Namespace" class="headerlink" title="二、Namespace"></a>二、Namespace</h2><p>抛开宿主机后，你会发现每个容器都已自己独立的一套完整资源，如网卡设备、文件系统等，而实现这一技术的正是 <code>namespace</code>，namespace 管理 Host 中全局唯一资源，并可以让每个容器都觉得只有自己在使用它。其实也就是 namespace 实现了容器间资源的隔离。你也可以类比 k8s 的 namespace，在 k8s 中，namespace 可实现权限划分、资源访问等。</p><p>Linux 使用了 6 种 namespace，分别是：Mount、UTS、IPC、PID、Network 和 User。</p><p><strong>1、Mount</strong></p><p>该 namespace 可让容器拥有自己独立的文件系统，比如容器有自己的 &#x2F; 目录，可实现相关的挂载操作（当然这些操作并不会影响我们的宿主机及其他容器）</p><p><strong>2、UTS</strong></p><p>该 namespace 可让容器拥有自己独立的 hostname，比如我们在运行容器时通过 -h 指定 hostname。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -h rab ...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其中rab就是该容器的主机名</span></span><br></pre></td></tr></table></figure><p><strong>3、IPC</strong></p><p>该 namespace 让容器拥有自己的共享内存和信号量，来实现进程间的通信，而不会与宿主机（Host）及其他容器混在一起。</p><p><strong>4、PID</strong></p><p>该 namespace 让容器拥有自己独立一套的 PID，每个容器都是以进程的形式在宿主机（Host）中运行，如图下运行了三个容器及其在 Host 中对应的 PID。</p><p><img src="https://note.youdao.com/yws/res/16890/WEBRESOURCE86306d565994b1384112e040db363ee2" alt="image"></p><p><img src="https://note.youdao.com/yws/res/16892/WEBRESOURCE20a6e965c0cc47ee3e6ab4e8f56957b0" alt="image"></p><p>可看到，所有容器进程都挂到了 docker 容器引擎进程 <code>/usr/bin/containerd</code> 下。</p><p><strong>注意</strong>：每个容器拥有自己独立一套的 PID，但容器中为 1 的 PID 并不是 Host 的 init 进程，因为容器与 Host 的 PID 是完全隔离且完整独立的。</p><p><strong>5、Network</strong></p><p>该 namespace 让容器拥有自己独立网卡设备、路由等资源，同样与 Host 的 Network 是完全隔离且完整独立的。</p><p><img src="https://note.youdao.com/yws/res/16891/WEBRESOURCE4bf4fc64e9dbd76dd559227ec6ca9140" alt="image"></p><p><strong>6、User</strong></p><p>该 namespace 让容器拥有自己独立的用户空间，同样与 Host 的 User 是完全隔离且完整独立的。</p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 资源分配与限制</title>
      <link href="/posts/articles/3767a45b.html"/>
      <url>/posts/articles/3767a45b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>我的宿主机：1C&#x2F;2G 50G 配置</p></blockquote><h2 id="1、CPU"><a href="#1、CPU" class="headerlink" title="1、CPU"></a>1、CPU</h2><p>默认情况下所有容器平等使用 Host 宿主机 CPU 资源，Docker 通过 -c 或 –cpu-shares 参数来指定容器使用 <code>CPU 的权重</code>。如果在运行容器时不指定，则权重值默认为 1024。接下来启动两个容器来做测试：</p><p>A 容器：权重1024</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=cpu_a -c 1024 progrium/stress --cpu 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--cpu：表示工作线程数</span></span><br></pre></td></tr></table></figure><p>B 容器：权重512</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=cpu_b -c 512 progrium/stress --cpu 1</span><br></pre></td></tr></table></figure><p>top 查看宿主机的 CPU 资源消耗情况：</p><p><img src="https://note.youdao.com/yws/res/16895/WEBRESOURCEaa2d68329f786488f1db2e6543a882fd" alt="image"></p><ul><li>66.3 为 A 容器消耗的 CPU</li><li>33.0 为 B 容器消耗的 CPU</li></ul><p>通过上图结果，那是不是表明权重值越高，占用 CPU 的时间就越多呢？</p><p>这并不一定，一般这种按权重分配 CPU 只会发生在 CPU 资源紧张的情况下，怎么理解呢，如果 A 容器处于空闲状态，此时为了 CPU 资源的充分利用，B 容器也可以分到全部可用 CPU。</p><p>此时，如果我停掉权重为 1024 的容器 cpu_a，再来看看权重为 512 的容器 cpu_b 占用的 CPU：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause cpu_a</span><br></pre></td></tr></table></figure><p>top 查看宿主机的 CPU 资源消耗情况：</p><p><img src="https://note.youdao.com/yws/res/16896/WEBRESOURCE5381d12c2492f3aefd76423c871a7598" alt="image"></p><p>可以看到，尽管我的容器 B 的权重值为 512，但如果比容器 B 容器大的其他容器不占用 CPU 或对 CPU 的占用少时，权重小的容器依然能够充分利用 CPU 资源。</p><h2 id="2、内存"><a href="#2、内存" class="headerlink" title="2、内存"></a>2、内存</h2><p>默认情况下 Docker 运行的容器对宿主机的<code>物理内存/swap交换内存</code>的使用是无限制的，为了避免过多容器使用过多内存导致 Host 的资源消耗殆尽，因此我们需要按照实际情况来对容器进行合理的<code>物理内存/swap交换内存</code>分配。具体分配指令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -m 200M --memory-swap=300M &lt;image&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【-m（或--memory）：物理内存】表示该容器允许使用的最大物理内存。默认值为-1，表示无限制</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【--memory-swap：物理内存+虚拟内存】表示该容器允许使用的最大 swap 交换内存。默认值为-1，表示无限制</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -m 200M --memory-swap=300M centos:7.9.2009</span><br></pre></td></tr></table></figure><p>需注意的是：</p><ul><li>如果只指定 -m，则 –memory-swap 默认为 -m 的两倍；</li><li>如果 -m 的值等于 –memory-swap 的值，那将无法使用 swap 交换分区。</li></ul><p>我们可以使用 progrium&#x2F;stress 镜像来进行压力测试：</p><ul><li><p>启动一个内存工作线程，且每个线程分配 280M 内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud opt]# docker run -it -m 200M --memory-swap=300M progrium/stress --vm 1 --vm-bytes 280M</span><br><span class="line">stress: info: [1] dispatching hogs: 0 cpu, 0 io, 1 vm, 0 hdd</span><br><span class="line">stress: dbug: [1] using backoff sleep of 3000us</span><br><span class="line">stress: dbug: [1] --&gt; hogvm worker 1 [6] forked</span><br><span class="line">stress: dbug: [6] allocating 293601280 bytes ...</span><br><span class="line">stress: dbug: [6] touching bytes in strides of 4096 bytes ...</span><br><span class="line">stress: dbug: [6] freed 293601280 bytes</span><br><span class="line">stress: dbug: [6] allocating 293601280 bytes ...</span><br><span class="line">stress: dbug: [6] touching bytes in strides of 4096 bytes ...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--vm：指定内存工作线程数</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--vm-bytes：指定每个内存工作线程数分配的大小</span></span><br></pre></td></tr></table></figure></li><li><p>模拟内存分配超过指定的可使用内存大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud opt]# docker run -it -m 200M --memory-swap=300M progrium/stress --vm 1 --vm-bytes 310M</span><br><span class="line">stress: info: [1] dispatching hogs: 0 cpu, 0 io, 1 vm, 0 hdd</span><br><span class="line">stress: dbug: [1] using backoff sleep of 3000us</span><br><span class="line">stress: dbug: [1] --&gt; hogvm worker 1 [6] forked</span><br><span class="line">stress: dbug: [6] allocating 325058560 bytes ...</span><br><span class="line">stress: dbug: [6] touching bytes in strides of 4096 bytes ...</span><br><span class="line">stress: FAIL: [1] (416) &lt;-- worker 6 got signal 9</span><br><span class="line">stress: WARN: [1] (418) now reaping child worker processes</span><br><span class="line">stress: FAIL: [1] (422) kill error: No such process</span><br><span class="line">stress: FAIL: [1] (452) failed run completed in 1s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可看到 <span class="built_in">kill</span> error: No such process</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3、磁盘"><a href="#3、磁盘" class="headerlink" title="3、磁盘"></a>3、磁盘</h2><p>这里主要说的是磁盘 IO 读写情况，默认情况下，所有容器平等读写宿主机磁盘，与 CPU 资源类似，也是通过 –blkio-weight 参数设置权重值（<code>默认为 500</code>）来分配宿主机资源。启动两个容器来做测试：</p><p>A 容器：权重600</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name disk_a --blkio-weight 600 centos:7.9.2009</span><br></pre></td></tr></table></figure><p>B 容器：权重300</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name disk_b --blkio-weight 300 centos:7.9.2009</span><br></pre></td></tr></table></figure><p>与 CPU 资源利用类似，A 容器磁盘读写带宽为 B 容器的两倍数。</p><p><strong>如何限制 bps 和 iops ？</strong></p><blockquote><p>bps：每秒读写数据量</p><p>iops：每秒 IO 次数</p></blockquote><ul><li>--device-read-bps</li><li>--device-write-bps</li><li>--device-read-iops</li><li>--device-write-iops</li></ul><p>具体案例：</p><ul><li><p>限制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">限制容器使用宿主机的磁盘IO</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/dev/vda 为宿主机的磁盘设备，限制该容器每秒最多可向宿主机写30MB的数据</span></span><br><span class="line"></span><br><span class="line">[root@qcloud test]# docker run -it --device-write-bps /dev/vda:30MB centos:7.9.2009</span><br><span class="line">[root@03e61211de28 /]# time dd if=/dev/zero of=test_file.out bs=1M count=1000 oflag=direct</span><br><span class="line">1000+0 records in</span><br><span class="line">1000+0 records out</span><br><span class="line">1048576000 bytes (1.0 GB) copied, 33.3441 s, 31.4 MB/s</span><br><span class="line"></span><br><span class="line">real0m33.353s</span><br><span class="line">user0m0.003s</span><br><span class="line">sys0m0.224s</span><br></pre></td></tr></table></figure><blockquote><p>从结果可看出，基本在30MB左右。</p></blockquote></li><li><p>不限制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud test]# docker run -it centos:7.9.2009</span><br><span class="line">[root@fa7ff773d45e /]# time dd if=/dev/zero of=test_file.out bs=1M count=1000 oflag=direct</span><br><span class="line">1000+0 records in</span><br><span class="line">1000+0 records out</span><br><span class="line">1048576000 bytes (1.0 GB) copied, 22.8758 s, 45.8 MB/s</span><br><span class="line"></span><br><span class="line">real0m22.877s</span><br><span class="line">user0m0.010s</span><br><span class="line">sys0m0.276s</span><br></pre></td></tr></table></figure><blockquote><p>从结果可看出，不做限制的情况下，基本在45MB以上甚至更高。</p></blockquote></li></ul><p>其他参数类似。</p><p>&#x3D;&#x3D;那以上配置的资源信息存储在 Host 哪个位置呢？如CPU资源&#x3D;&#x3D;</p><blockquote><p>其目录在 <code>/sys/fs/cgroup/cpu/docker/*</code> 下<br>该目录下会对应有一个以正在运行的容器长ID为名的目录<br>其他资源同理：<code>/sys/fs/cgroup/blkio/docker/*</code>、<code>/sys/fs/cgroup/memory/docker/*</code></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220907141842911.png" alt="image-20220907141842911"></p><p>如：CPU 的资源限制（权重或大小）就在这个长ID目录下的 cpu.shares 文件，可查看该值大小，且该值大小就是我们 –cpu-shares 指定的值。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220907142515237.png" alt="image-20220907142515237"></p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 运行的容器的内核版本是谁的？</title>
      <link href="/posts/articles/abf826c0.html"/>
      <url>/posts/articles/abf826c0.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、疑问"><a href="#一、疑问" class="headerlink" title="一、疑问"></a>一、疑问</h2><p>有没有想过这样一个问题，CentOS 7 系统版本的内核版本为 3.x.x，Ubuntu 18、CentOS 8 等系统版本的内核版本为 4.x.x。那如果我是在 CentOS 8 系统上运行 Dockers 容器（如 CentOS 7 ），运行的这个容器的内核版本会是多少呢？</p><h2 id="二、解答"><a href="#二、解答" class="headerlink" title="二、解答"></a>二、解答</h2><p>在上一篇文章<a href="https://blog.csdn.net/IT_ZRS/article/details/124682432?spm=1001.2014.3001.5502">《为什么运行一个 CentOS 容器的镜像只需 200MB 左右？》</a>中讲到，对于容器的镜像来说，底层直接使用宿主机的内核空间，它只需提供用户空间 rootfs 文件系统即可。因此，Docker 运行的容器的内核版本就是你宿主机（CentOS 8）的内核版本。实践出真理，接下来我们实际测试一下。</p><p>1、查看宿主机系统版本及内核版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 8.3.2011</span><br><span class="line">[root@qcloud ~]# uname -a</span><br><span class="line">Linux qcloud 4.18.0-240.el8.x86_64 #1 SMP Fri Sep 25 19:48:47 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p>2、在上述的宿主机上运行 CentOS 7 容器并查看其内核版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker run -it centos:7.9.2009</span><br><span class="line">[root@74ecee4db934 /]# uname -a</span><br><span class="line">Linux 74ecee4db934 4.18.0-240.el8.x86_64 #1 SMP Fri Sep 25 19:48:47 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p>从测试结果可看出，运行的 CentOS 7 容器的内核版本为 4.18，证明<code>对于容器的镜像来说，底层直接使用宿主机的内核空间</code>这句话是完全没问题的。</p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 网络</title>
      <link href="/posts/articles/4b442585.html"/>
      <url>/posts/articles/4b442585.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、None"><a href="#一、None" class="headerlink" title="一、None"></a>一、None</h2><p>该网络模式，即没有网络的网络模式，可通过 –network&#x3D;none 来指定。该网络模式的容器除了 lo 本地回环网卡外，无其他任何网卡，那该网络模式存在的意义是什么呢？</p><p>在一些安全级别要求高的场景下是需要的，如：用作密码服务器，就不需要任何的网络模式。</p><h2 id="二、Bridge"><a href="#二、Bridge" class="headerlink" title="二、Bridge"></a>二、Bridge</h2><p><strong>1、容器虚拟网卡</strong></p><p>如果在运行容器时，不指定任何网络模式，那创建的容器默认都会挂到 docker0 网卡上，如下图，这三个容器我都没通过 –network 指定网络模式。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214182925558.png" alt="image-20221214182925558"></p><p>【interfaces】字段下的内容就是运行的这三个容器对应的虚拟网卡。此时进入某个容器，去查看一下其网卡名，如下图所示：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214182942221.png" alt="image-20221214182942221"></p><p>你会发现该容器的网卡名与【interfaces】字段下的虚拟网卡名不一致，这是为什么呢？</p><p>其实这是因为容器的虚拟网卡与挂在 docker0 下的虚拟网卡是一对特殊的 <code>veth pair</code> 网络设备。</p><p><strong>2、容器 IP 地址</strong></p><p>通过上图我们可以看到，运行的容器自动分配了一个 IP 地址，那该 IP 地址是从哪获取的呢？我们可以查看一下 Bridge 的网络配置信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect bridge</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214183000755.png" alt="image-20221214183000755"></p><p>网段：172.17.0.0</p><p>网关：172.17.0.1</p><p>此时你会想，容器是如何与外界通信的（比如 yum install .. 安装等），其实正是上面这个网关地址，这个网关地址就是 docker0 网卡地址，如下图：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214183016265.png" alt="image-20221214183016265"></p><p>通过上图你就会明白，运行的容器能连接外网安装一些基础工具，通过路由表可知其过程是：</p><ul><li>先访问目标IP（比如：221.237.105.143），发现没在自己的路由表中（既不是 <code>10.150.16.0</code> 也不是 <code>172.17.0.0</code>）；</li><li>于是就走 <code>0.0.0.0</code>，通过宿主机网关 <code>10.150.16.1</code> 与外界通信。</li></ul><h2 id="三、Host"><a href="#三、Host" class="headerlink" title="三、Host"></a>三、Host</h2><p>相对 Bridge 网络模式来说，Host 网络模式更便于理解，可通过 –network&#x3D;host 来指定，此时，容器的网络配置与宿主机（Host）完全一样。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --network=host busybox</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214183035316.png" alt="image-20221214183035316"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214183047741.png" alt="image-20221214183047741"></p><p>从上图可看出，容器和宿主机的网络保持一致，换句话说，容器共享宿主机网络，这有什么好处？</p><p>对于网络性能要求较高的场景可以使用 Host 网络模式。</p><p>但该网络模式也有一些缺点，就是要考虑到容器和宿主机端口冲突的问题。</p><h2 id="四、自定义网络"><a href="#四、自定义网络" class="headerlink" title="四、自定义网络"></a>四、自定义网络</h2><p>除了以上三种网络模式，我们也可以自定义网络模式。</p><p><strong>1、自定义 Bridge 类型网络模式</strong></p><blockquote><p>不指定 –driver 的话，默认就是 Bridge 类型</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker network create --driver bridge net_a</span><br><span class="line">8568822dd4bf8ab5e9a33635f2f5bdb6a4577652879c55e13390b43d950f99ec</span><br><span class="line">[root@qcloud ~]# brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">br-8568822dd4bf8000.0242232f6190no</span><br><span class="line">docker08000.02429fa58d80noveth4b12f0c</span><br><span class="line">veth5cfded2</span><br><span class="line">veth6e1ba81</span><br></pre></td></tr></table></figure><p>查看具体属性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker network inspect net_a </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;net_a&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;8568822dd4bf8ab5e9a33635f2f5bdb6a4577652879c55e13390b43d950f99ec&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-05-12T19:13:11.197656976+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可看到 Driver 驱动类型为 bridge 类型网络，同时 Docker 为其分配了 IP 段。</p><p><strong>2、自定义 IP 段</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker network create --driver bridge --subnet 192.168.4.0/24 --gateway 192.168.4.1 net_b</span><br></pre></td></tr></table></figure><p>查看具体属性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker network inspect net_b</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;net_b&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;bb8dfbced7b2b38b47dc603abc010ca30888192d035eace29268baa035ba10f4&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-05-12T19:21:57.617051707+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.4.0/24&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.4.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>3、运行容器并指定自定义网络</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker run -it --network=net_b busybox</span><br><span class="line">/ # ifconfig </span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:04:02  </span><br><span class="line">          inet addr:192.168.4.2  Bcast:192.168.4.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:766 (766.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure><p>既然我可以自定义网络模式，那我可不可以运行容器时指定一个静态 IP？</p><p><code>答案是可以的</code>，但前提是你这个网络必须是 <code>--subnet</code> 指定网段方式的自定义网络模式才行，具体如下：</p><ul><li><p>未使用 –subnet 指定网段的网络模式</p><blockquote><p>这种情况下是无法指定静态 IP 的，会报错。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker run -it --network=net_a --ip 172.18.0.5 busybox</span><br><span class="line">docker: Error response from daemon: user specified IP address is supported only when connecting to networks with user configured subnets.</span><br></pre></td></tr></table></figure></li><li><p>使用 –subnet 指定网段的网络模式</p><blockquote><p>这种情况下可以指定静态 IP。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@qcloud ~]# docker run -it --network=net_b --ip 192.168.4.191 busybox</span><br><span class="line">/ # ifconfig </span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:04:BF  </span><br><span class="line">          inet addr:192.168.4.191  Bcast:192.168.4.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:7 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:586 (586.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure></li></ul><p> 对于自定义的 Bridge 类型网络模式，你每定义一个，Docker 都会将默认的 IP 网段（172.17.0.0&#x2F;16）往上加 1（除非是你自定义IP段）。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">172.17.0.0/16</span><br><span class="line">172.18.0.0/16</span><br><span class="line">172.19.0.0/16</span><br><span class="line">172.20.0.0/16</span><br><span class="line">172.21.0.0/16</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 的 Copy-on-Write 特性</title>
      <link href="/posts/articles/1fb9a4a3.html"/>
      <url>/posts/articles/1fb9a4a3.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、疑问"><a href="#一、疑问" class="headerlink" title="一、疑问"></a>一、疑问</h2><p>一个基础镜像可以运行一个容器，那可不可以一个基础镜像运行多个容器呢？答案是可以的。</p><p>那如果一个基础镜像运行多个容器后，我在某个容器上修改了基础镜像的内容，如：删除 &#x2F;etc&#x2F;hello.conf（假设我的基础镜像是有 hello.conf 文件的）文件，是否共用我基础镜像的其他容器的 &#x2F;etc&#x2F;hello.conf 文件也被删除了呢？答案是不会的。</p><h2 id="二、解答"><a href="#二、解答" class="headerlink" title="二、解答"></a>二、解答</h2><p>上面的问题其实应用到了 Docker 的 <code>Copy-on-Write</code> 特性，我们来看看这是怎么回事呢？</p><p>当某个容器启动时，一个新的可写层会被加载到其基础镜像的顶部，我们称之为“容器层”，所有添加、删除均发生在“容器层之中”。“容器层”之下的均为镜像层，最底部的镜像又称“基础镜像”层。</p><p>当在容器中进行数据修改时（比如修改 &#x2F;etc&#x2F;hello.conf 文件），Dockers 会从上至下依次在各个镜像层中查找此文件，一旦找到该文件，会立即将其复制到“容器层”，然后再进行修改操作（也就是 <code>Copy-on-Write</code>），其他的操作也是一样（如添加、读取、删除等操作）。<code>因此，“容器层”保存的是镜像变化的部分，而不会对镜像本身进行任何修改。</code></p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 镜像 Tag 管理</title>
      <link href="/posts/articles/ad0675e5.html"/>
      <url>/posts/articles/ad0675e5.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/docker-docs.webp" alt="docker-docs"></p><p><font color="Brown"><strong>Author</strong>：rab</font></p><hr><p>良好的镜像版本命名习惯能让我们更好的管理和使用镜像（如项目上线失败后可有效的进行版本回退），以下是 Docker 社区常用的 tag 方案。</p><p>比如我现在已经构建了一个 <code>coredns/coredns:1.8.4</code> 镜像，现在对该镜像进行打 tag，具体命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker tag -t coredns/coredns:1.8.4 mycoredns:1.8</span><br><span class="line">docker tag -t coredns/coredns:1.8.4 mycoredns:1.8.4</span><br><span class="line">docker tag -t coredns/coredns:1.8.4 mycoredns:latest</span><br></pre></td></tr></table></figure><p>如果此时我又发布了 <code>coredns/coredns:1.8.5</code> 镜像，我又可以将之前打的 1.8 更新，因为我想实现的是：不管发布的镜像版本是 <code>1.8.4、1.8.5、1.8.6、1.8.x</code>，我的 1.8 大版本始终是保持最新的，而我的小版本（1.8.4）可以进行相关的版本回退或在特定环境中实现部署等，具体操作指令如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker tag -t coredns/coredns:1.8.5 mycoredns:1.8</span><br><span class="line">docker tag -t coredns/coredns:1.8.5 mycoredns:1.8.5</span><br><span class="line">docker tag -t coredns/coredns:1.8.5 mycoredns:latest</span><br></pre></td></tr></table></figure><p><strong>通过下图就比较容易理解与记忆：</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/Docker%20Tag.jpg" alt="Docker Tag"></p><p>&#x3D;&#x3D;小结：每个镜像（repository）可以有多个 tag，而多个 tag 可能对应的是同一个镜像。&#x3D;&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s 探针</title>
      <link href="/posts/articles/d2d57643.html"/>
      <url>/posts/articles/d2d57643.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/k8s-cert.png" alt="k8s-cert"></p><p><a href="https://huaweicloud.csdn.net/63311d87d3efff3090b52a95.html?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-5-123894868-blog-126919159.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-5-123894868-blog-126919159.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=10">参考1</a></p><p><a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">官方参考文档</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>玩过 <code>Docker Swarm</code> 的应该都知道，有一种功能叫<code>自愈功能</code>，当集群检测到节点或服务故障时回进行自动故障转移，从而保障业务的可用性。而 K8s 集群相对于其他集群体系，其自愈能力更加强大，这也是 K8s 容器编排引擎的一重要特性。自愈从某种角度上来讲，其实现了以下几几种功能特性：</p><ul><li>零停机部署；</li><li>避免无效镜像；</li><li>实现滚动升级与回退。</li></ul><p>K8s 有三种探针，分别是：<code>存活（Liveness）</code>、<code>就绪（Readiness）</code>和<code>启动（Startup）</code></p><ul><li><p><strong>存活（Liveness）</strong>：kubelet 使用存活探针来确定什么时候要重启容器。 例如，存活探针可以探测到应用死锁（应用程序在运行，但是无法继续执行后面的步骤）情况。 重启这种状态下的容器有助于提高应用的可用性，即使其中存在缺陷。</p></li><li><p><strong>就绪（Readiness）</strong>：kubelet 使用就绪探针可以知道容器何时准备好接受请求流量。当一个 Pod 内的所有容器都就绪时，才能认为该 Pod 就绪。 这种信号的一个用途就是控制哪个 Pod 作为 Service 的后端。 若 Pod 尚未就绪，会被从 Service 的负载均衡器中剔除。</p></li><li><p><strong>启动（Startup）</strong>：kubelet 使用启动探针来了解应用容器何时启动。 如果配置了这类探针，你就可以控制容器在启动成功后再进行存活性和就绪态检查， 确保这些存活、就绪探针不会影响应用的启动。 启动探针可以用于对慢启动容器进行存活性检测，避免它们在启动运行之前就被杀掉。</p></li></ul><p>K8s 探针有三种探测方式，分别是：<code>ExecAction</code>、<code>HTTPGetAction</code> 和 <code>TCPSocketAction</code>，这三种探测方式只能同时使用一种，不能两种或三种同时使用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ExecAction：      <span class="comment"># 在容器中执行指定的命令，如果执行成功，退出码为0则探测成功。</span></span><br><span class="line">HTTPGetAction：   <span class="comment"># 通过容器的IP地址、端口号及路径调用HTTP Get方法，如果响应的状态码大于等于200且小于400，则认为容器健康。</span></span><br><span class="line">TCPSocketAction： <span class="comment"># 通过容器的IP地址和端口号执行TCP检查，如果能够建立TCP连接，则表明容器健康。</span></span><br></pre></td></tr></table></figure><blockquote><p>探针探测的结果有以下值：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Success：  <span class="comment"># 表示通过检测。</span></span><br><span class="line">Failure：  <span class="comment"># 表示未通过检测。</span></span><br><span class="line">Unknown：  <span class="comment"># 表示检测没有正常进行。</span></span><br></pre></td></tr></table></figure><h2 id="一、默认健康检测"><a href="#一、默认健康检测" class="headerlink" title="一、默认健康检测"></a>一、默认健康检测</h2><h3 id="1-1-restartPolicy"><a href="#1-1-restartPolicy" class="headerlink" title="1.1 restartPolicy"></a>1.1 restartPolicy</h3><p>了解 Docker 的都知道，每个容器启动时都会执行一个进程，该进程由 Dockerfile 的 CMD 或 ENTRYPOINT 指定。如果进程退出或返回状态码为非零时，则认为容器发生故障，这个时候 K8s 就会根据 <code>restartPolicy</code> 重启容器。<code>restartPolicy</code> 有三种重启策略：</p><ul><li><p><strong>Always</strong></p><p>Pod 中容器不论如何停止都将自动重启；</p></li><li><p><strong>OnFailure</strong><br>Pod 中容器非正常停止会自动重启，正常停止不会重启；</p></li><li><p><strong>Never</strong><br>Pod 中容器不论以任何方式停止，都不会自动重启。</p></li></ul><p>K8s 的  <code>restartPolicy</code>  默认为 <code>Always</code>。如果探针超过失败重试的次数，则 Pod 就会根据 restartPolicy 策略进行选择是否重启。</p><h3 id="1-2-测试案例"><a href="#1-2-测试案例" class="headerlink" title="1.2 测试案例"></a>1.2 测试案例</h3><p>1、创建一个 Pod</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">test</span>: healthcheck</span><br><span class="line">  name: healthcheck</span><br><span class="line">spec:</span><br><span class="line">  restartPolicy: OnFailure</span><br><span class="line">  containers:</span><br><span class="line">  - name: healthcheck</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - -c</span><br><span class="line">    - <span class="built_in">sleep</span> 10;<span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><p>2、观察 Pod 状态</p><p>这个容器启动 10s 后会发生故障，接下来执行 <code>kubectl apply</code> 创建 Pod，Pod Name 为 healthcheck。过几分钟后看看 Pod 的状态：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221222110433382.png" alt="image-20221222110433382"></p><p>可看到已经重启了三次，该案例中容器进程返回值为非零，k8s 则认为容器发生故障，需要重启。但可能有些情况下发生了故障进程不退出的现象，如访问 Web 服务器时返回 500 错误代码，这可能是系统负荷较大或资源锁死，此时 httpd 进程并没有异常退出，这种情况下可直接重启容器。而 K8s 的 Liveness 机制刚好能解决此类问题（即出现此类问题会直接 Kill 掉容器并重新启动）。</p><h2 id="二、Liveness"><a href="#二、Liveness" class="headerlink" title="二、Liveness"></a>二、Liveness</h2><p>Liveness 探针让用户可以自定义判断容器是否健康的条件，如果探测失败，K8s 就会重启容器，如下案例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">test</span>: liveness</span><br><span class="line">  name: liveness-exec</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - -c</span><br><span class="line">    - <span class="built_in">touch</span> /tmp/healthy; <span class="built_in">sleep</span> 30; <span class="built_in">rm</span> -f /tmp/healthy; <span class="built_in">sleep</span> 600</span><br><span class="line">    livenessProbe:</span><br><span class="line">      <span class="built_in">exec</span>:</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - <span class="built_in">cat</span></span><br><span class="line">        - /tmp/healthy</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 5</span><br></pre></td></tr></table></figure><p>在这个配置文件中，可以看到 Pod 中只有一个 <code>Container</code>。 <code>periodSeconds</code> 字段指定了 kubelet 应该每 5 秒执行一次存活探测。 <code>initialDelaySeconds</code> 字段告诉 kubelet 在执行第一次探测前应该等待 5 秒（即 5 秒后才开始启动探针）。 kubelet 在容器内执行命令 <code>cat /tmp/healthy</code> 来进行探测。 如果命令执行成功并且返回值为 0，kubelet 就会认为这个容器是健康存活的。 如果这个命令返回非 0 值，kubelet 会杀死这个容器并重新启动它。当容器启动时，会执行如下的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -c &quot;touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600&quot;</span><br></pre></td></tr></table></figure><p>这个容器生命的前 30 秒，<code>/tmp/healthy</code> 文件是存在的。 所以在这最开始的 30 秒内，执行命令 <code>cat /tmp/healthy</code> 会返回成功代码。 30 秒之后，执行命令 <code>cat /tmp/healthy</code> 就会返回失败代码。</p><p>执行 <code>kubectl apply</code> 创建 Pod 。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f liveness.yml</span><br></pre></td></tr></table></figure><p>查看 Pod 启动日志：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod liveness-exec</span><br></pre></td></tr></table></figure><p>前 30s <code>/tmp/healthy</code> 文件是存在的：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221222113744208.png" alt="image-20221222113744208"></p><p>35s 后检测到<code>/tmp/healthy</code> 文件已经不存在：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221222114051362.png" alt="image-20221222114051362"></p><p>再过十几秒后容器被重启：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221222114308594.png" alt="image-20221222114308594"></p><h2 id="三、Readiness"><a href="#三、Readiness" class="headerlink" title="三、Readiness"></a>三、Readiness</h2><p>除了可以自定义判断容器是否健康的条件外，用户也可以通过 <code>Readiness</code> 探针告诉 K8s 什么时候可以重启容器实现自愈，<code>Readiness</code> 探针则告诉 K8s 什么时候可以将容器加入到 Service 负载均衡池中，对外提供服务。就绪探针的配置和存活探针的配置相似。 唯一区别就是要使用 <code>readinessProbe</code> 字段，而不是 <code>livenessProbe</code> 字段。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">test</span>: readiness</span><br><span class="line">  name: readiness-exec</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - -c</span><br><span class="line">    - <span class="built_in">touch</span> /tmp/healthy; <span class="built_in">sleep</span> 30; <span class="built_in">rm</span> -f /tmp/healthy; <span class="built_in">sleep</span> 600</span><br><span class="line">    readinessProbe:</span><br><span class="line">      <span class="built_in">exec</span>:</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - <span class="built_in">cat</span></span><br><span class="line">        - /tmp/healthy</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 5</span><br></pre></td></tr></table></figure><p>看看启动日志，与 <code>Liveness</code> 探针类似</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod readiness-exec</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221222121220005.png" alt="image-20221222121220005"></p><p>Probe 有很多配置字段，可以使用这些字段精确地控制启动、存活和就绪检测的行为：</p><ul><li><code>initialDelaySeconds</code>：容器启动后要等待多少秒后才启动启动、存活和就绪探针， 默认是 0 秒，最小值是 0。</li><li><code>periodSeconds</code>：执行探测的时间间隔（单位是秒）。默认是 10 秒。最小值是 1。</li><li><code>timeoutSeconds</code>：探测的超时后等待多少秒。默认值是 1 秒。最小值是 1。</li><li><code>successThreshold</code>：探针在失败后，被视为成功的最小连续成功数。默认值是 1。 存活和启动探测的这个值必须是 1。最小值是 1。</li><li><code>failureThreshold</code>：当探测失败时，Kubernetes 的重试次数。 对存活探测而言，放弃就意味着重新启动容器。 对就绪探测而言，放弃意味着 Pod 会被打上未就绪的标签。默认值是 3。最小值是 1。</li></ul><p><mark>注意</mark>：存活探针 <strong>不等待</strong> 就绪性探针成功。如果要在执行存活探针之前等待就绪性探针，应该使用 <code>initialDelaySeconds</code> 或 <code>startupProbe</code>。</p><h2 id="四、Startup"><a href="#四、Startup" class="headerlink" title="四、Startup"></a>四、Startup</h2><p>Startup 是 <code>k8s 1.16+</code> 版本后新加的探测方式，用于判断容器内应用程序是否已经启动，如果同时配置了 <code>startuprobe</code>、<code>Livenessprobe</code>、<code>Readinessprobe</code>，K8s 就会先禁用其他的探针，而首先使用 <code>startuprobe </code>探测直到它成功为止，成功后将不再进行探测。</p><p><strong>startupProbe 探针与另两种区别？</strong></p><ul><li><p>如果三个探针同时存在，先执行startupProbe探针，其他两个探针将会被暂时禁用，直到pod满足startupProbe探针配置的条件，其他2个探针启动，如果不满足按照规则重启容器。</p></li><li><p>另外两种探针在容器启动后，会按照配置，直到容器消亡才停止探测，而startupProbe探针只是在容器启动后按照配置满足一次后，不在进行后续的探测。</p></li></ul><p><mark>那 Startup 存在的意义又是什么呢？</mark></p><p>试想一个问题，如果启动一个服务需要 1 分钟，如果没有 <code>Startup</code> 的情况下，且假设我们配置了 <code>livenessProbe</code> 探针，具体如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">livenessProbe:</span><br><span class="line">  httpGet:</span><br><span class="line">    path: /test</span><br><span class="line">    prot: 80</span><br><span class="line">failureThreshold: 6</span><br><span class="line">initialDelay：40</span><br><span class="line">periodSeconds: 5</span><br></pre></td></tr></table></figure><p>我们设置了失败重试次数为 6，每 5 秒探测一次，加上我们探测前等待的 40 秒，总时间就是：40 + 6 x 5 &#x3D; 70s，这样 Pod 确实能够启动起来。那问题又来了，如果这个配置用于生产配置上，将会导致我们比较晚的收到服务不可用的情况，也就是说我的服务可能在 5s 时已经不可用，但是由于我们探测机制（有 6 次失败重试的机会），我们在至少 6 x 5 &#x3D; 30s 才会发现服务不可用的情况，这在生产上一般是不被允许的。<strong>那该如何解决类似这样的问题呢？</strong>答案就是 <code>startupProbe</code>。</p><blockquote><p>注意上面这个案例，如果 <code>failureThreshold</code> 设置为 1 或 2，那这个服务是永远起不起来的，因为你把 <code>initialDelay</code> 的时间算上也不足 1 分钟，因为我们说启动至少需要 1 分钟，那超过失败重试次数后，就会根据 Pod 的 <code>restartPolicy</code> 来重启容器。</p></blockquote><p>接着我们引入 <code>startupProbe</code>，继续优化：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">livenessProbe:</span><br><span class="line">  httpGet:</span><br><span class="line">    path: /test</span><br><span class="line">    prot: 80</span><br><span class="line">failureThreshold: 1</span><br><span class="line">initialDelaySeconds：5</span><br><span class="line">periodSeconds: 5</span><br><span class="line"></span><br><span class="line">startupProbe:</span><br><span class="line">  httpGet:</span><br><span class="line">    path: /test</span><br><span class="line">    prot: 80</span><br><span class="line">failureThreshold: 60</span><br><span class="line">initialDelaySeconds：5</span><br><span class="line">periodSeconds: 5</span><br></pre></td></tr></table></figure><p>前面说了，<code>startupProbe</code> 会在探测成功后停止探测，而其他两种探针则是随着 Pod 的生命周期一直在探测的。因此上面的配置功能就是：K8s 部署服务后会在 5s 后启动 <code>startupProbe</code>，在 5 x 60 &#x3D; 300s 的时间内只要成功探测到服务则停止探测（否则需接受 Pod 的重启策略进行重启），并启用 <code>livenessProbe</code> 探针，此时<code>livenessProbe</code> 探针就会伴随着 Pod 的生命周期每 5s 检测一次，且我们只设置了 1 次失败重试的机会，这就意味着我们只需要在 1 x 5 &#x3D; 5s 时间就可以发现服务不可用。因此，你配置了 <code>startupProbe</code>，那其他2种探针如果配置了<code>initialDelaySeconds</code>，建议时间就不要给太长。<mark>这就是 Startup 探针存在的意义。</mark></p><h2 id="五、应用场景"><a href="#五、应用场景" class="headerlink" title="五、应用场景"></a>五、应用场景</h2><p>从上面的实验来看，探针的作用是很明显的，那这些探针在实际工作中是如何应用的呢？</p><h3 id="5-1-在-Scale-Up-中的应用"><a href="#5-1-在-Scale-Up-中的应用" class="headerlink" title="5.1 在 Scale Up 中的应用"></a>5.1 在 Scale Up 中的应用</h3><p>当我们执行 <code>Scale Up</code> 操作时（如新增副本数），新副本会作为 backend 被添加到 Service 的负载均衡中，与已有的副本一起处理客户的请求。考虑到应用启动通常都需要一个准备阶段，如加载缓存数据、连接数据库等，也就是说从容器启动到真正能够提供服务是需要一段时间的，此时，我们就可以通过 Readiness 探测判断容器是否就绪，避免将请求发送到还没准备好的 backend。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: web</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      run: web</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        run: web</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: web</span><br><span class="line">        image: httpd</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            scheme: HTTP</span><br><span class="line">            path: /</span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 5</span><br><span class="line">          periodSeconds: 5</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: web-svc</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    run: web</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br></pre></td></tr></table></figure><blockquote><p>查看 Pod 是否正常</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221227102346704.png" alt="image-20221227102346704"></p><blockquote><p>查看 Service 资源</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221227102527625.png" alt="image-20221227102527625"></p><blockquote><p>集群请求验证</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221227102754960.png" alt="image-20221227102754960"></p><p>因此不难看出，就绪探针的好处就是，只有等待 Pod 完全就绪后才会接收来自客户端的请求。</p><p>完整流程就是：</p><ul><li>容器启动 5s 后开始进行就绪探测；</li><li>如果 GET 请求的 <a href="http://container_ip/">http://container_ip:80/</a> 返回代码不是 200~400，则表示容器没就绪，此时该容器不接收 Service web-svc 的请求；</li><li>之后会每隔 5s 探测一次；</li><li>直到 GET 请求的 <a href="http://container_ip/">http://container_ip:80/</a> 返回代码为 200~400，则表示容器已经就绪，此时该容器将加入到 web-svc 的负载均衡中，开始处理客户的请求；</li><li>探针还会继续以 5s 的时间间隔探测，如果连续发生 3 次失败（YAML 文件中未指定，默认为 3 次，可通过 <code>failureThreshold</code> 来指定），容器又会从负载均衡中移除，直到下次探测成功再重新加入。</li></ul><p><mark>注意，这里我没有做 NodePort 类型哦，但并不影响我们的实验。</mark></p><h3 id="5-2-在滚动更新中的应用"><a href="#5-2-在滚动更新中的应用" class="headerlink" title="5.2 在滚动更新中的应用"></a>5.2 在滚动更新中的应用</h3><p>还有一个比较重要的应用场景就是<code>滚动更新（Rolling Update）</code>，试想一下，现有一个正常运行的多副本应用，接下来对应用进行更新（如升级镜像版本），K8s 会启动新副本，就会存在一下两种情况：</p><ul><li>正常情况下新副本需要 10s 来完成准备工作，在此期间是无法响应业务请求的；</li><li>由于人为配置错误，副本始终无法完成准备工作（如无法连接后端数据库）。</li></ul><p>那如果出现以上的两种情况，且又没有配置探针的话，会出现什么问题呢？</p><p>新副本本身没有异常退出，那默认的健康检查机制就会认为容器已经就绪，进而就会逐步用新的副本替换现有的副本。最终结果就是：所有旧副本都被替换后，整个应用将无法对外提供服务，那这在生产上是绝对不允许的。</p><p>那如果配置了对应的探针机制后，新副本只有通过了 Readiness 探测才会被添加到 Service 中，如果没有通过探测，则现有副本就不会被全部替换（根据比例可能会替换部分），业务仍然正常进行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim app-v1.yml</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: app</span><br><span class="line">spec:</span><br><span class="line">  replicas: 10</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      run: app</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        run: app</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: app</span><br><span class="line">        image: busybox</span><br><span class="line">        args:</span><br><span class="line">        - /bin/sh</span><br><span class="line">        - -c</span><br><span class="line">        - <span class="built_in">sleep</span> 10; <span class="built_in">touch</span> /tmp/healthy; <span class="built_in">sleep</span> 30000</span><br><span class="line">        readinessProbe:</span><br><span class="line">          <span class="built_in">exec</span>:</span><br><span class="line">            <span class="built_in">command</span>:</span><br><span class="line">            - <span class="built_in">cat</span></span><br><span class="line">            - /tmp/healthy</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 5</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f app-v1.yml</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可看到10s后副本通过readinessProbe探测</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221227121011463.png" alt="image-20221227121011463"></p><p>接下来进行滚动更新应用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim app-v2.yml</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: app</span><br><span class="line">spec:</span><br><span class="line">  replicas: 10</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      run: app</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        run: app</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: app</span><br><span class="line">        image: busybox</span><br><span class="line">        args:</span><br><span class="line">        - /bin/sh</span><br><span class="line">        - -c</span><br><span class="line">        - <span class="built_in">sleep</span> 3000</span><br><span class="line">        readinessProbe:</span><br><span class="line">          <span class="built_in">exec</span>:</span><br><span class="line">            <span class="built_in">command</span>:</span><br><span class="line">            - <span class="built_in">cat</span></span><br><span class="line">            - /tmp/healthy</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 5</span><br></pre></td></tr></table></figure><p>很显然，本次的更新的新副本中并没有 <code>/tmp/healthy</code> 文件，因此是无法通过 <code>readiness</code> 探测的，开始更新服务。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f app-v1.yml</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221227141219466.png" alt="image-20221227141219466"></p><p><mark>从 kubectl get pod 输出结果分析：</mark></p><ul><li>从启动时间（AGE）可判断，开头 5 个是新副本，出于 NOTREADY 状态；</li><li>旧副本从最初的 10 个减少到 8 个。</li></ul><p><mark>从 kubectl get deployment app 输出结果分析：</mark></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221227141624890.png" alt="image-20221227141624890"></p><ul><li>READY：就绪个数&#x2F;期望个数；</li><li>UP-TO-DATE：为了达到期望状态，已经更新的副本数；</li><li>AVAILABLE：可供用户使用的副本数。</li></ul><p>在我们的设定中，新副本始终都无法通过 Readiness 探测，所以这个状态会一直持续下去。对于 K8s 健康检查机制来说，它帮我们屏蔽了有缺陷的副本，同时保留了大部分旧副本，业务没有因为更新失败受到影响。</p><p><mark>为什么新创建的副本数是 5 个，同时只销毁了 2 个旧副本？</mark></p><p>原因是：滚动更新通过参数 <code>maxSurge</code> 和 <code>maxUnavailable</code> 来控制副本替换的数量。</p><p><strong>maxSurge</strong></p><p>此参数控制滚动更新过程中副本总数超过 <code>READY</code> 期望数的上限。maxSurge 可以是具体的整数，也可以是百分比，向上取整。若不指定，则 maxSurge 的默认值为 25%。</p><p>在上面的例子中，期望是 10，那副本总数的最大值为：10 + 10 x 25% &#x3D; 13，所以我们看到的 Pod 数为 13 个就是这么来的。</p><p><strong>maxUnavailable</strong></p><p>此参数控制滚动更新过程中，不可用的副本数占期望数的最大比例。maxUnavailable 可以是整数，也可以是百分比，向下取整。若不指定，则 maxUnavailable 的默认值为 25%。</p><p>在上面的例子中，期望是 10，那可用的副本数至少要为：10 - 10 x 25% &#x3D; 8，所以我们看到的 Pod 中只有 8 个是可用的。</p><p><mark>因此，理想情况下，我们这个案例的滚动更新过程是这样的：</mark></p><ul><li>创建 3 个新副本，使副本总数达到 13 个；</li><li>销毁 2 个旧副本，使可用副本数降到 8 个；</li><li>当 2 个旧副本销毁成功后，再创建 2 个新副本，使副本数保持为 13 个；</li><li>当新副本通过 Readiness 探测后，会使可用副本数增加，超过 8 个；</li><li>进而可继续销毁更多的旧副本，使可用副本数回到 8 个；</li><li>旧副本的销毁会使副本总数低于 13，这样就允许创建更多的新副本；</li><li>这个过程会持续进行，直到所有的旧副本都被新副本替换，滚动更新才完成。</li></ul><p>而上面案例中，我们在第四步就卡主了，因为新的副本无法通过 Readiness 探测。这个过程可通过 Deployment 日志部分来查看。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe deployment app</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221227150137960.png" alt="image-20221227150137960"></p><p>因此，对于上面的滚动更新失败案例，我们想要恢复原来正常提供的服务，我们只需要进行回滚操作即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先看看可回滚的历史版本（revision）</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment app</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221227150540721.png" alt="image-20221227150540721"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看revision的详情</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment app --revision=1</span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment app --revision=2</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221227150744680.png" alt="image-20221227150744680"></p><p>很明显，<code>revision = 1</code> 就是我们最初的版本，我们只需要回滚到这个版本上即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout undo deployment app --to-revision=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可看到，之前被销毁的两个Pod已经启动且为可用状态</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221227151243160.png" alt="image-20221227151243160"></p><p><mark>如何在 YAML 文件中指定 maxSurge 和 maxUnavailable？</mark></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: app</span><br><span class="line">spec:</span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 35%</span><br><span class="line">      maxUnavailable: 35%</span><br><span class="line">  replicas: 10</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      run: app</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        run: app</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: app</span><br><span class="line">        image: busybox</span><br><span class="line">        args:</span><br><span class="line">        - /bin/sh</span><br><span class="line">        - -c</span><br><span class="line">        - <span class="built_in">sleep</span> 10; <span class="built_in">touch</span> /tmp/healthy; <span class="built_in">sleep</span> 30000</span><br><span class="line">        readinessProbe:</span><br><span class="line">          <span class="built_in">exec</span>:</span><br><span class="line">            <span class="built_in">command</span>:</span><br><span class="line">            - <span class="built_in">cat</span></span><br><span class="line">            - /tmp/healthy</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 5</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> K8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
            <tag> 云原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubeadm 部署 k8s 集群</title>
      <link href="/posts/articles/82357013.html"/>
      <url>/posts/articles/82357013.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/k8s-cert.png" alt="k8s-cert"></p><p>K8s 版本：1.23</p><hr><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p><strong>1、服务器配置</strong></p><table><thead><tr><th>OS</th><th>配置</th><th>用途</th></tr></thead><tbody><tr><td>CentOS 7.9（172.27.0.13）</td><td>2C&#x2F;4G</td><td>k8s-master</td></tr><tr><td>CentOS 7.9（172.27.0.10）</td><td>2C&#x2F;4G</td><td>k8s-work1</td></tr><tr><td>CentOS 7.9（172.27.0.11）</td><td>2C&#x2F;4G</td><td>k8s-work2</td></tr></tbody></table><p><strong>注</strong>：这是演示 k8s 集群安装的实验环境，配置较低，生产环境中我们的服务器配置至少都是 <code>8C/16G</code> 的基础配置。</p><p><strong>2、版本选择</strong></p><ul><li>CentOS：7.9+</li><li>k8s组件版本：1.23.6（当前最新）</li></ul><h2 id="一、服务器基础配置"><a href="#一、服务器基础配置" class="headerlink" title="一、服务器基础配置"></a>一、服务器基础配置</h2><p><strong>1、配置主机名</strong></p><blockquote><p>所有节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# hostnamectl set-hostname k8s-master</span><br><span class="line">[root@server ~]# hostnamectl set-hostname k8s-work1</span><br><span class="line">[root@server ~]# hostnamectl set-hostname k8s-work2</span><br></pre></td></tr></table></figure><p><strong>2、关闭防火墙</strong></p><blockquote><p>所有节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭firewalld</span></span><br><span class="line">[root@k8s-master ~]# systemctl stop firewalld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭selinux</span></span><br><span class="line">[root@k8s-master ~]# sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config</span><br><span class="line">[root@k8s-master ~]# setenforce 0</span><br></pre></td></tr></table></figure><p><strong>3、互做本地解析</strong></p><blockquote><p>所有节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# vim /etc/hosts</span><br><span class="line"></span><br><span class="line">172.27.0.13 k8s-master</span><br><span class="line">172.27.0.10 k8s-work1</span><br><span class="line">172.27.0.11 k8s-work2</span><br></pre></td></tr></table></figure><p><strong>4、SSH 免密通信（可选）</strong></p><blockquote><p>所有节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# ssh-keygen </span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:qmMRk/pyFrxMRCqzeko/fPbVBzPYz1Em4u5cNR7dvzs root@k8s-master</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|                 |</span><br><span class="line">|    .            |</span><br><span class="line">|   o .     . . o |</span><br><span class="line">|o . =     + . + o|</span><br><span class="line">| + + o  S. * . +o|</span><br><span class="line">|. . =  .  o * + +|</span><br><span class="line">|...+ +.  . o = ..|</span><br><span class="line">|o +oO+  . o o  E.|</span><br><span class="line">|.o *=...   o   oo|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><blockquote><p>所有节点执行（互发公钥）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# ssh-copy-id root@172.27.0.9</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;</span><br><span class="line">The authenticity of host &#x27;172.27.0.9 (172.27.0.9)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:IzYTCZWXEv8rTdYYx+RdTyi+EJF2Jqggz0pT5v/oZwk.</span><br><span class="line">ECDSA key fingerprint is MD5:d0:89:66:b8:73:d0:eb:3b:19:cb:b2:3c:82:d0:a5:ff.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@172.27.0.9&#x27;s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &#x27;root@172.27.0.9&#x27;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><p><strong>5、加载 br_netfilter 模块</strong></p><blockquote><p>确保 br_netfilter 模块被加载<br>所有节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载模块</span></span><br><span class="line">[root@k8s-master ~]# modprobe br_netfilter</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看加载请看</span></span><br><span class="line">[root@k8s-master ~]# lsmod | grep br_netfilter</span><br><span class="line">br_netfilter           22256  0 </span><br><span class="line">bridge                151336  1 br_netfilter</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久生效</span></span><br><span class="line">cat &lt;&lt;EOF | tee /etc/modules-load.d/k8s.conf</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>6、允许 iptables 检查桥接流量</strong></p><blockquote><p>所有节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">[root@k8s-master ~]# sudo sysctl --system</span><br></pre></td></tr></table></figure><p><strong>7、关闭 swap</strong></p><blockquote><p>所有节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">临时关闭</span></span><br><span class="line">[root@k8s-master ~]# swapoff -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久关闭</span></span><br><span class="line">[root@k8s-master ~]# sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br></pre></td></tr></table></figure><p><strong>8、时间同步</strong></p><blockquote><p>所有节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同步网络时间</span></span><br><span class="line">[root@k8s-master ~]# ntpdate time.nist.gov</span><br><span class="line">26 Apr 19:58:05 ntpdate[13947]: the NTP socket is in use, exiting</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将网络时间写入硬件时间</span></span><br><span class="line">[root@k8s-master ~]# hwclock --systohc</span><br></pre></td></tr></table></figure><p><strong>9、安装 Docker</strong></p><blockquote><p>所有节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">过程略，需要 Docker 快速安装脚本的可私我。</span><br></pre></td></tr></table></figure><p><strong>10、安装 kubeadm、kubelet</strong></p><blockquote><p>所有节点执行</p></blockquote><ul><li><p>添加 k8s 镜像源</p><blockquote><p>地址：<a href="https://developer.aliyun.com/mirror/kubernetes?spm=a2c6h.13651102.0.0.1cd01b116JYQIn">https://developer.aliyun.com/mirror/kubernetes?spm=a2c6h.13651102.0.0.1cd01b116JYQIn</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>建立 k8s YUM 缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# yum makecache</span><br></pre></td></tr></table></figure></li><li><p>安装 k8s 相关工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看可安装版本</span></span><br><span class="line">[root@k8s-master ~]# yum list kubelet --showduplicates</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">kubelet.x86_64                                           1.23.0-0                                             kubernetes</span><br><span class="line">kubelet.x86_64                                           1.23.1-0                                             kubernetes</span><br><span class="line">kubelet.x86_64                                           1.23.2-0                                             kubernetes</span><br><span class="line">kubelet.x86_64                                           1.23.3-0                                             kubernetes</span><br><span class="line">kubelet.x86_64                                           1.23.4-0                                             kubernetes</span><br><span class="line">kubelet.x86_64                                           1.23.5-0                                             kubernetes</span><br><span class="line">kubelet.x86_64                                           1.23.6-0                                             kubernetes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始安装（指定你要安装的版本）</span></span><br><span class="line">[root@k8s-master ~]# yum install -y kubelet-1.23.6 kubeadm-1.23.6 kubectl-1.23.6</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置开机自启动并启动kubelet（kubelet由systemd管理）</span></span><br><span class="line">[root@k8s-master ~]# systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、Master-节点"><a href="#二、Master-节点" class="headerlink" title="二、Master 节点"></a>二、Master 节点</h2><p><strong>1、k8s 初始化</strong></p><blockquote><p>Master 节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=172.27.0.13 \</span><br><span class="line">  --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">  --kubernetes-version v1.23.6 \</span><br><span class="line">  --service-cidr=10.96.0.0/12 \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">  --ignore-preflight-errors=all</span><br></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--apiserver-advertise-address  # 集群master地址</span><br><span class="line">--image-repository             # 指定k8s镜像仓库地址（会从阿里的Registry下载组件的Docker镜像，不指定则默认为Google的Registry，但可能会pull镜像失败）</span><br><span class="line">--kubernetes-version           # 指定K8s版本（与kubeadm、kubelet版本保持一致）</span><br><span class="line">--service-cidr                 # Pod统一访问入口（即Service的IP地址池）</span><br><span class="line">--pod-network-cidr             # Pod网络（即Pod的IP地址池，与CNI网络保持一致）</span><br></pre></td></tr></table></figure><p>初始化后输出内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class="line">[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class="line">[kubelet-finalize] Updating &quot;/etc/kubernetes/kubelet.conf&quot; to point to a rotatable kubelet client certificate and key</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, if you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 172.27.0.13:6443 --token hgtxra.fccj35x2szia3r3c \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:578cf5ca4cf588e3d84005d06f6503bf5d9ee25f63b0cfab4f78677a24b92bdd</span><br></pre></td></tr></table></figure><p><strong>2、根据输出提示创建相关文件</strong></p><blockquote><p>Master 节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# mkdir -p $HOME/.kube</span><br><span class="line">[root@k8s-master ~]# cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">[root@k8s-master ~]# chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><p><strong>3、查看 k8s 运行的容器</strong></p><blockquote><p>Master 节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl get pods -n kube-system</span><br><span class="line">NAME                                 READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-6d8c4cb4d-85dx9              0/1     Pending   0          53m</span><br><span class="line">coredns-6d8c4cb4d-f7wld              0/1     Pending   0          53m</span><br><span class="line">etcd-k8s-master                      1/1     Running   1          53m</span><br><span class="line">kube-apiserver-k8s-master            1/1     Running   1          53m</span><br><span class="line">kube-controller-manager-k8s-master   1/1     Running   1          53m</span><br><span class="line">kube-proxy-5mpdp                     1/1     Running   0          13m</span><br><span class="line">kube-proxy-9lp29                     1/1     Running   0          12m</span><br><span class="line">kube-proxy-9ttf6                     1/1     Running   0          53m</span><br><span class="line">kube-scheduler-k8s-master            1/1     Running   1          53m</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4、查看 k8s 节点</strong></p><blockquote><p>Master 节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl get nodes</span><br><span class="line">NAME         STATUS     ROLES                  AGE    VERSION</span><br><span class="line">k8s-master   NotReady   control-plane,master   8m9s   v1.23.6</span><br></pre></td></tr></table></figure><p>可看到当前只有 k8s-master 节点，而且状态是 NotReady（未就绪），因为我们还没有部署网络插件（<code>kubectl apply -f [podnetwork].yaml</code>），于是接着部署容器网络（CNI）。</p><p><strong>5、容器网络（CNI）部署</strong></p><blockquote><p>Master 节点执行<br>插件地址：<a href="https://kubernetes.io/docs/concepts/cluster-administration/addons/">https://kubernetes.io/docs/concepts/cluster-administration/addons/</a><br>该地址在 k8s-master 初始化成功时打印出来。</p></blockquote><ul><li><p>选择一个主流的容器网络插件部署（Calico）</p><p><img src="https://note.youdao.com/yws/res/17339/WEBRESOURCE2ed933b27228fe02892255f43ca7c0db" alt="image"></p></li><li><p>下载yml文件</p><blockquote><p>github地址：<a href="https://github.com/projectcalico/calico/blob/master/manifests/calico.yaml">https://github.com/projectcalico/calico/blob/master/manifests/calico.yaml</a><br>个人地址：<a href="https://k8s-config-rab.oss-cn-chengdu.aliyuncs.com/calico/v3.15.1/calico.yaml">https://k8s-config-rab.oss-cn-chengdu.aliyuncs.com/calico/v3.15.1/calico.yaml</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://docs.projectcalico.org/manifests/calico.yaml</span><br></pre></td></tr></table></figure></li><li><p>修改yaml配置</p></li></ul><p><img src="https://note.youdao.com/yws/res/17338/WEBRESOURCEc51e5f6651f8c4ab80e769324de2ef9e" alt="image"></p><p><img src="https://note.youdao.com/yws/res/17341/WEBRESOURCE04e66e523573eb30cbac25f3b3e6a974" alt="image"></p><ul><li><p>根据初始化的输出提示执行启动指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/calico-node created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/calico-node created</span><br><span class="line">daemonset.apps/calico-node created</span><br><span class="line">serviceaccount/calico-node created</span><br><span class="line">deployment.apps/calico-kube-controllers created</span><br><span class="line">serviceaccount/calico-kube-controllers created</span><br><span class="line">Warning: policy/v1beta1 PodDisruptionBudget is deprecated in v1.21+, unavailable in v1.25+; use policy/v1 PodDisruptionBudget</span><br><span class="line">poddisruptionbudget.policy/calico-kube-controllers created</span><br></pre></td></tr></table></figure></li><li><p>看看该yaml文件所需要启动的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# cat calico.yaml |grep image</span><br><span class="line">          image: docker.io/calico/cni:v3.22.2</span><br><span class="line">          image: docker.io/calico/cni:v3.22.2</span><br><span class="line">          image: docker.io/calico/pod2daemon-flexvol:v3.22.2</span><br><span class="line">          image: docker.io/calico/node:v3.22.2</span><br><span class="line">          image: docker.io/calico/kube-controllers:v3.22.2</span><br></pre></td></tr></table></figure></li><li><p>查看容器是否都 Running</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl get pods -n kube-system</span><br><span class="line">NAME                                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">calico-kube-controllers-7c845d499-rh7tb   1/1     Running   0          5m27s</span><br><span class="line">calico-node-fpdjb                         1/1     Running   0          5m28s</span><br><span class="line">calico-node-jsdf4                         1/1     Running   0          5m28s</span><br><span class="line">calico-node-kmpnr                         1/1     Running   0          5m28s</span><br><span class="line">coredns-6d8c4cb4d-85dx9                   1/1     Running   0          98m</span><br><span class="line">coredns-6d8c4cb4d-f7wld                   1/1     Running   0          98m</span><br><span class="line">etcd-k8s-master                           1/1     Running   1          99m</span><br><span class="line">kube-apiserver-k8s-master                 1/1     Running   1          99m</span><br><span class="line">kube-controller-manager-k8s-master        1/1     Running   1          99m</span><br><span class="line">kube-proxy-5mpdp                          1/1     Running   0          58m</span><br><span class="line">kube-proxy-9lp29                          1/1     Running   0          58m</span><br><span class="line">kube-proxy-9ttf6                          1/1     Running   0          98m</span><br><span class="line">kube-scheduler-k8s-master                 1/1     Running   1          99m</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、work-节点"><a href="#三、work-节点" class="headerlink" title="三、work 节点"></a>三、work 节点</h2><p><strong>1、work 节点加入 k8s 集群</strong></p><blockquote><p>所有 work 节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制k8s-master初始化屏幕输出的语句并在work节点执行</span></span><br><span class="line">[root@k8s-work1 ~]# kubeadm join 172.27.0.13:6443 --token hgtxra.fccj35x2szia3r3c --discovery-token-ca-cert-hash sha256:578cf5ca4cf588e3d84005d06f6503bf5d9ee25f63b0cfab4f78677a24b92bdd</span><br><span class="line">[root@k8s-work2 ~]# kubeadm join 172.27.0.13:6443 --token hgtxra.fccj35x2szia3r3c --discovery-token-ca-cert-hash sha256:578cf5ca4cf588e3d84005d06f6503bf5d9ee25f63b0cfab4f78677a24b92bdd</span><br></pre></td></tr></table></figure><p><strong>2、查询集群节点</strong></p><blockquote><p>Master 节点执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl get nodes</span><br><span class="line">NAME         STATUS   ROLES                  AGE   VERSION</span><br><span class="line">k8s-master   Ready    control-plane,master   99m   v1.23.6</span><br><span class="line">k8s-work1    Ready    &lt;none&gt;                 59m   v1.23.6</span><br><span class="line">k8s-work2    Ready    &lt;none&gt;                 58m   v1.23.6</span><br></pre></td></tr></table></figure><p>都为就绪状态了</p><p>&#x3D;&#x3D;整个 K8s 集群中，就只有 kubelets 没有以容器形式运行，而是通过 systemd 服务运行。&#x3D;&#x3D;</p><h2 id="四、验证"><a href="#四、验证" class="headerlink" title="四、验证"></a>四、验证</h2><p>k8s 集群部署 nginx 服务，并通过浏览器进行访问验证。</p><p><strong>1、创建 pod</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment nginx --image=nginx</span><br><span class="line">kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class="line">kubectl get pod,svc  # 查看NodeIP</span><br></pre></td></tr></table></figure><p><strong>2、访问 Nginx</strong><br><img src="https://note.youdao.com/yws/res/17340/WEBRESOURCE0759fe5137b7c51c0b0e187d38bd5d21" alt="image.png"></p><p>&#x3D;&#x3D;至此：kubeadm方式的k8s集群已经部署完成。&#x3D;&#x3D;</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p><strong>1、k8s编译报错</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">[kubelet-check] It seems like the kubelet isn&#x27;t running or healthy.</span><br><span class="line">[kubelet-check] The HTTP call equal to &#x27;curl -sSL http://localhost:10248/healthz&#x27; failed with error: Get &quot;http://localhost:10248/healthz&quot;: dial tcp [::1]:10248: connect: connection refused.</span><br><span class="line"></span><br><span class="line">Unfortunately, an error has occurred:</span><br><span class="line">timed out waiting for the condition</span><br><span class="line"></span><br><span class="line">This error is likely caused by:</span><br><span class="line">- The kubelet is not running</span><br><span class="line">- The kubelet is unhealthy due to a misconfiguration of the node in some way (required cgroups disabled)</span><br><span class="line"></span><br><span class="line">If you are on a systemd-powered system, you can try to troubleshoot the error with the following commands:</span><br><span class="line">- &#x27;systemctl status kubelet&#x27;</span><br><span class="line">- &#x27;journalctl -xeu kubelet&#x27;</span><br><span class="line"></span><br><span class="line">Additionally, a control plane component may have crashed or exited when started by the container runtime.</span><br><span class="line">To troubleshoot, list all containers using your preferred container runtimes CLI.</span><br><span class="line"></span><br><span class="line">Here is one example how you may list all Kubernetes containers running in docker:</span><br><span class="line">- &#x27;docker ps -a | grep kube | grep -v pause&#x27;</span><br><span class="line">Once you have found the failing container, you can inspect its logs with:</span><br><span class="line">- &#x27;docker logs CONTAINERID&#x27;</span><br><span class="line"></span><br><span class="line">error execution phase wait-control-plane: couldn&#x27;t initialize a Kubernetes cluster</span><br><span class="line">To see the stack trace of this error execute with --v=5 or higher</span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apr 26 20:33:30 test3 kubelet: I0426 20:33:30.588349   21936 docker_service.go:264] &quot;Docker Info&quot; dockerInfo=&amp;&#123;ID:2NSH:KJPQ:XOKI:5XHN:ULL3:L4LG:SXA4:PR6J:DITW:HHCF:2RKL:U2NJ Containers:0 ContainersRunning:0 ContainersPaused:0 ContainersStopped:0 Images:7 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Native Overlay Diff true]] SystemStatus:[] Plugins:&#123;Volume:[local] Network:[bridge host macvlan null overlay] Authorization:[] Log:[awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog]&#125; MemoryLimit:true SwapLimit:true KernelMemory:true KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:false IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6tables:true Debug:false NFd:24 OomKillDisable:true NGoroutines:45 SystemTime:2022-04-26T20:33:30.583063427+08:00 LoggingDriver:json-file CgroupDriver:cgroupfs CgroupVersion: NEventsListener:0 KernelVersion:3.10.0-1160.59.1.el7.x86_64 OperatingSystem:CentOS Linux 7 (Core) OSVersion: OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:0xc000263340 NCPU:2 MemTotal:3873665024 GenericResources:[] DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:k8s-master Labels:[] ExperimentalBuild:false ServerVersion:18.06.3-ce ClusterStore: ClusterAdvertise: Runtimes:map[runc:&#123;Path:docker-runc Args:[] Shim:&lt;nil&gt;&#125;] DefaultRuntime:runc Swarm:&#123;NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:[] Nodes:0 Managers:0 Cluster:&lt;nil&gt; Warnings:[]&#125; LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:&#123;ID:468a545b9edcd5932818eb9de8e72413e616e86e Expected:468a545b9edcd5932818eb9de8e72413e616e86e&#125; RuncCommit:&#123;ID:a592beb5bc4c4092b1b1bac971afed27687340c5 Expected:a592beb5bc4c4092b1b1bac971afed27687340c5&#125; InitCommit:&#123;ID:fec3683 Expected:fec3683&#125; SecurityOptions:[name=seccomp,profile=default] ProductLicense: DefaultAddressPools:[] Warnings:[]&#125;</span><br><span class="line">Apr 26 20:33:30 test3 kubelet: E0426 20:33:30.588383   21936 server.go:302] &quot;Failed to run kubelet&quot; err=&quot;failed to run Kubelet: misconfiguration: kubelet cgroup driver: \&quot;systemd\&quot; is different from docker cgroup driver: \&quot;cgroupfs\&quot;&quot;</span><br></pre></td></tr></table></figure><p>看报错的最后解释<code>kubelet cgroup driver: \&quot;systemd\&quot; is different from docker cgroup driver: \&quot;cgroupfs\&quot;&quot;</code>很明显 kubelet 与 Docker 的 cgroup 驱动程序不同，kubelet 为 systemd，而 Docker 为 cgroupfs。</p><p><code>简单查看一下docker驱动：</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master opt]# docker info |grep Cgroup</span><br><span class="line">Cgroup Driver: cgroupfs</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong><br>重置初始化操作并删除相关文件，然后再修改 Docker 的 cgroup 驱动程序为 systemd 即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置初始化</span></span><br><span class="line">[root@k8s-master ~]# kubeadm reset</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除相关配置文件</span></span><br><span class="line">[root@k8s-master ~]# rm -rf $HOME/.kube/config  &amp;&amp; rm -rf $HOME/.kube</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 Docker 驱动为 systemd（即<span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>]）</span></span><br><span class="line">[root@k8s-master opt]# cat /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://q1rw9tzz.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 Docker</span></span><br><span class="line">[root@k8s-master opt]# systemctl daemon-reload </span><br><span class="line">[root@k8s-master opt]# systemctl restart docker.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次初始化k8s即可</span></span><br><span class="line">[root@k8s-master ~]# kubeadm init ...</span><br></pre></td></tr></table></figure><p><strong>2、work 节点加入 k8s 集群报错</strong></p><p><em><strong>报错1</strong></em>**：**</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accepts at most 1 arg(s), received 3</span><br><span class="line">To see the stack trace of this error execute with --v=5 or higher</span><br></pre></td></tr></table></figure><p>原因：命令不对，我是直接复制粘贴 k8s-master 初始化的终端输出结果，导致报错，所以最好先复制到 txt 文本下修改好格式再粘贴执行。<br>查看日志</p><p><em><strong>报错2</strong></em>**：**</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-work1 ~]# kubeadm join 172.27.0.13:6443 --token hgtxra.fccj35x2szia3r3c --discovery-token-ca-cert-hash sha256:578cf5ca4cf588e3d84005d06f6503bf5d9ee25f63b0cfab4f78677a24b92bdd</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">error execution phase preflight: [preflight] Some fatal errors occurred:</span><br><span class="line">[ERROR Port-10250]: Port 10250 is in use</span><br><span class="line">[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`</span><br><span class="line">To see the stack trace of this error execute with --v=5 or higher</span><br></pre></td></tr></table></figure><p>根据提示查看被占端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-work1 ~]# netstat -lntp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 127.0.0.1:10248         0.0.0.0:*               LISTEN      17616/kubelet       </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1152/sshd           </span><br><span class="line">tcp        0      0 127.0.0.1:36281         0.0.0.0:*               LISTEN      17616/kubelet       </span><br><span class="line">tcp6       0      0 :::10250                :::*                    LISTEN      17616/kubelet       </span><br><span class="line">tcp6       0      0 :::10255                :::*                    LISTEN      17616/kubelet</span><br></pre></td></tr></table></figure><p>原因：10250端口被占用了，kill 掉然后再次 join 即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-work1 ~]#  kill -9 17616</span><br><span class="line">[root@k8s-work1 ~]# netstat -lntp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1152/sshd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> K8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
            <tag> 云原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s 高可用集群架构（二进制）部署及应用</title>
      <link href="/posts/articles/2ac58511.html"/>
      <url>/posts/articles/2ac58511.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/k8s-cert.png" alt="k8s-cert"></p><p>K8s 版本：1.24.4</p><hr><h2 id="一、场景"><a href="#一、场景" class="headerlink" title="一、场景"></a>一、场景</h2><h3 id="1-1-部署演进"><a href="#1-1-部署演进" class="headerlink" title="1.1 部署演进"></a>1.1 部署演进</h3><ul><li>传统部署 ——&gt; 虚拟化部署 ——&gt; 容器化部署</li><li>单体架构 ——&gt; 微服务架构</li></ul><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/container_evolution.svg" alt="部署演进"></p><h3 id="1-2-应用场景"><a href="#1-2-应用场景" class="headerlink" title="1.2 应用场景"></a>1.2 应用场景</h3><ul><li><p>单 K8s 节点 ——&gt; 用于开发测试验证</p></li><li><p>单 K8s-master 集群 ——&gt; 存在 master 单点故障 ——&gt; 一般用于测试环境</p></li><li><p>K8s-master 高可用集群架构（解决单点故障）——&gt; keepalived 高可用 + LB 负载均衡 ——&gt; 企业级 K8s 集群架构 ——&gt; 用于正式环境</p></li></ul><h3 id="1-3-K8s-能做什么？"><a href="#1-3-K8s-能做什么？" class="headerlink" title="1.3 K8s 能做什么？"></a>1.3 K8s 能做什么？</h3><p>在生产环境中， 你需要管理运行着应用程序的容器，并确保服务不会下线。在没有引进 K8s 之前，我们可通过简单的 Docker swarm 集群来实现应用程序下线后自动拉起，保证可用性。而 K8s 能实现的功能却比 Docker swarm 更加丰富，当然也能保证应用程序的可用性，比如一个容器发生故障，那么 K8s 会进行自动修复。它具有以下这些特性：</p><ul><li><p><strong>服务发现和负载均衡</strong></p><p>K8s 可以使用 DNS 名称或自己的 IP 地址来曝露容器。 如果进入容器的流量很大， K8s 可以负载均衡并分配网络流量，从而使部署稳定。</p></li><li><p><strong>存储编排</strong></p><p>K8s 允许你自动挂载你选择的存储系统，例如本地存储、公有云提供商等。</p></li><li><p><strong>自动部署和回滚</strong></p><p>你可以使用 K8s 描述已部署容器的所需状态， 它可以以受控的速率将实际状态更改为期望状态。 例如，你可以自动化 K8s 来为你的部署创建新容器， 删除现有容器并将它们的所有资源用于新容器。</p></li><li><p><strong>自动完成装箱计算</strong></p><p>你为 K8s 提供许多节点组成的集群，在这个集群上运行容器化的任务。 你告诉 K8s 每个容器需要多少 CPU 和内存 (RAM)。 K8s 可以将这些容器按实际情况调度到你的节点上，以最佳方式利用你的资源。</p></li><li><p><strong>自我修复</strong></p><p>K8s 将重新启动失败的容器、替换容器、杀死不响应用户定义的运行状况检查的容器， 并且在准备好服务之前不将其通告给客户端。</p></li><li><p><strong>密钥与配置管理</strong></p><p>K8s 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。 你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</p></li></ul><h2 id="二、架构"><a href="#二、架构" class="headerlink" title="二、架构"></a>二、架构</h2><h3 id="2-1-官方架构图"><a href="#2-1-官方架构图" class="headerlink" title="2.1 官方架构图"></a>2.1 官方架构图</h3><p>K8s 集群由一组被称为节点（node）的服务器组成，这些节点上会运行由 K8s 所管理的容器化应用，且每个集群至少有一个工作节点。</p><p>工作节点会托管所谓的 Pods，而 Pod 就是作为应用负载的组件。控制平面（就是 Master 管理节点）管理集群中的工作节点和 Pods。 为集群提供故障转移和高可用性， 这些控制平面一般跨多主机运行，而集群也会跨多个节点运行。看下图就够就很清晰了。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/components-of-kubernetes.svg" alt="Components of Kubernetes"></p><h3 id="2-2-生产环境架构"><a href="#2-2-生产环境架构" class="headerlink" title="2.2 生产环境架构"></a>2.2 生产环境架构</h3><blockquote><p>下图仅为大体示意图，具体的组件并没有详细展示。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/K8s.jpg" alt="K8s"></p><h2 id="三、规划"><a href="#三、规划" class="headerlink" title="三、规划"></a>三、规划</h2><h3 id="3-1-主机规划"><a href="#3-1-主机规划" class="headerlink" title="3.1 主机规划"></a>3.1 主机规划</h3><table><thead><tr><th>Host</th><th>Hostname</th><th>Node</th><th>说明</th></tr></thead><tbody><tr><td>192.168.56.171（2C2G）</td><td>k8s-master1</td><td>k8s-master1、ETCD</td><td>k8s主节点、ETCD节点</td></tr><tr><td>192.168.56.172（2C2G）</td><td>k8s-master2</td><td>k8s-master2、ETCD</td><td>k8s主节点、ETCD节点</td></tr><tr><td>192.168.56.173（2C2G）</td><td>k8s-master3</td><td>k8s-master3、ETCD</td><td>k8s主节点、ETCD节点</td></tr><tr><td>192.168.56.174（2C2G）</td><td>k8s-work1</td><td>k8s-work1</td><td>k8s工作节点</td></tr><tr><td>192.168.56.175（2C2G）</td><td>k8s-work2</td><td>k8s-work2</td><td>k8s工作节点</td></tr><tr><td>192.168.56.176（2C2G）</td><td>k8s-ha1</td><td>k8s-ha1、keepalived</td><td>k8s负载均衡（负载master）</td></tr><tr><td>192.168.56.177（2C2G）</td><td>k8s-ha2</td><td>k8s-ha2、keepalived</td><td>k8s负载均衡（负载master）</td></tr><tr><td>192.168.56.178（VIP）</td><td>-</td><td>-</td><td>虚拟 IP，集群统一入口</td></tr></tbody></table><p>&#x3D;&#x3D;说明&#x3D;&#x3D;：以上为测试演示用，实际生产环境中至少 <code>8C/16G + </code>的服务器配置。公有云的话，VIP 为公有云的负载均衡的 IP。</p><h3 id="3-2-版本规划"><a href="#3-2-版本规划" class="headerlink" title="3.2 版本规划"></a>3.2 版本规划</h3><p>本次部署的 K8s 版本为 <code>1.24.x</code> ，<code>v1.24</code> 之前的 Kubernetes 版本直接集成了 Docker Engine 的一个组件，名为 <strong>dockershim</strong>。  自 <code>1.24</code> 版起，Dockershim 已从 Kubernetes 项目中正式移除。</p><table><thead><tr><th>软件名称</th><th>版本</th></tr></thead><tbody><tr><td>CentOS 7</td><td>kernel：3.10</td></tr><tr><td>K8s（kube-apiserver、kube-controller-manager、kube-scheduler、kubelet、kube-proxy）</td><td>v1.24.4</td></tr><tr><td>etcd</td><td>v3.5.4</td></tr><tr><td>calico</td><td>v3.23</td></tr><tr><td>coredns</td><td>v1.9.3</td></tr><tr><td>docker</td><td>v20.10.17</td></tr><tr><td>haproxy</td><td>v5.18</td></tr><tr><td>keepalived</td><td>v3.5</td></tr></tbody></table><h3 id="3-3-目录规划"><a href="#3-3-目录规划" class="headerlink" title="3.3 目录规划"></a>3.3 目录规划</h3><blockquote><p>在任意一台 k8s-master 节点创建即可，生成的相关文件（证书、私钥等）再通过 scp 等方式进行分发。</p></blockquote><table><thead><tr><th>DIR</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;data&#x2F;k8s-work&#x2F;</td><td>k8s-master 节点工作目录</td></tr><tr><td>&#x2F;data&#x2F;k8s-work&#x2F;cfssl</td><td>用于创建各种证书文件的目录</td></tr><tr><td>&#x2F;data&#x2F;k8s-work&#x2F;etcd</td><td>ETCD 二进制包存放目录</td></tr><tr><td>&#x2F;data&#x2F;k8s-work&#x2F;k8s</td><td>K8s 二进制包存放目录</td></tr><tr><td>&#x2F;data&#x2F;k8s-work&#x2F;calico</td><td>calico 配置文件</td></tr><tr><td>&#x2F;data&#x2F;k8s-work&#x2F;coredns</td><td>coredns 配置文件</td></tr><tr><td></td><td></td></tr><tr><td>&#x2F;data&#x2F;etcd&#x2F;{conf,data,ssl}</td><td>ETCD 集群服务（配置文件、数据、证书）目录</td></tr><tr><td>&#x2F;data&#x2F;kubernetes&#x2F;{conf,logs,ssl,tokenfile}</td><td>K8s 集群服务（配置文件、数据、证书）目录</td></tr></tbody></table><h3 id="3-4-网络分配"><a href="#3-4-网络分配" class="headerlink" title="3.4 网络分配"></a>3.4 网络分配</h3><table><thead><tr><th>网络名称</th><th>网段</th></tr></thead><tbody><tr><td>Node 节点网络</td><td>192.168.56.0&#x2F;24</td></tr><tr><td>Service 网络</td><td>10.96.0.0&#x2F;16</td></tr><tr><td>Pod 网络</td><td>10.244.0.0&#x2F;16</td></tr></tbody></table><h3 id="3-5-容器引擎"><a href="#3-5-容器引擎" class="headerlink" title="3.5 容器引擎"></a>3.5 容器引擎</h3><p>本次采用 Docker 作为 K8s 的编排对象，但要清楚，从 1.20+ 版本开始，K8s 已不再唯一支持 Docker 作为编排对象，且 1.24+ 版本开始完全移除了 <code>Dockershim</code>，进而支持 Contained 工业级容器，当然我们的 Docker 还是能继续使用的，可通过 <code>cri-docker</code> 接口实现，下文会有详细介绍。</p><h2 id="四、部署"><a href="#四、部署" class="headerlink" title="四、部署"></a>四、部署</h2><h3 id="4-1-服务器初始化"><a href="#4-1-服务器初始化" class="headerlink" title="4.1 服务器初始化"></a>4.1 服务器初始化</h3><h4 id="4-1-1-统一主机名"><a href="#4-1-1-统一主机名" class="headerlink" title="4.1.1 统一主机名"></a>4.1.1 统一主机名</h4><blockquote><p>对应主机执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-master1</span><br><span class="line">hostnamectl set-hostname k8s-master2</span><br><span class="line">hostnamectl set-hostname k8s-master3</span><br><span class="line">hostnamectl set-hostname k8s-work1</span><br><span class="line">hostnamectl set-hostname k8s-work2</span><br><span class="line">hostnamectl set-hostname k8s-ha1</span><br><span class="line">hostnamectl set-hostname k8s-ha2</span><br></pre></td></tr></table></figure><h4 id="4-1-2-互作本地解析"><a href="#4-1-2-互作本地解析" class="headerlink" title="4.1.2 互作本地解析"></a>4.1.2 互作本地解析</h4><blockquote><p>所有主机均执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">192.168.56.171 k8s-master1</span><br><span class="line">192.168.56.172 k8s-master2</span><br><span class="line">192.168.56.173 k8s-master3</span><br><span class="line">192.168.56.174 k8s-work1</span><br><span class="line">192.168.56.175 k8s-work2</span><br><span class="line">192.168.56.176 k8s-ha1</span><br><span class="line">192.168.56.177 k8s-ha2</span><br></pre></td></tr></table></figure><h4 id="4-1-3-主机系统优化"><a href="#4-1-3-主机系统优化" class="headerlink" title="4.1.3 主机系统优化"></a>4.1.3 主机系统优化</h4><blockquote><p>所有主机均执行</p></blockquote><p>1、关闭 firewalld</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>2、关闭 Selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure><p>3、停用交互分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br></pre></td></tr></table></figure><p>4、集群系统时间同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntpdate &amp;&amp; ntpdate time.nist.gov &amp;&amp; hwclock --systohc</span><br></pre></td></tr></table></figure><p>5、加载 br_netfilter 模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保 br_netfilter 模块被加载</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载模块</span></span><br><span class="line">modprobe br_netfilter</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看加载情况</span></span><br><span class="line">lsmod | grep br_netfilter</span><br><span class="line">br_netfilter           22256  0 </span><br><span class="line">bridge                151336  1 br_netfilter</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久生效</span></span><br><span class="line">cat &lt;&lt;EOF | tee /etc/modules-load.d/k8s.conf</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>6、允许 iptables 检查桥接流量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置所需的 sysctl 参数，参数在重新启动后保持不变</span></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.ipv4.ip_forward                 = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">应用 sysctl 参数而不重新启动</span></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure><p>7、文件描述符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt; /etc/security/limits.conf</span><br><span class="line">* soft nofile 655360</span><br><span class="line">* hard nofile 655360</span><br><span class="line">* soft nproc 655350</span><br><span class="line">* hard nproc 655350</span><br><span class="line">* soft memlock unlimited</span><br><span class="line">* hard memlock unlimited</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>9、修改虚拟内存最大限制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt; /etc/sysctl.conf</span><br><span class="line">vm.max_map_count = 655360</span><br><span class="line">fs.file-max=655360</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p>系统级别</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt; /etc/systemd/system.conf</span><br><span class="line">DefaultLimitNOFILE=655360</span><br><span class="line">DefaultLimitNPROC=655360</span><br><span class="line">DefaultLimitMEMLOCK=infinity</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p>使生效</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>10、MAC 地址和 product_uuid 的唯一性</p><p>一般来讲，硬件设备会拥有唯一的地址，但是有些虚拟机的地址可能会重复。 Kubernetes 使用这些值来唯一确定集群中的节点。 如果这些值在每个节点上不唯一，可能会导致安装失败。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以使用命令 ip link 或 ifconfig -a 来获取网络接口的 MAC 地址</span><br><span class="line">可以使用 sudo cat /sys/class/dmi/id/product_uuid 命令对 product_uuid 校验</span><br></pre></td></tr></table></figure><h4 id="4-1-4-配置免密登录"><a href="#4-1-4-配置免密登录" class="headerlink" title="4.1.4 配置免密登录"></a>4.1.4 配置免密登录</h4><p>k8s-master1 节点免密钥登录其他节点，安装过程中生成配置文件和证书均在 k8s-master1 上操作，集群管理也在 k8s-master1 上操作，阿里云或者 AWS 上需要单独一台 kubectl 服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一路回车即可</span></span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">免密登录</span></span><br><span class="line">ssh-copy-id k8s-master2</span><br><span class="line">ssh-copy-id k8s-master3</span><br><span class="line">ssh-copy-id k8s-work1</span><br><span class="line">ssh-copy-id k8s-work2</span><br></pre></td></tr></table></figure><h3 id="4-2-K8s-负载均衡配置"><a href="#4-2-K8s-负载均衡配置" class="headerlink" title="4.2 K8s 负载均衡配置"></a>4.2 K8s 负载均衡配置</h3><blockquote><p>在 k8s-ha1、k8s-ha2 服务器上执行</p></blockquote><h4 id="4-2-1-Haproxy"><a href="#4-2-1-Haproxy" class="headerlink" title="4.2.1 Haproxy"></a>4.2.1 Haproxy</h4><p>1、安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install haproxy</span><br></pre></td></tr></table></figure><p>2、配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/haproxy/haproxy.cfg&lt;&lt;&quot;EOF&quot;</span><br><span class="line">global</span><br><span class="line"> maxconn 2000</span><br><span class="line"> ulimit-n 16384</span><br><span class="line"> log 127.0.0.1 local0 err</span><br><span class="line"> stats timeout 30s</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line"> log global</span><br><span class="line"> mode http</span><br><span class="line"> option httplog</span><br><span class="line"> timeout connect 5000</span><br><span class="line"> timeout client 50000</span><br><span class="line"> timeout server 50000</span><br><span class="line"> timeout http-request 15s</span><br><span class="line"> timeout http-keep-alive 15s</span><br><span class="line"></span><br><span class="line">frontend monitor-in</span><br><span class="line"> bind *:33305</span><br><span class="line"> mode http</span><br><span class="line"> option httplog</span><br><span class="line"> monitor-uri /monitor</span><br><span class="line"></span><br><span class="line">frontend k8s-master</span><br><span class="line"> bind 0.0.0.0:6443</span><br><span class="line"> bind 127.0.0.1:6443</span><br><span class="line"> mode tcp</span><br><span class="line"> option tcplog</span><br><span class="line"> tcp-request inspect-delay 5s</span><br><span class="line"> default_backend k8s-master</span><br><span class="line"></span><br><span class="line">backend k8s-master</span><br><span class="line"> mode tcp</span><br><span class="line"> option tcplog</span><br><span class="line"> option tcp-check</span><br><span class="line"> balance roundrobin</span><br><span class="line"> default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100</span><br><span class="line"> server  k8s-master1  192.168.56.171:6443 check</span><br><span class="line"> server  k8s-master2  192.168.56.172:6443 check</span><br><span class="line"> server  k8s-master3  192.168.56.173:6443 check</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>3、启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start haproxy.service</span><br><span class="line">systemctl enable haproxy.service</span><br></pre></td></tr></table></figure><h4 id="4-2-2-Keepalived"><a href="#4-2-2-Keepalived" class="headerlink" title="4.2.2 Keepalived"></a>4.2.2 Keepalived</h4><p>1、安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y keepalived</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件路径：/etc/keepalived/keepalived.conf</span></span><br></pre></td></tr></table></figure><p>2、配置</p><ul><li>k8s-ha1（主）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/keepalived/keepalived.conf&lt;&lt;&quot;EOF&quot;</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id k8s-master</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_k8s-master &#123;</span><br><span class="line">    script &quot;/etc/keepalived/check_k8s-master_status.sh&quot;</span><br><span class="line">    interval 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    mcast_src_ip 192.168.56.176</span><br><span class="line">    virtual_router_id 90</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8S_PASSWD</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.56.178/24</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_k8s-master</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>k8s-ha2（备）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/keepalived/keepalived.conf&lt;&lt;&quot;EOF&quot;</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id k8s-master</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_k8s-master &#123;</span><br><span class="line">    script &quot;/etc/keepalived/check_k8s-master_status.sh&quot;</span><br><span class="line">    interval 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    mcast_src_ip 192.168.56.177</span><br><span class="line">    virtual_router_id 90</span><br><span class="line">    priority 50</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8S_PASSWD</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.56.178/24</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_k8s-master</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>3、K8s-master 健康检测脚本</p><blockquote><p>主备均创建该文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/keepalived/check_k8s-master_status.sh &lt;&lt;&quot;EOF&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">err=0</span><br><span class="line">for k in $(seq 1 3)</span><br><span class="line">do</span><br><span class="line">   check_code=$(pgrep haproxy)</span><br><span class="line">   if [[ $check_code == &quot;&quot; ]]; then</span><br><span class="line">       err=$(expr $err + 1)</span><br><span class="line">       sleep 1</span><br><span class="line">       continue</span><br><span class="line">   else</span><br><span class="line">       err=0</span><br><span class="line">       break</span><br><span class="line">   fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">if [[ $err != &quot;0&quot; ]]; then</span><br><span class="line">   echo &quot;systemctl stop keepalived&quot;</span><br><span class="line">   /usr/bin/systemctl stop keepalived</span><br><span class="line">   exit 1</span><br><span class="line">else</span><br><span class="line">   exit 0</span><br><span class="line">fi</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>4、启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start keepalived.service</span><br><span class="line">systemctl enable keepalived.service</span><br></pre></td></tr></table></figure><h3 id="4-3-K8s-集群组件部署"><a href="#4-3-K8s-集群组件部署" class="headerlink" title="4.3 K8s 集群组件部署"></a>4.3 K8s 集群组件部署</h3><h4 id="4-3-1-ETCD-集群"><a href="#4-3-1-ETCD-集群" class="headerlink" title="4.3.1 ETCD 集群"></a>4.3.1 ETCD 集群</h4><h5 id="4-3-1-1-部署-cfssl-工具"><a href="#4-3-1-1-部署-cfssl-工具" class="headerlink" title="4.3.1.1 部署 cfssl 工具"></a>4.3.1.1 部署 cfssl 工具</h5><blockquote><p>包下载地址：<a href="https://github.com/cloudflare/cfssl/">https://github.com/cloudflare/cfssl/</a></p></blockquote><p>1、创建工作目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/k8s-work/cfssl</span><br></pre></td></tr></table></figure><p>2、安装 cfssl 工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我用的版本是1.6.1（大家根据实际选择）</span></span><br><span class="line">cd /data/k8s-work/cfssl</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传文件到当前目录下（这里用到了三个文件）</span></span><br><span class="line">[root@k8s-master1 cfssl]# ll</span><br><span class="line">total 40232</span><br><span class="line">-rw-r--r-- 1 root root 16659824 May 31 22:12 cfssl_1.6.1_linux_amd64</span><br><span class="line">-rw-r--r-- 1 root root 13502544 May 31 21:49 cfssl-certinfo_1.6.1_linux_amd64</span><br><span class="line">-rw-r--r-- 1 root root 11029744 May 31 21:50 cfssljson_1.6.1_linux_amd64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cfssl文件：命令行工具</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cfssljson文件：用来从cfssl程序获取JSON输出，并将证书，密钥，CSR和bundle写入文件中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cfssl-certinfo文件：证书相关信息查看工具</span></span><br></pre></td></tr></table></figure><p>3、软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./cfssl*</span><br><span class="line">ln -s /data/k8s-work/cfssl/cfssl_1.6.1_linux_amd64 /usr/sbin/cfssl</span><br><span class="line">ln -s /data/k8s-work/cfssl/cfssl-certinfo_1.6.1_linux_amd64 /usr/sbin/cfssl-certinfo</span><br><span class="line">ln -s /data/k8s-work/cfssl/cfssljson_1.6.1_linux_amd64 /usr/sbin/cfssljson</span><br></pre></td></tr></table></figure><p>4、验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 cfssl]# cfssl version</span><br><span class="line">Version: 1.6.1</span><br><span class="line">Runtime: go1.12.12</span><br></pre></td></tr></table></figure><h5 id="4-3-1-2-生成-CA-证书"><a href="#4-3-1-2-生成-CA-证书" class="headerlink" title="4.3.1.2 生成 CA 证书"></a>4.3.1.2 生成 CA 证书</h5><p>1、配置 CA 证书请求文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cd /data/k8s-work/cfssl</span><br><span class="line"></span><br><span class="line">cat &gt; ca-csr.json &lt;&lt;&quot;EOF&quot;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;kubernetes&quot;,</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">      &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">      &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;Beijing&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;xgxy&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;ops&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;ca&quot;: &#123;</span><br><span class="line">          &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>2、创建 ca 证书</p><blockquote><p>会生成三个文件：ca.csr 请求文件、ca-key.pem请求 key、ca.pem 证书</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220828220937384.png" alt="image-20220828220937384"></p><p>3、CA 证书策略</p><p>你可以通过 cfssl 命令行工具来默认生成，然后再修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl print-defaults config &gt; ca-config.json</span><br></pre></td></tr></table></figure><p>生成后，修改为下面案例即可（或就直接使用下面的示例配置即可）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ca-config.json &lt;&lt;&quot;EOF&quot;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;signing&quot;: &#123;</span><br><span class="line">      &quot;default&quot;: &#123;</span><br><span class="line">          &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">      &quot;profiles&quot;: &#123;</span><br><span class="line">          &quot;kubernetes&quot;: &#123;</span><br><span class="line">              &quot;usages&quot;: [</span><br><span class="line">                  &quot;signing&quot;,</span><br><span class="line">                  &quot;key encipherment&quot;,</span><br><span class="line">                  &quot;server auth&quot;,</span><br><span class="line">                  &quot;client auth&quot;</span><br><span class="line">              ],</span><br><span class="line">              &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">server auth：表示client客户端可以使用ca对server提供的证书进行验证</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">client auth：表示server客户端可以使用ca对client提供的证书进行验证</span></span><br></pre></td></tr></table></figure><h5 id="4-3-1-3-生成-ETCD-证书"><a href="#4-3-1-3-生成-ETCD-证书" class="headerlink" title="4.3.1.3 生成 ETCD 证书"></a>4.3.1.3 生成 ETCD 证书</h5><p>1、配置 ETCD 证书请求文件</p><blockquote><p>为了方便后期扩容可以多写几个预留的 IP</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; etcd-csr.json &lt;&lt;&quot;EOF&quot;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">  &quot;hosts&quot;: [</span><br><span class="line">    &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;192.168.56.171&quot;,</span><br><span class="line">    &quot;192.168.56.172&quot;,</span><br><span class="line">    &quot;192.168.56.173&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [&#123;</span><br><span class="line">    &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">    &quot;ST&quot;: &quot;Beijing&quot;,</span><br><span class="line">    &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class="line">    &quot;O&quot;: &quot;xgxy&quot;,</span><br><span class="line">    &quot;OU&quot;: &quot;ops&quot;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>2、生成 ETCD 证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcd</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220829141739248.png" alt="image-20220829141739248"></p><h5 id="4-3-1-4-部署-ETCD-集群"><a href="#4-3-1-4-部署-ETCD-集群" class="headerlink" title="4.3.1.4 部署 ETCD 集群"></a>4.3.1.4 部署 ETCD 集群</h5><blockquote><p>包下载地址：<a href="https://github.com/etcd-io/etcd">https://github.com/etcd-io/etcd</a></p></blockquote><p>1、下载 ETCD 软件包并上传至服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/k8s-work/etcd</span><br><span class="line">tar xzf etcd-v3.5.4-linux-amd64.tar.gz</span><br><span class="line">mv etcd-v3.5.4-linux-amd64 etcd-v3.5.4</span><br></pre></td></tr></table></figure><p>2、做软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /data/k8s-work/etcd/etcd-v3.5.4/etcd* /usr/bin/</span><br></pre></td></tr></table></figure><p>3、版本验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 etcd]# etcd --version</span><br><span class="line">etcd Version: 3.5.4</span><br><span class="line">Git SHA: 08407ff76</span><br><span class="line">Go Version: go1.16.15</span><br><span class="line">Go OS/Arch: linux/amd64</span><br></pre></td></tr></table></figure><p>4、分发 ETCD 二进制工具至其他 ETCD 集群节点主机上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp etcd-v3.5.4/etcd* k8s-master2:/usr/bin/</span><br><span class="line">scp etcd-v3.5.4/etcd* k8s-master3:/usr/bin/</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220829143435683.png" alt="image-20220829143435683"></p><p>5、新建 ETCD 集群相关目录</p><blockquote><p>所有 ETCD 集群节点均操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/etcd/&#123;conf,data,ssl&#125;</span><br></pre></td></tr></table></figure><p>6、创建 ETCD 配置文件</p><blockquote><p>所有 ETCD 集群节点均操作</p></blockquote><ul><li><p>k8s-master1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /data/etcd/conf/etcd.conf &lt;&lt;&quot;EOF&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[Member]</span></span><br><span class="line">ETCD_NAME=&quot;etcd-1&quot;</span><br><span class="line">ETCD_DATA_DIR=&quot;/data/etcd/data&quot;</span><br><span class="line">ETCD_LISTEN_PEER_URLS=&quot;https://192.168.56.171:2380&quot;</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=&quot;https://192.168.56.171:2379,http://127.0.0.1:2379&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[Clustering]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://192.168.56.171:2380&quot;</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://192.168.56.171:2379&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER=&quot;etcd-1=https://192.168.56.171:2380,etcd-2=https://192.168.56.172:2380,etcd-3=https://192.168.56.173:2380&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[Security]</span></span><br><span class="line">ETCD_CERT_FILE=&quot;/data/etcd/ssl/etcd.pem&quot;</span><br><span class="line">ETCD_KEY_FILE=&quot;/data/etcd/ssl/etcd-key.pem&quot;</span><br><span class="line">ETCD_TRUSTED_CA_FILE=&quot;/data/etcd/ssl/ca.pem&quot;</span><br><span class="line">ETCD_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class="line">ETCD_PEER_CERT_FILE=&quot;/data/etcd/ssl/etcd.pem&quot;</span><br><span class="line">ETCD_PEER_KEY_FILE=&quot;/data/etcd/ssl/etcd-key.pem&quot;</span><br><span class="line">ETCD_PEER_TRUSTED_CA_FILE=&quot;/data/etcd/ssl/ca.pem&quot;</span><br><span class="line">ETCD_PEER_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>k8s-master2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /data/etcd/conf/etcd.conf &lt;&lt;&quot;EOF&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[Member]</span></span><br><span class="line">ETCD_NAME=&quot;etcd-2&quot;</span><br><span class="line">ETCD_DATA_DIR=&quot;/data/etcd/data&quot;</span><br><span class="line">ETCD_LISTEN_PEER_URLS=&quot;https://192.168.56.172:2380&quot;</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=&quot;https://192.168.56.172:2379,http://127.0.0.1:2379&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[Clustering]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://192.168.56.172:2380&quot;</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://192.168.56.172:2379&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER=&quot;etcd-1=https://192.168.56.171:2380,etcd-2=https://192.168.56.172:2380,etcd-3=https://192.168.56.173:2380&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[Security]</span></span><br><span class="line">ETCD_CERT_FILE=&quot;/data/etcd/ssl/etcd.pem&quot;</span><br><span class="line">ETCD_KEY_FILE=&quot;/data/etcd/ssl/etcd-key.pem&quot;</span><br><span class="line">ETCD_TRUSTED_CA_FILE=&quot;/data/etcd/ssl/ca.pem&quot;</span><br><span class="line">ETCD_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class="line">ETCD_PEER_CERT_FILE=&quot;/data/etcd/ssl/etcd.pem&quot;</span><br><span class="line">ETCD_PEER_KEY_FILE=&quot;/data/etcd/ssl/etcd-key.pem&quot;</span><br><span class="line">ETCD_PEER_TRUSTED_CA_FILE=&quot;/data/etcd/ssl/ca.pem&quot;</span><br><span class="line">ETCD_PEER_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>k8s-master3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /data/etcd/conf/etcd.conf &lt;&lt;&quot;EOF&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[Member]</span></span><br><span class="line">ETCD_NAME=&quot;etcd-3&quot;</span><br><span class="line">ETCD_DATA_DIR=&quot;/data/etcd/data&quot;</span><br><span class="line">ETCD_LISTEN_PEER_URLS=&quot;https://192.168.56.173:2380&quot;</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=&quot;https://192.168.56.173:2379,http://127.0.0.1:2379&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[Clustering]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://192.168.56.173:2380&quot;</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://192.168.56.173:2379&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER=&quot;etcd-1=https://192.168.56.171:2380,etcd-2=https://192.168.56.172:2380,etcd-3=https://192.168.56.173:2380&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[Security]</span></span><br><span class="line">ETCD_CERT_FILE=&quot;/data/etcd/ssl/etcd.pem&quot;</span><br><span class="line">ETCD_KEY_FILE=&quot;/data/etcd/ssl/etcd-key.pem&quot;</span><br><span class="line">ETCD_TRUSTED_CA_FILE=&quot;/data/etcd/ssl/ca.pem&quot;</span><br><span class="line">ETCD_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class="line">ETCD_PEER_CERT_FILE=&quot;/data/etcd/ssl/etcd.pem&quot;</span><br><span class="line">ETCD_PEER_KEY_FILE=&quot;/data/etcd/ssl/etcd-key.pem&quot;</span><br><span class="line">ETCD_PEER_TRUSTED_CA_FILE=&quot;/data/etcd/ssl/ca.pem&quot;</span><br><span class="line">ETCD_PEER_CLIENT_CERT_AUTH=&quot;true&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">ETCD_NAME：节点名称，集群中唯一</span><br><span class="line">ETCD_DATA_DIR：数据目录（自定义）</span><br><span class="line">ETCD_LISTEN_PEER_URLS：集群通信监听地址</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS：客户端访问监听地址</span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS：集群通告地址</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS：客户端通告地址</span><br><span class="line">ETCD_INITIAL_CLUSTER：集群节点地址（所有ETCD节点地址）</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN：集群Token（ETCD集群节点统一口令）</span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE：加入集群的当前状态，new是新集群，existing 表示加入已有集群</span><br><span class="line">ETCD_CERT_FILE：etcd.pem文件</span><br><span class="line">ETCD_KEY_FILE：etcd<span class="literal">-key</span>.pem文件</span><br><span class="line">ETCD_TRUSTED_CA_FILE：ca.pem文件</span><br><span class="line">ETCD_CLIENT_CERT_AUTH=<span class="string">&quot;true&quot;</span></span><br><span class="line">ETCD_PEER_CERT_FILE：etcd.pem文件</span><br><span class="line">ETCD_PEER_KEY_FILE：etcd<span class="literal">-key</span>.pem文件</span><br><span class="line">ETCD_PEER_TRUSTED_CA_FILE：ca.pem文件</span><br><span class="line">ETCD_PEER_CLIENT_CERT_AUTH=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p>7、复制 ETCD 证书至刚创建对应的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">k8s-master1</span></span><br><span class="line">cd /data/k8s-work/cfssl</span><br><span class="line">cp ca*.pem etcd*.pem /data/etcd/ssl/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">k8s-master2</span></span><br><span class="line">scp ca*.pem etcd*.pem k8s-master2:/data/etcd/ssl/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">k8s-master3</span></span><br><span class="line">scp ca*.pem etcd*.pem k8s-master3:/data/etcd/ssl/</span><br></pre></td></tr></table></figure><p>8、配置 systemd 管理</p><blockquote><p>ETCD 三台集群节点均操作</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; EOF | <span class="built_in">tee</span> /usr/lib/systemd/system/etcd.service</span><br><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network<span class="literal">-online</span>.target</span><br><span class="line">Wants=network<span class="literal">-online</span>.target</span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>]</span><br><span class="line"><span class="built_in">Type</span>=notify</span><br><span class="line">EnvironmentFile=-/<span class="keyword">data</span>/etcd/conf/etcd.conf</span><br><span class="line">ExecStart=/usr/bin/etcd</span><br><span class="line">Restart=on<span class="literal">-failure</span></span><br><span class="line">RestartSec=<span class="number">5</span></span><br><span class="line">LimitNOFILE=<span class="number">65536</span></span><br><span class="line"></span><br><span class="line">[<span class="type">Install</span>]</span><br><span class="line">WantedBy=multi<span class="literal">-user</span>.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>9、启动 ETCD 集群</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon<span class="literal">-reload</span></span><br><span class="line">systemctl <span class="built_in">start</span> etcd.service</span><br><span class="line">systemctl enable etcd.service</span><br><span class="line"></span><br><span class="line">这里注意：启动第一个ETCD节点后，它就会等待其他集群节点加入，如果特定时间内其他节点未加入，则启动会失败</span><br><span class="line">因此，我们需要在特定时间内启动ETCD集群，避免超时启动失败</span><br></pre></td></tr></table></figure><p>10、集群验证</p><ul><li><p>节点可用性验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 /usr/bin/etcdctl --cacert=/data/etcd/ssl/ca.pem --cert=/data/etcd/ssl/etcd.pem --key=/data/etcd/ssl/etcd-key.pem --endpoints=&quot;https://192.168.56.171:2379,https://192.168.56.172:2379,https://192.168.56.173:2379&quot; endpoint health --write-out=table</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220829161255754.png" alt="image-20220829161255754"></p></li><li><p>ETCD 数据库性能验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 /usr/bin/etcdctl --write-out=table --cacert=/data/etcd/ssl/ca.pem --cert=/data/etcd/ssl/etcd.pem --key=/data/etcd/ssl/etcd-key.pem --endpoints=https://192.168.56.171:2379,https://192.168.56.172:2379,https://192.168.56.173:2379 check perf</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220829161833128.png" alt="image-20220829161833128"></p></li><li><p>集群节点成员列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 /usr/bin/etcdctl --write-out=table --cacert=/data/etcd/ssl/ca.pem --cert=/data/etcd/ssl/etcd.pem --key=/data/etcd/ssl/etcd-key.pem --endpoints=https://192.168.56.171:2379,https://192.168.56.172:2379,https://192.168.56.173:2379 member list</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220829162029485.png" alt="image-20220829162029485"></p><p>这里看不了谁是 Leader，继续看下一条测试命令。</p></li><li><p>查看集群 Leader</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 /usr/bin/etcdctl --write-out=table --cacert=/data/etcd/ssl/ca.pem --cert=/data/etcd/ssl/etcd.pem --key=/data/etcd/ssl/etcd-key.pem --endpoints=https://192.168.56.171:2379,https://192.168.56.172:2379,https://192.168.56.173:2379 endpoint status</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220829162425388.png" alt="image-20220829162425388"></p></li></ul><h4 id="4-3-2-K8s-集群部署"><a href="#4-3-2-K8s-集群部署" class="headerlink" title="4.3.2 K8s 集群部署"></a>4.3.2 K8s 集群部署</h4><blockquote><p>包下载地址：<a href="https://github.com/kubernetes/kubernetes">https://github.com/kubernetes/kubernetes</a></p></blockquote><h5 id="4-3-2-1-Master-节点"><a href="#4-3-2-1-Master-节点" class="headerlink" title="4.3.2.1 Master 节点"></a>4.3.2.1 Master 节点</h5><blockquote><p>k8s-master 必须的节点：kube-apiserver、kube-controller-manager、kube-scheduler、kubectl（k8s-master 客户端工具）</p></blockquote><h6 id="4-3-2-1-1-kubernetes"><a href="#4-3-2-1-1-kubernetes" class="headerlink" title="4.3.2.1.1 kubernetes"></a>4.3.2.1.1 kubernetes</h6><blockquote><p>K8s 二进制包下载并分发</p></blockquote><p>1、创建工作目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/k8s-work/k8s</span><br></pre></td></tr></table></figure><p>2、下载并上传 K8s 包至服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xzf kubernetes-server-linux-amd64.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个二进制包包含了master、work的所有组件，所以下载一个二进制包即可</span></span><br></pre></td></tr></table></figure><p>3、做软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ln -s /data/k8s-work/k8s/kubernetes/server/bin/kube-apiserver /usr/bin/</span><br><span class="line">ln -s /data/k8s-work/k8s/kubernetes/server/bin/kube-controller-manager /usr/bin/</span><br><span class="line">ln -s /data/k8s-work/k8s/kubernetes/server/bin/kube-scheduler /usr/bin/</span><br><span class="line">ln -s /data/k8s-work/k8s/kubernetes/server/bin/kubectl /usr/bin/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你希望将你的 k8s-master 节点也用于工作负载，那还需要分发以下二进制组件。本次我不希望在master节点上进行工作负载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ln</span> -s /data/k8s-work/k8s/kubernetes/server/bin/kubelet /usr/bin/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ln</span> -s /data/k8s-work/k8s/kubernetes/server/bin/kube-proxy /usr/bin/</span></span><br></pre></td></tr></table></figure><p>4、二进制组件分发</p><blockquote><p>分发二进制命令至其他 k8s-master 节点，这是 k8s-master 必须的二进制组件。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp kube-apiserver kube-controller-manager kube-scheduler kubectl k8s-master2:/usr/bin/</span><br><span class="line">scp kube-apiserver kube-controller-manager kube-scheduler kubectl k8s-master3:/usr/bin/</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220829170425953.png" alt="image-20220829170425953"></p><blockquote><p>如果你希望将你的 k8s-master 节点也用于<code>工作负载</code>，那还需要分发这几个二进制组件。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp kubelet kube-proxy k8s-master2:/usr/bin/</span><br><span class="line">scp kubelet kube-proxy k8s-master3:/usr/bin/</span><br></pre></td></tr></table></figure><h6 id="4-3-2-1-2-apiserver"><a href="#4-3-2-1-2-apiserver" class="headerlink" title="4.3.2.1.2 apiserver"></a>4.3.2.1.2 apiserver</h6><p>1、配置 apiserver 证书请求文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同样，进入到我们的cfssl目录下创建</span></span><br><span class="line">cd /data/k8s-work/cfssl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-apiserver-csr.json &lt;&lt; &quot;EOF&quot;</span><br><span class="line">&#123;</span><br><span class="line">&quot;CN&quot;: &quot;kubernetes&quot;,</span><br><span class="line">  &quot;hosts&quot;: [</span><br><span class="line">    &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;192.168.56.171&quot;,</span><br><span class="line">    &quot;192.168.56.172&quot;,</span><br><span class="line">    &quot;192.168.56.173&quot;,</span><br><span class="line">    &quot;192.168.56.174&quot;,</span><br><span class="line">    &quot;192.168.56.175&quot;,</span><br><span class="line">    &quot;192.168.56.176&quot;,</span><br><span class="line">    &quot;192.168.56.177&quot;,</span><br><span class="line">    &quot;192.168.56.178&quot;,</span><br><span class="line">    &quot;192.168.56.179&quot;,</span><br><span class="line">    &quot;192.168.56.180&quot;,</span><br><span class="line">    &quot;10.96.0.1&quot;,</span><br><span class="line">    &quot;kubernetes&quot;,</span><br><span class="line">    &quot;kubernetes.default&quot;,</span><br><span class="line">    &quot;kubernetes.default.svc&quot;,</span><br><span class="line">    &quot;kubernetes.default.svc.cluster&quot;,</span><br><span class="line">    &quot;kubernetes.default.svc.cluster.local&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;Beijing&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;xgxy&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;ops&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p>以上 IP 为我们的 k8s-master 节点 IP、k8s-work 节点 IP、k8s-ha 节点 IP、VIP，且这些 IP 都是必要的。</p><p>为了方便后期扩容可以多写几个预留的 IP，方便 master 或 work 的加入。</p><p>注意：hosts 字段不仅可写 IP，也可写域名。</p></blockquote><p>2、生成 apiserver 证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-apiserver-csr.json | cfssljson -bare kube-apiserver</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220829173940350.png" alt="image-20220829173940350"></p><p>3、配置 token文件</p><blockquote><p>其目的是为了实现自动签发证书，因为 Master apiserver 启用 TLS 认证后，work 节点的 kubelet、kube-proxy 与 kube-apiserver 进行通信时必须使用 CA 签发的有效证书，如果我有几百上千台 work 节点，那每次进行通信无疑都会增加工作量。</p><p>为了简化流程，Kubernetes 引入了 TLS bootstraping 机制来实现动态颁发客户端证书。目前主要用于kubelet，kube-proxy 还是由我们统一颁发一个证书。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; token.csv &lt;&lt; EOF</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="built_in">head</span> -c 16 /dev/urandom | <span class="built_in">od</span> -An -t x | <span class="built_in">tr</span> -d <span class="string">&#x27; &#x27;</span>),kubelet-bootstrap,10001,<span class="string">&quot;system:kubelet-bootstrap&quot;</span></span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>4、创建 apiserver 配置文件</p><blockquote><p>其实你会发现，流程与部署 ETCD 集群类似</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/kubernetes/&#123;conf,tokenfile,ssl,logs/kube-apiserver&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /data/kubernetes/conf</span><br></pre></td></tr></table></figure><ul><li><p>k8s-master1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /data/kubernetes/conf/kube-apiserver.conf &lt;&lt; &quot;EOF&quot;</span><br><span class="line">KUBE_APISERVER_OPTS=&quot;--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \</span><br><span class="line">  --anonymous-auth=false \</span><br><span class="line">  --bind-address=192.168.56.171 \</span><br><span class="line">  --secure-port=6443 \</span><br><span class="line">  --advertise-address=192.168.56.171 \</span><br><span class="line">  --authorization-mode=Node,RBAC \</span><br><span class="line">  --runtime-config=api/all=true \</span><br><span class="line">  --enable-bootstrap-token-auth \</span><br><span class="line">  --service-cluster-ip-range=10.96.0.0/16 \</span><br><span class="line">  --token-auth-file=/data/kubernetes/tokenfile/token.csv \</span><br><span class="line">  --service-node-port-range=30000-50000 \</span><br><span class="line">  --tls-cert-file=/data/kubernetes/ssl/kube-apiserver.pem  \</span><br><span class="line">  --tls-private-key-file=/data/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="line">  --client-ca-file=/data/kubernetes/ssl/ca.pem \</span><br><span class="line">  --kubelet-client-certificate=/data/kubernetes/ssl/kube-apiserver.pem \</span><br><span class="line">  --kubelet-client-key=/data/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="line">  --service-account-key-file=/data/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --service-account-signing-key-file=/data/kubernetes/ssl/ca-key.pem  \</span><br><span class="line">  --service-account-issuer=api \</span><br><span class="line">  --etcd-cafile=/data/etcd/ssl/ca.pem \</span><br><span class="line">  --etcd-certfile=/data/etcd/ssl/etcd.pem \</span><br><span class="line">  --etcd-keyfile=/data/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --etcd-servers=https://192.168.56.171:2379,https://192.168.56.172:2379,https://192.168.56.173:2379 \</span><br><span class="line">  --allow-privileged=true \</span><br><span class="line">  --apiserver-count=3 \</span><br><span class="line">  --audit-log-maxage=30 \</span><br><span class="line">  --audit-log-maxbackup=3 \</span><br><span class="line">  --audit-log-maxsize=100 \</span><br><span class="line">  --audit-log-path=/data/kubernetes/logs/kube-apiserver/kube-apiserver-audit.log \</span><br><span class="line">  --event-ttl=1h \</span><br><span class="line">  --alsologtostderr=true \</span><br><span class="line">  --logtostderr=false \</span><br><span class="line">  --log-dir=/data/kubernetes/logs/kube-apiserver \</span><br><span class="line">  --v=4&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>k8s-master2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /data/kubernetes/conf/kube-apiserver.conf &lt;&lt; &quot;EOF&quot;</span><br><span class="line">KUBE_APISERVER_OPTS=&quot;--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \</span><br><span class="line">  --anonymous-auth=false \</span><br><span class="line">  --bind-address=192.168.56.172 \</span><br><span class="line">  --secure-port=6443 \</span><br><span class="line">  --advertise-address=192.168.56.172 \</span><br><span class="line">  --authorization-mode=Node,RBAC \</span><br><span class="line">  --runtime-config=api/all=true \</span><br><span class="line">  --enable-bootstrap-token-auth \</span><br><span class="line">  --service-cluster-ip-range=10.96.0.0/16 \</span><br><span class="line">  --token-auth-file=/data/kubernetes/tokenfile/token.csv \</span><br><span class="line">  --service-node-port-range=30000-50000 \</span><br><span class="line">  --tls-cert-file=/data/kubernetes/ssl/kube-apiserver.pem  \</span><br><span class="line">  --tls-private-key-file=/data/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="line">  --client-ca-file=/data/kubernetes/ssl/ca.pem \</span><br><span class="line">  --kubelet-client-certificate=/data/kubernetes/ssl/kube-apiserver.pem \</span><br><span class="line">  --kubelet-client-key=/data/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="line">  --service-account-key-file=/data/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --service-account-signing-key-file=/data/kubernetes/ssl/ca-key.pem  \</span><br><span class="line">  --service-account-issuer=api \</span><br><span class="line">  --etcd-cafile=/data/etcd/ssl/ca.pem \</span><br><span class="line">  --etcd-certfile=/data/etcd/ssl/etcd.pem \</span><br><span class="line">  --etcd-keyfile=/data/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --etcd-servers=https://192.168.56.171:2379,https://192.168.56.172:2379,https://192.168.56.173:2379 \</span><br><span class="line">  --allow-privileged=true \</span><br><span class="line">  --apiserver-count=3 \</span><br><span class="line">  --audit-log-maxage=30 \</span><br><span class="line">  --audit-log-maxbackup=3 \</span><br><span class="line">  --audit-log-maxsize=100 \</span><br><span class="line">  --audit-log-path=/data/kubernetes/logs/kube-apiserver/kube-apiserver-audit.log \</span><br><span class="line">  --event-ttl=1h \</span><br><span class="line">  --alsologtostderr=true \</span><br><span class="line">  --logtostderr=false \</span><br><span class="line">  --log-dir=/data/kubernetes/logs/kube-apiserver \</span><br><span class="line">  --v=4&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>k8s-master3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /data/kubernetes/conf/kube-apiserver.conf &lt;&lt; &quot;EOF&quot;</span><br><span class="line">KUBE_APISERVER_OPTS=&quot;--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \</span><br><span class="line">  --anonymous-auth=false \</span><br><span class="line">  --bind-address=192.168.56.173 \</span><br><span class="line">  --secure-port=6443 \</span><br><span class="line">  --advertise-address=192.168.56.173 \</span><br><span class="line">  --authorization-mode=Node,RBAC \</span><br><span class="line">  --runtime-config=api/all=true \</span><br><span class="line">  --enable-bootstrap-token-auth \</span><br><span class="line">  --service-cluster-ip-range=10.96.0.0/16 \</span><br><span class="line">  --token-auth-file=/data/kubernetes/tokenfile/token.csv \</span><br><span class="line">  --service-node-port-range=30000-50000 \</span><br><span class="line">  --tls-cert-file=/data/kubernetes/ssl/kube-apiserver.pem  \</span><br><span class="line">  --tls-private-key-file=/data/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="line">  --client-ca-file=/data/kubernetes/ssl/ca.pem \</span><br><span class="line">  --kubelet-client-certificate=/data/kubernetes/ssl/kube-apiserver.pem \</span><br><span class="line">  --kubelet-client-key=/data/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="line">  --service-account-key-file=/data/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --service-account-signing-key-file=/data/kubernetes/ssl/ca-key.pem  \</span><br><span class="line">  --service-account-issuer=api \</span><br><span class="line">  --etcd-cafile=/data/etcd/ssl/ca.pem \</span><br><span class="line">  --etcd-certfile=/data/etcd/ssl/etcd.pem \</span><br><span class="line">  --etcd-keyfile=/data/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --etcd-servers=https://192.168.56.171:2379,https://192.168.56.172:2379,https://192.168.56.173:2379 \</span><br><span class="line">  --allow-privileged=true \</span><br><span class="line">  --apiserver-count=3 \</span><br><span class="line">  --audit-log-maxage=30 \</span><br><span class="line">  --audit-log-maxbackup=3 \</span><br><span class="line">  --audit-log-maxsize=100 \</span><br><span class="line">  --audit-log-path=/data/kubernetes/logs/kube-apiserver/kube-apiserver-audit.log \</span><br><span class="line">  --event-ttl=1h \</span><br><span class="line">  --alsologtostderr=true \</span><br><span class="line">  --logtostderr=false \</span><br><span class="line">  --log-dir=/data/kubernetes/logs/kube-apiserver \</span><br><span class="line">  --v=4&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p>5、配置 systemd 管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/kube-apiserver.service &lt;&lt; &quot;EOF&quot;</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=etcd.service</span><br><span class="line">Wants=etcd.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/data/kubernetes/conf/kube-apiserver.conf</span><br><span class="line">ExecStart=/usr/bin/kube-apiserver $KUBE_APISERVER_OPTS</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">Type=notify</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>6、根据配置文件中的配置，复制相关文件到指定目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">k8s-master1</span></span><br><span class="line">cd /data/k8s-work/cfssl/</span><br><span class="line">cp ca*.pem kube-apiserver*.pem /data/kubernetes/ssl/</span><br><span class="line">cp token.csv /data/kubernetes/tokenfile/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发至k8s-master2</span></span><br><span class="line">cd /data/k8s-work/cfssl/</span><br><span class="line">scp ca*.pem kube-apiserver*.pem k8s-master2:/data/kubernetes/ssl/</span><br><span class="line">scp token.csv k8s-master2:/data/kubernetes/tokenfile/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发至k8s-master3</span></span><br><span class="line">cd /data/k8s-work/cfssl/</span><br><span class="line">scp ca*.pem kube-apiserver*.pem k8s-master3:/data/kubernetes/ssl/</span><br><span class="line">scp token.csv k8s-master3:/data/kubernetes/tokenfile/</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220829183321945.png" alt="image-20220829183321945"></p><p>7、启动 apiserver</p><blockquote><p>三台 k8s-master 均启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start kube-apiserver.service</span><br><span class="line">systemctl enable kube-apiserver.service</span><br></pre></td></tr></table></figure><p>8、验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl --insecure https://192.168.56.171:6443/</span><br><span class="line">curl --insecure https://192.168.56.172:6443/</span><br><span class="line">curl --insecure https://192.168.56.173:6443/</span><br><span class="line">curl --insecure https://192.168.56.178:6443/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">均为验证，401，通过curl没有通过身份验证，所以是正常</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830100749696.png" alt="image-20220830100749696"></p><h6 id="4-3-2-1-3-kubectl"><a href="#4-3-2-1-3-kubectl" class="headerlink" title="4.3.2.1.3 kubectl"></a>4.3.2.1.3 kubectl</h6><p>严格意义上来讲，kubectl 并不是 k8s-master 的组件，而是一个客户端工具，也就是说没有 kubectl，那我的 K8s 集群也是可以正常运行的。</p><p>1、配置 kubectl 证书请求文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /data/k8s-work/cfssl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kubectl-csr.json &lt;&lt; &quot;EOF&quot;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;admin&quot;,</span><br><span class="line">  &quot;hosts&quot;: [],</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;Beijing&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;system:masters&quot;,             </span><br><span class="line">      &quot;OU&quot;: &quot;system&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个admin 证书，是将来生成管理员用的kubeconfig 配置文件用的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">现在我们一般建议使用RBAC 来对kubernetes 进行角色权限控制</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubernetes 将证书中的CN 字段 作为User， O 字段作为 Group；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;O&quot;</span>: <span class="string">&quot;system:masters&quot;</span>, 必须是system:masters，否则后面kubectl create clusterrolebinding报错。</span></span><br></pre></td></tr></table></figure><p>2、生成 kubectl 证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubectl-csr.json | cfssljson -bare kubectl</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830103602218.png" alt="image-20220830103602218"></p><p>3、复制相关证书到 k8s-master 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">k8s-master1</span></span><br><span class="line">cp kubectl*.pem /data/kubernetes/ssl/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发至k8s-master2</span></span><br><span class="line">scp kubectl*.pem k8s-master2:/data/kubernetes/ssl/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发至k8s-master3</span></span><br><span class="line">scp kubectl*.pem k8s-master3:/data/kubernetes/ssl/</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830103919560.png" alt="image-20220830103919560"></p><p>4、生成 kubeconfig 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /data/k8s-work/cfssl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">192.168.56.178 为VIP，如果没有做master高可用，则为master节点IP</span></span><br><span class="line">kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://192.168.56.178:6443 --kubeconfig=kube.config</span><br><span class="line"></span><br><span class="line">kubectl config set-credentials admin --client-certificate=kubectl.pem --client-key=kubectl-key.pem --embed-certs=true --kubeconfig=kube.config</span><br><span class="line"></span><br><span class="line">kubectl config set-context kubernetes --cluster=kubernetes --user=admin --kubeconfig=kube.config</span><br><span class="line"></span><br><span class="line">kubectl config use-context kubernetes --kubeconfig=kube.config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kube.config为kubectl的配置文件，包含访问apiserver的所有信息，如apiserver地址、CA证书和自身使用的证书等</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830104838097.png" alt="image-20220830104838097"></p><p>5、对 kubeconfig 配置文件进行角色绑定</p><p>也就是说我当前 centos 操作系统的登录用户为 root，那我们一般会将该 kube.config 复制到当前用户家目录下进行管理，以此来管理我整个 K8s 集群。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /data/k8s-work/cfssl</span><br><span class="line">mkdir ~/.kube</span><br><span class="line">cp kube.config ~/.kube/config</span><br><span class="line">kubectl create clusterrolebinding kube-apiserver:kubelet-apis --clusterrole=system:kubelet-api-admin --user kubernetes --kubeconfig=/root/.kube/config</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830105627119.png" alt="image-20220830105627119"></p><p>6、kubectl 命令验证</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查看集群信息</span><br><span class="line">kubectl cluster<span class="literal">-info</span></span><br><span class="line"></span><br><span class="line">查看集群组件状态，可看到警告提示：ComponentStatu在<span class="number">1.19</span>+版本已经被弃用了（我当前为<span class="number">1.24</span>.<span class="number">4</span>）</span><br><span class="line">kubectl get componentstatuses</span><br><span class="line"></span><br><span class="line">查看命名空间中资源对象</span><br><span class="line">kubectl get all <span class="literal">--all-namespaces</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830105928998.png" alt="image-20220830105928998"></p><p>&#x3D;&#x3D;如果你也希望其他 k8s-master 节点也具备管理能力，那你需要复制相关证书文件至其他 k8s-master 节点&#x3D;&#x3D;</p><p>证书在上面已经分发到 k8s-master 的其他节点了，接下来只需要在其他 k8s-master 节点家目录创建相关文件，并将 k8s-master1 上配置好的 config 配置文件分发至其他 k8s-master 节点对应目录下即可。</p><ul><li><p>先在其他 k8s-master 节点创建目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">k8s-master2:</span></span><br><span class="line">mkdir /root/.kube</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">k8s-master3:</span></span><br><span class="line">mkdir /root/.kube</span><br></pre></td></tr></table></figure></li><li><p>在 k8s-master1 分发配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /root/.kube/config k8s-master2:/root/.kube/config</span><br><span class="line">scp /root/.kube/config k8s-master3:/root/.kube/config</span><br></pre></td></tr></table></figure></li></ul><p>&#x3D;&#x3D;这样的话，所有 k8s-master 节点都具备 K8s 集群的管理能力了。&#x3D;&#x3D;</p><p>kubectl 命令补全（所有 k8s-master 节点执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bash-completion</span><br><span class="line">source /usr/share/bash-completion/bash_completion</span><br><span class="line">source &lt;(kubectl completion bash)</span><br><span class="line">kubectl completion bash &gt; ~/.kube/completion.bash.inc</span><br><span class="line">source &#x27;/root/.kube/completion.bash.inc&#x27;  </span><br><span class="line">source $HOME/.bash_profile</span><br></pre></td></tr></table></figure><h6 id="4-3-2-1-4-kube-controller-manager"><a href="#4-3-2-1-4-kube-controller-manager" class="headerlink" title="4.3.2.1.4 kube-controller-manager"></a>4.3.2.1.4 kube-controller-manager</h6><p>1、配置 kube-controller-manager 证书请求文件</p><blockquote><p>因为我们部署的是 k8s-master 的高可用，所以 kube-controller-manager 也是配置的高可用</p><p>同理，也是统一在 k8s-master 节点 cfssl 目录下执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /data/k8s-work/cfssl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-controller-manager-csr.json &lt;&lt; &quot;EOF&quot;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;system:kube-controller-manager&quot;,</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">      &quot;127.0.0.1&quot;,</span><br><span class="line">      &quot;192.168.56.171&quot;,</span><br><span class="line">      &quot;192.168.56.172&quot;,</span><br><span class="line">      &quot;192.168.56.173&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">        &quot;ST&quot;: &quot;Beijing&quot;,</span><br><span class="line">        &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class="line">        &quot;O&quot;: &quot;system:kube-controller-manager&quot;,</span><br><span class="line">        &quot;OU&quot;: &quot;system&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hosts列表包含所有kube-controller-manager节点IP</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CN为system:kube-controller-manager</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">O为system:kube-controller-manager，其为kubernetes内置的ClusterRoleBindings</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">system:kube-controller-manager赋予kube-controller-manager工作所需的权限</span></span><br></pre></td></tr></table></figure><p>2、生成 kube-controller-manager 证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830112802956.png" alt="image-20220830112802956"></p><p>3、生成 kube-controller-manager 的 .kubeconfig 配置文件</p><blockquote><p>与 kubectl 类似，想要进行 k8s 集群控制，就需要进行相关配置。</p><p>同样是在 k8s-master1 的 cfssl 目录下执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://192.168.56.178:6443 --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config set-credentials system:kube-controller-manager --client-certificate=kube-controller-manager.pem --client-key=kube-controller-manager-key.pem --embed-certs=true --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config set-context system:kube-controller-manager --cluster=kubernetes --user=system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config use-context system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830113733447.png" alt="image-20220830113733447"></p><p>4、创建 kube-controller-manager 的 .conf 配置文件</p><blockquote><p>同样是在 k8s-master1 的 cfssl 目录下执行。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-controller-manager.conf &lt;&lt; &quot;EOF&quot;</span><br><span class="line">KUBE_CONTROLLER_MANAGER_OPTS=&quot;--secure-port=10257 \</span><br><span class="line">  --bind-address=127.0.0.1 \</span><br><span class="line">  --kubeconfig=/data/kubernetes/conf/kube-controller-manager.kubeconfig \</span><br><span class="line">  --service-cluster-ip-range=10.96.0.0/16 \</span><br><span class="line">  --cluster-name=kubernetes \</span><br><span class="line">  --cluster-signing-cert-file=/data/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cluster-signing-key-file=/data/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --allocate-node-cidrs=true \</span><br><span class="line">  --cluster-cidr=10.244.0.0/16 \</span><br><span class="line">  --experimental-cluster-signing-duration=87600h \</span><br><span class="line">  --root-ca-file=/data/kubernetes/ssl/ca.pem \</span><br><span class="line">  --service-account-private-key-file=/data/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --leader-elect=true \</span><br><span class="line">  --feature-gates=RotateKubeletServerCertificate=true \</span><br><span class="line">  --controllers=*,bootstrapsigner,tokencleaner \</span><br><span class="line">  --tls-cert-file=/data/kubernetes/ssl/kube-controller-manager.pem \</span><br><span class="line">  --tls-private-key-file=/data/kubernetes/ssl/kube-controller-manager-key.pem \</span><br><span class="line">  --use-service-account-credentials=true \</span><br><span class="line">  --alsologtostderr=true \</span><br><span class="line">  --logtostderr=false \</span><br><span class="line">  --log-dir=/data/kubernetes/logs/kube-controller-manager \</span><br><span class="line">  --v=2&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建kube-controller-manager日志目录（所有k8s-master节点均执行）</span></span><br><span class="line">mkdir /data/kubernetes/logs/kube-controller-manager</span><br></pre></td></tr></table></figure><p>5、复制相关证书文件至配置文件中的指定目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">k8s-master1</span></span><br><span class="line">cd /data/k8s-work/cfssl</span><br><span class="line">cp kube-controller-manager*.pem /data/kubernetes/ssl/</span><br><span class="line">cp kube-controller-manager.kubeconfig /data/kubernetes/conf/</span><br><span class="line">cp kube-controller-manager.conf /data/kubernetes/conf/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发至k8s-master2</span></span><br><span class="line">scp kube-controller-manager*.pem k8s-master2:/data/kubernetes/ssl/</span><br><span class="line">scp kube-controller-manager.kubeconfig k8s-master2:/data/kubernetes/conf/</span><br><span class="line">scp kube-controller-manager.conf k8s-master2:/data/kubernetes/conf/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发至k8s-master3</span></span><br><span class="line">scp kube-controller-manager*.pem k8s-master3:/data/kubernetes/ssl/</span><br><span class="line">scp kube-controller-manager.kubeconfig k8s-master3:/data/kubernetes/conf/</span><br><span class="line">scp kube-controller-manager.conf k8s-master3:/data/kubernetes/conf/</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830115607487.png" alt="image-20220830115607487"></p><p>6、配置 systemd 管理</p><blockquote><p>k8s-master 所有节点均执行，或者在 k8s-master1 上执行完成后再分发至其他 master 节点</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/kube-controller-manager.service &lt;&lt; &quot;EOF&quot;</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/data/kubernetes/conf/kube-controller-manager.conf</span><br><span class="line">ExecStart=/usr/bin/kube-controller-manager $KUBE_CONTROLLER_MANAGER_OPTS</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>7、启动 kube-controller-manager 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start kube-controller-manager.service</span><br><span class="line">systemctl enable kube-controller-manager.service</span><br></pre></td></tr></table></figure><p>8、验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get componentstatuses</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830125423606.png" alt="image-20220830125423606"></p><h6 id="4-3-2-1-5-kube-scheduler"><a href="#4-3-2-1-5-kube-scheduler" class="headerlink" title="4.3.2.1.5 kube-scheduler"></a>4.3.2.1.5 kube-scheduler</h6><p>1、配置 kube-scheduler 证书请求文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /data/k8s-work/cfssl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-scheduler-csr.json &lt;&lt; &quot;EOF&quot;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;system:kube-scheduler&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">      &quot;127.0.0.1&quot;,</span><br><span class="line">      &quot;192.168.56.171&quot;,</span><br><span class="line">      &quot;192.168.56.172&quot;,</span><br><span class="line">      &quot;192.168.56.173&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">        &quot;ST&quot;: &quot;Beijing&quot;,</span><br><span class="line">        &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class="line">        &quot;O&quot;: &quot;system:kube-scheduler&quot;,</span><br><span class="line">        &quot;OU&quot;: &quot;system&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>2、生成 kube-scheduler 证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830130500777.png" alt="image-20220830130500777"></p><p>3、生成 kube-scheduler 的 .kubeconfig 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://192.168.56.178:6443 --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config set-credentials system:kube-scheduler --client-certificate=kube-scheduler.pem --client-key=kube-scheduler-key.pem --embed-certs=true --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config set-context system:kube-scheduler --cluster=kubernetes --user=system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config use-context system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830130910387.png" alt="image-20220830130910387"></p><p>4、创建 kube-scheduler 的 .conf 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /data/k8s-work/cfssl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-scheduler.conf &lt;&lt; &quot;EOF&quot;</span><br><span class="line">KUBE_SCHEDULER_OPTS=&quot;--kubeconfig=/data/kubernetes/conf/kube-scheduler.kubeconfig \</span><br><span class="line">--leader-elect=true \</span><br><span class="line">--alsologtostderr=true \</span><br><span class="line">--logtostderr=false \</span><br><span class="line">--log-dir=/data/kubernetes/logs/kube-scheduler \</span><br><span class="line">--v=2&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建kube-scheduler日志目录（所有k8s-master节点均执行）</span></span><br><span class="line">mkdir /data/kubernetes/logs/kube-scheduler</span><br></pre></td></tr></table></figure><p>5、复制相关证书文件至配置文件中的指定目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">k8s-master1</span></span><br><span class="line">cd /data/k8s-work/cfssl</span><br><span class="line">cp kube-scheduler*.pem /data/kubernetes/ssl/</span><br><span class="line">cp kube-scheduler.kubeconfig /data/kubernetes/conf/</span><br><span class="line">cp kube-scheduler.conf /data/kubernetes/conf/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发至k8s-master2</span></span><br><span class="line">scp kube-scheduler*.pem k8s-master2:/data/kubernetes/ssl/</span><br><span class="line">scp kube-scheduler.kubeconfig k8s-master2:/data/kubernetes/conf/</span><br><span class="line">scp kube-scheduler.conf k8s-master2:/data/kubernetes/conf/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发至k8s-master3</span></span><br><span class="line">scp kube-scheduler*.pem k8s-master3:/data/kubernetes/ssl/</span><br><span class="line">scp kube-scheduler.kubeconfig k8s-master3:/data/kubernetes/conf/</span><br><span class="line">scp kube-scheduler.conf k8s-master3:/data/kubernetes/conf/</span><br></pre></td></tr></table></figure><p>6、配置 systemd 管理</p><blockquote><p>k8s-master 所有节点均执行，或者在 k8s-master1 上执行完成后再分发至其他 master 节点</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/kube-scheduler.service &lt;&lt; &quot;EOF&quot;</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/data/kubernetes/conf/kube-scheduler.conf</span><br><span class="line">ExecStart=/usr/bin/kube-scheduler $KUBE_SCHEDULER_OPTS</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>7、启动 kube-controller-manager 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start kube-scheduler.service</span><br><span class="line">systemctl enable kube-scheduler.service</span><br></pre></td></tr></table></figure><p>8、验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get componentstatuses</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830133247786.png" alt="image-20220830133247786"></p><p>&#x3D;&#x3D;至此，k8s-master 节点的所有组件已经部署完成，并已成功在运行。接下来就是部署 k8s-work 节点组件了。&#x3D;&#x3D;</p><h5 id="4-3-2-2-Work-节点"><a href="#4-3-2-2-Work-节点" class="headerlink" title="4.3.2.2 Work 节点"></a>4.3.2.2 Work 节点</h5><blockquote><p>k8s-master 必须的组件：kubelet、kube-proxy</p><p>k8s 在 1.20+ 开始，不再唯一支持 docker，而且也支持 Containerd，而 1.24+ 版本开始，完全移除 dockershim（不代表不可用，而是以其他方式进行使用 docker），对于 work 节点来说，容器化引擎是必须的。</p></blockquote><h6 id="4-3-2-2-1-部署说明"><a href="#4-3-2-2-1-部署说明" class="headerlink" title="4.3.2.2.1 部署说明"></a>4.3.2.2.1 部署说明</h6><blockquote><p>看看官方的解释</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830135059526.png" alt="image-20220830135059526"></p><p>&#x3D;&#x3D;本次我将采用 Docker 的方式部署&#x3D;&#x3D;</p><h6 id="4-3-2-2-2-组件分发"><a href="#4-3-2-2-2-组件分发" class="headerlink" title="4.3.2.2.2 组件分发"></a>4.3.2.2.2 组件分发</h6><blockquote><p>在上面，我们下载了 kubernetes 的二进制包，里面包含了 master 节点和 work 节点的所有组件，因此在 k8s-master 节点上分发到 work 节点上即可。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /data/k8s-work/k8s/kubernetes/server/bin</span><br><span class="line">scp kubelet kube-proxy k8s-work1:/usr/bin/</span><br><span class="line">scp kubelet kube-proxy k8s-work2:/usr/bin/</span><br></pre></td></tr></table></figure><h6 id="4-3-2-2-3-docker"><a href="#4-3-2-2-3-docker" class="headerlink" title="4.3.2.2.3 docker"></a>4.3.2.2.3 docker</h6><p>1、安装 docker 引擎</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh docker_install.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要安装脚本的私信</span></span><br></pre></td></tr></table></figure><p>2、修改 cgroup</p><blockquote><p>k8s 和 docker 的 cgroup 必须保持一致，这里官方推荐为 systemd。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://q1rw9tzz.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-3-2-2-4-cri-dockerd"><a href="#4-3-2-2-4-cri-dockerd" class="headerlink" title="4.3.2.2.4 cri-dockerd"></a>4.3.2.2.4 cri-dockerd</h6><blockquote><p>想要使用 docker 作为 k8s 的编排对象，那需要安装 cri-docker 来作为 dockershim。</p><p>cri-docker 源码安装地址：<a href="https://github.com/Mirantis/cri-dockerd">https://github.com/Mirantis/cri-dockerd</a></p></blockquote><p>1、安装 Go 环境</p><blockquote><p>k8s-work 节点执行</p></blockquote><p>因为 cri-dockerd 由 go 编写，所以 k8s-work 主机需具备 go 环境。go 二进制包下载地址：<a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830144911203.png" alt="image-20220830144911203"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">k8s-work1</span></span><br><span class="line">tar xzf go1.18.5.linux-amd64.tar.gz -C /opt/</span><br><span class="line">ln -s /opt/go/bin/* /usr/bin/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">k8s-work2</span></span><br><span class="line">tar xzf go1.18.5.linux-amd64.tar.gz -C /opt/</span><br><span class="line">ln -s /opt/go/bin/* /usr/bin/</span><br></pre></td></tr></table></figure><p>2、clone 源码项目并编译</p><blockquote><p>安装官方文档来部署即可</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830151256425.png" alt="image-20220830151256425"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GO环境我们已经有了</span></span><br><span class="line">git clone https://github.com/Mirantis/cri-dockerd.git</span><br><span class="line">cd cri-dockerd</span><br><span class="line">mkdir bin</span><br><span class="line">go build -o bin/cri-dockerd</span><br><span class="line">mkdir -p /usr/local/bin</span><br><span class="line">install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd</span><br><span class="line">cp -a packaging/systemd/* /etc/systemd/system</span><br><span class="line">sed -i -e &#x27;s,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,&#x27; /etc/systemd/system/cri-docker.service</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable cri-docker.service</span><br><span class="line">systemctl enable --now cri-docker.socket</span><br></pre></td></tr></table></figure><blockquote><p>最后看看是否启动成功（下图，成功启动并正在监听）</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830152319042.png" alt="image-20220830152319042"></p><p>3、修改 cri-docker 的 systemd 文件</p><ul><li><p>修改前</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=CRI Interface for Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.mirantis.com</span><br><span class="line">After=network-online.target firewalld.service docker.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Requires=cri-docker.socket</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/usr/local/bin/cri-dockerd --container-runtime-endpoint fd://</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">TimeoutSec=0</span><br><span class="line">RestartSec=2</span><br><span class="line">Restart=always</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note that StartLimit* options were moved from <span class="string">&quot;Service&quot;</span> to <span class="string">&quot;Unit&quot;</span> <span class="keyword">in</span> systemd 229.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Both the old, and new location are accepted by systemd 229 and up, so using the old location</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to make them work <span class="keyword">for</span> either version of systemd.</span></span><br><span class="line">StartLimitBurst=3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note that StartLimitInterval was renamed to StartLimitIntervalSec <span class="keyword">in</span> systemd 230.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Both the old, and new name are accepted by systemd 230 and up, so using the old name to make</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">this option work <span class="keyword">for</span> either version of systemd.</span></span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">in</span> the kernel. We recommend using cgroups to <span class="keyword">do</span> container-local accounting.</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Comment TasksMax <span class="keyword">if</span> your systemd version does not support it.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Only systemd 226 and above support this option.</span></span><br><span class="line">TasksMax=infinity</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>修改后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=CRI Interface for Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.mirantis.com</span><br><span class="line">After=network-online.target firewalld.service docker.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Requires=cri-docker.socket</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/usr/local/bin/cri-dockerd --container-runtime-endpoint fd:// --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.7</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">TimeoutSec=0</span><br><span class="line">RestartSec=2</span><br><span class="line">Restart=always</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note that StartLimit* options were moved from <span class="string">&quot;Service&quot;</span> to <span class="string">&quot;Unit&quot;</span> <span class="keyword">in</span> systemd 229.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Both the old, and new location are accepted by systemd 229 and up, so using the old location</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to make them work <span class="keyword">for</span> either version of systemd.</span></span><br><span class="line">StartLimitBurst=3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note that StartLimitInterval was renamed to StartLimitIntervalSec <span class="keyword">in</span> systemd 230.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Both the old, and new name are accepted by systemd 230 and up, so using the old name to make</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">this option work <span class="keyword">for</span> either version of systemd.</span></span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">in</span> the kernel. We recommend using cgroups to <span class="keyword">do</span> container-local accounting.</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Comment TasksMax <span class="keyword">if</span> your systemd version does not support it.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Only systemd 226 and above support this option.</span></span><br><span class="line">TasksMax=infinity</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li></ul><h6 id="4-3-2-2-5-kubelet"><a href="#4-3-2-2-5-kubelet" class="headerlink" title="4.3.2.2.5 kubelet"></a>4.3.2.2.5 kubelet</h6><blockquote><p>同样在 k8s-master1 上执行</p></blockquote><p>1、创建 kubelet 的 .kubeconfig 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /data/k8s-work/cfssl/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BOOTSTRAP_TOKEN=$(awk -F &quot;,&quot; &#x27;&#123;print $1&#125;&#x27; /data/kubernetes/tokenfile/token.csv)</span><br><span class="line"></span><br><span class="line">kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://192.168.56.178:6443 --kubeconfig=kubelet-bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config set-credentials kubelet-bootstrap --token=$&#123;BOOTSTRAP_TOKEN&#125; --kubeconfig=kubelet-bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config set-context default --cluster=kubernetes --user=kubelet-bootstrap --kubeconfig=kubelet-bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config use-context default --kubeconfig=kubelet-bootstrap.kubeconfig</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830155243172.png" alt="image-20220830155243172"></p><blockquote><p>指定角色</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrolebinding cluster-system-anonymous --clusterrole=cluster-admin --user=kubelet-bootstrap</span><br><span class="line"></span><br><span class="line">kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap --kubeconfig=kubelet-bootstrap.kubeconfig</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830155351265.png" alt="image-20220830155351265"></p><blockquote><p>基础验证</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe clusterrolebinding cluster-system-anonymous</span><br><span class="line">kubectl describe clusterrolebinding kubelet-bootstrap</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830155445682.png" alt="image-20220830155445682"></p><p>4、创建 kubelet 的 .conf 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kubelet.json &lt;&lt; &quot;EOF&quot;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;KubeletConfiguration&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;kubelet.config.k8s.io/v1beta1&quot;,</span><br><span class="line">  &quot;authentication&quot;: &#123;</span><br><span class="line">    &quot;x509&quot;: &#123;</span><br><span class="line">      &quot;clientCAFile&quot;: &quot;/data/kubernetes/ssl/ca.pem&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;webhook&quot;: &#123;</span><br><span class="line">      &quot;enabled&quot;: true,</span><br><span class="line">      &quot;cacheTTL&quot;: &quot;2m0s&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;anonymous&quot;: &#123;</span><br><span class="line">      &quot;enabled&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;authorization&quot;: &#123;</span><br><span class="line">    &quot;mode&quot;: &quot;Webhook&quot;,</span><br><span class="line">    &quot;webhook&quot;: &#123;</span><br><span class="line">      &quot;cacheAuthorizedTTL&quot;: &quot;5m0s&quot;,</span><br><span class="line">      &quot;cacheUnauthorizedTTL&quot;: &quot;30s&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;address&quot;: &quot;192.168.56.174&quot;,</span><br><span class="line">  &quot;port&quot;: 10250,</span><br><span class="line">  &quot;readOnlyPort&quot;: 10255,</span><br><span class="line">  &quot;cgroupDriver&quot;: &quot;systemd&quot;,                    </span><br><span class="line">  &quot;hairpinMode&quot;: &quot;promiscuous-bridge&quot;,</span><br><span class="line">  &quot;serializeImagePulls&quot;: false,</span><br><span class="line">  &quot;clusterDomain&quot;: &quot;cluster.local.&quot;,</span><br><span class="line">  &quot;clusterDNS&quot;: [&quot;10.96.0.2&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">address：work节点对应的IP（分发至其他work节点后记得修改IP地址）</span></span><br></pre></td></tr></table></figure><p>5、复制相关证书文件至配置文件中的指定 work 节点目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先在k8s-work节点创建相关目录</span></span><br><span class="line">mkdir -p /data/kubernetes/&#123;conf,ssl,logs/kubelet&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发至k8s-work1</span></span><br><span class="line">scp kubelet-bootstrap.kubeconfig kubelet.json k8s-work1:/data/kubernetes/conf/</span><br><span class="line">scp ca.pem k8s-work1:/data/kubernetes/ssl/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发至k8s-work2</span></span><br><span class="line">scp kubelet-bootstrap.kubeconfig kubelet.json k8s-work2:/data/kubernetes/conf/</span><br><span class="line">scp ca.pem k8s-work2:/data/kubernetes/ssl/</span><br></pre></td></tr></table></figure><p>6、配置 systemd 管理</p><blockquote><p>k8s-work 所有节点均执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; &quot;EOF&quot;</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/kubelet \</span><br><span class="line">  --bootstrap-kubeconfig=/data/kubernetes/conf/kubelet-bootstrap.kubeconfig \</span><br><span class="line">  --cert-dir=/data/kubernetes/ssl \</span><br><span class="line">  --kubeconfig=/data/kubernetes/conf/kubelet.kubeconfig \</span><br><span class="line">  --config=/data/kubernetes/conf/kubelet.json \</span><br><span class="line">  --container-runtime=remote \</span><br><span class="line">  --container-runtime-endpoint=unix:///var/run/cri-dockerd.sock \</span><br><span class="line">  --rotate-certificates \</span><br><span class="line">  --alsologtostderr=true \</span><br><span class="line">  --logtostderr=false \</span><br><span class="line">  --log-dir=/data/kubernetes/logs/kubelet \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>7、启动 kubelet 组件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start kubelet.service</span><br><span class="line">systemctl enable kubelet.service</span><br></pre></td></tr></table></figure><p>8、验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：我的master节点并没有进工作负载</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830180454193.png" alt="image-20220830180454193"></p><h6 id="4-3-2-2-6-kube-proxy"><a href="#4-3-2-2-6-kube-proxy" class="headerlink" title="4.3.2.2.6 kube-proxy"></a>4.3.2.2.6 kube-proxy</h6><p>1、配置 kube-proxy 证书请求文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /data/k8s-work/cfssl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-proxy-csr.json &lt;&lt; &quot;EOF&quot;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;system:kube-proxy&quot;,</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;Beijing&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;xgxy&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;ops&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>2、生成 kube-proxy 证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830181238980.png" alt="image-20220830181238980"></p><p>3、生成 kube-proxy 的 .kubeconfig 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://192.168.56.178:6443 --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config set-credentials kube-proxy --client-certificate=kube-proxy.pem --client-key=kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config set-context default --cluster=kubernetes --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220830181512383.png" alt="image-20220830181512383"></p><p>4、创建 kube-proxy 的 .yaml 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /data/k8s-work/cfssl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-proxy.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">bindAddress: 192.168.56.174</span><br><span class="line">clientConnection:</span><br><span class="line">  kubeconfig: /data/kubernetes/conf/kube-proxy.kubeconfig</span><br><span class="line">clusterCIDR: 10.244.0.0/16</span><br><span class="line">healthzBindAddress: 192.168.56.174:10256</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">metricsBindAddress: 192.168.56.174:10249</span><br><span class="line">mode: &quot;ipvs&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>5、复制相关证书文件至配置文件中的指定目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发至k8s-work1</span></span><br><span class="line">scp kube-proxy*.pem k8s-work1:/data/kubernetes/ssl/</span><br><span class="line">scp kube-proxy.kubeconfig kube-proxy.yaml k8s-work1:/data/kubernetes/conf/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发至k8s-work2</span></span><br><span class="line">scp kube-proxy*.pem k8s-work2:/data/kubernetes/ssl/</span><br><span class="line">scp kube-proxy.kubeconfig kube-proxy.yaml k8s-work2:/data/kubernetes/conf/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发后记得修改IP</span></span><br></pre></td></tr></table></figure><p>6、配置 systemd 管理</p><blockquote><p>k8s-work 所有节点均执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/kube-proxy.service &lt;&lt; &quot;EOF&quot;</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kube-Proxy Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/kube-proxy \</span><br><span class="line">  --config=/data/kubernetes/conf/kube-proxy.yaml \</span><br><span class="line">  --alsologtostderr=true \</span><br><span class="line">  --logtostderr=false \</span><br><span class="line">  --log-dir=/data/kubernetes/logs/kube-proxy \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建kube-proxy日志目录（所有k8s-work节点均执行）</span></span><br><span class="line">mkdir /data/kubernetes/logs/kube-proxy</span><br></pre></td></tr></table></figure><p>7、启动 kube-proxy 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start kube-proxy.service</span><br><span class="line">systemctl enable kube-proxy.service</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;至此，k8s-work 节点的所有组件已经部署完成，并已成功在运行。接下来就是部署 k8s 网络组件了。&#x3D;&#x3D;</p><h3 id="4-4-网络组件部署（Calico）"><a href="#4-4-网络组件部署（Calico）" class="headerlink" title="4.4 网络组件部署（Calico）"></a>4.4 网络组件部署（Calico）</h3><blockquote><p>对于高可用集群架构来说，在任意一台 master 节点上执行即可，因为Calico会以容器的方式部署于 work 节点上</p></blockquote><p>Calico是一个纯三层的数据中心网络方案，是目前Kubernetes主流的网络方案。在 3.4 小节的网络规划中，说到了 pod 的网络规划，那 Calico 就是用来分配该网络（IP）的。</p><h4 id="4-4-1-下载-yaml-文件"><a href="#4-4-1-下载-yaml-文件" class="headerlink" title="4.4.1 下载 yaml 文件"></a>4.4.1 下载 yaml 文件</h4><blockquote><p>yaml 文件下载地址：<a href="https://docs.projectcalico.org/">https://docs.projectcalico.org/</a></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831095736333.png" alt="image-20220831095736333"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同样在k8s-master1执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先创建一个工作目录，用于存放yaml文件</span></span><br><span class="line">mkdir /data/k8s-work/calico &amp;&amp; cd /data/k8s-work/calico</span><br><span class="line">curl https://projectcalico.docs.tigera.io/archive/v3.23/manifests/calico-etcd.yaml -o calico.yaml</span><br></pre></td></tr></table></figure><h4 id="4-4-2-修改文件配置"><a href="#4-4-2-修改文件配置" class="headerlink" title="4.4.2 修改文件配置"></a>4.4.2 修改文件配置</h4><blockquote><p>在 391 行处，修改配置 value 值为上面定义的 10.244.0.0&#x2F;16</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831100505327.png" alt="image-20220831100505327"></p><blockquote><p>修改后</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831100747852.png" alt="image-20220831100747852"></p><h4 id="4-4-3-应用配置文件"><a href="#4-4-3-应用配置文件" class="headerlink" title="4.4.3 应用配置文件"></a>4.4.3 应用配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure><h4 id="4-4-4-验证-Calico-网络"><a href="#4-4-4-验证-Calico-网络" class="headerlink" title="4.4.4  验证 Calico 网络"></a>4.4.4  验证 Calico 网络</h4><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831101123441.png" alt="image-20220831101123441"></p><blockquote><p>包括之前未就绪的 work 节点，现在已经就绪了（Ready）</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831101215397.png" alt="image-20220831101215397"></p><p>&#x3D;&#x3D;如果以上 calico 版本的不能成功运行，建议降低版本，使用以下版本&#x3D;&#x3D;</p><p><a href="https://docs.projectcalico.org/v3.19/manifests/calico.yaml">https://docs.projectcalico.org/v3.19/manifests/calico.yaml</a></p><h3 id="4-5-CoreDNS-部署"><a href="#4-5-CoreDNS-部署" class="headerlink" title="4.5 CoreDNS 部署"></a>4.5 CoreDNS 部署</h3><blockquote><p>对于高可用集群架构来说，在任意一台 master 节点上执行即可，因为 CoreDNS 会以容器的方式部署于 work 节点上</p></blockquote><h4 id="4-5-1-下载-yaml-文件"><a href="#4-5-1-下载-yaml-文件" class="headerlink" title="4.5.1 下载 yaml 文件"></a>4.5.1 下载 yaml 文件</h4><blockquote><p>参考：<a href="https://github.com/coredns/deployment/blob/master/kubernetes/coredns.yaml.sed">https://github.com/coredns/deployment/blob/master/kubernetes/coredns.yaml.sed</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    kubernetes.io/bootstrapping: rbac-defaults</span><br><span class="line">  name: system:coredns</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">    - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">    - endpoints</span><br><span class="line">    - services</span><br><span class="line">    - pods</span><br><span class="line">    - namespaces</span><br><span class="line">    verbs:</span><br><span class="line">    - list</span><br><span class="line">    - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">    - discovery.k8s.io</span><br><span class="line">    resources:</span><br><span class="line">    - endpointslices</span><br><span class="line">    verbs:</span><br><span class="line">    - list</span><br><span class="line">    - watch</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    rbac.authorization.kubernetes.io/autoupdate: &quot;true&quot;</span><br><span class="line">  labels:</span><br><span class="line">    kubernetes.io/bootstrapping: rbac-defaults</span><br><span class="line">  name: system:coredns</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:coredns</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  Corefile: |</span><br><span class="line">    .:53 &#123;</span><br><span class="line">        errors</span><br><span class="line">        health &#123;</span><br><span class="line">          lameduck 5s</span><br><span class="line">        &#125;</span><br><span class="line">        ready</span><br><span class="line">        kubernetes CLUSTER_DOMAIN REVERSE_CIDRS &#123;</span><br><span class="line">          fallthrough in-addr.arpa ip6.arpa</span><br><span class="line">        &#125;</span><br><span class="line">        prometheus :9153</span><br><span class="line">        forward . UPSTREAMNAMESERVER &#123;</span><br><span class="line">          max_concurrent 1000</span><br><span class="line">        &#125;</span><br><span class="line">        cache 30</span><br><span class="line">        loop</span><br><span class="line">        reload</span><br><span class="line">        loadbalance</span><br><span class="line">    &#125;STUBDOMAINS</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">    kubernetes.io/name: &quot;CoreDNS&quot;</span><br><span class="line">spec:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">replicas: not specified here:</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">1. Default is 1.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">2. Will be tuned <span class="keyword">in</span> real time <span class="keyword">if</span> DNS horizontal auto-scaling is turned on.</span></span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kube-dns</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kube-dns</span><br><span class="line">    spec:</span><br><span class="line">      priorityClassName: system-cluster-critical</span><br><span class="line">      serviceAccountName: coredns</span><br><span class="line">      tolerations:</span><br><span class="line">        - key: &quot;CriticalAddonsOnly&quot;</span><br><span class="line">          operator: &quot;Exists&quot;</span><br><span class="line">      nodeSelector:</span><br><span class="line">        kubernetes.io/os: linux</span><br><span class="line">      affinity:</span><br><span class="line">         podAntiAffinity:</span><br><span class="line">           requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">           - labelSelector:</span><br><span class="line">               matchExpressions:</span><br><span class="line">               - key: k8s-app</span><br><span class="line">                 operator: In</span><br><span class="line">                 values: [&quot;kube-dns&quot;]</span><br><span class="line">             topologyKey: kubernetes.io/hostname</span><br><span class="line">      containers:</span><br><span class="line">      - name: coredns</span><br><span class="line">        image: coredns/coredns:1.9.3</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            memory: 170Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 70Mi</span><br><span class="line">        args: [ &quot;-conf&quot;, &quot;/etc/coredns/Corefile&quot; ]</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: config-volume</span><br><span class="line">          mountPath: /etc/coredns</span><br><span class="line">          readOnly: true</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 53</span><br><span class="line">          name: dns</span><br><span class="line">          protocol: UDP</span><br><span class="line">        - containerPort: 53</span><br><span class="line">          name: dns-tcp</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 9153</span><br><span class="line">          name: metrics</span><br><span class="line">          protocol: TCP</span><br><span class="line">        securityContext:</span><br><span class="line">          allowPrivilegeEscalation: false</span><br><span class="line">          capabilities:</span><br><span class="line">            add:</span><br><span class="line">            - NET_BIND_SERVICE</span><br><span class="line">            drop:</span><br><span class="line">            - all</span><br><span class="line">          readOnlyRootFilesystem: true</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /health</span><br><span class="line">            port: 8080</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          failureThreshold: 5</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /ready</span><br><span class="line">            port: 8181</span><br><span class="line">            scheme: HTTP</span><br><span class="line">      dnsPolicy: Default</span><br><span class="line">      volumes:</span><br><span class="line">        - name: config-volume</span><br><span class="line">          configMap:</span><br><span class="line">            name: coredns</span><br><span class="line">            items:</span><br><span class="line">            - key: Corefile</span><br><span class="line">              path: Corefile</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/port: &quot;9153&quot;</span><br><span class="line">    prometheus.io/scrape: &quot;true&quot;</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">    kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class="line">    kubernetes.io/name: &quot;CoreDNS&quot;</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">  clusterIP: CLUSTER_DNS_IP</span><br><span class="line">  ports:</span><br><span class="line">  - name: dns</span><br><span class="line">    port: 53</span><br><span class="line">    protocol: UDP</span><br><span class="line">  - name: dns-tcp</span><br><span class="line">    port: 53</span><br><span class="line">    protocol: TCP</span><br><span class="line">  - name: metrics</span><br><span class="line">    port: 9153</span><br><span class="line">    protocol: TCP</span><br></pre></td></tr></table></figure><h4 id="4-5-2-修改文件配置"><a href="#4-5-2-修改文件配置" class="headerlink" title="4.5.2 修改文件配置"></a>4.5.2 修改文件配置</h4><blockquote><p>修改部分：</p><p>forward . UPSTREAMNAMESERVER ——&gt; forward . &#x2F;etc&#x2F;resolv.conf</p><p>clusterIP: CLUSTER_DNS_IP ——&gt; clusterIP: 10.96.0.2</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;  coredns.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    kubernetes.io/bootstrapping: rbac-defaults</span><br><span class="line">  name: system:coredns</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">    - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">    - endpoints</span><br><span class="line">    - services</span><br><span class="line">    - pods</span><br><span class="line">    - namespaces</span><br><span class="line">    verbs:</span><br><span class="line">    - list</span><br><span class="line">    - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">    - discovery.k8s.io</span><br><span class="line">    resources:</span><br><span class="line">    - endpointslices</span><br><span class="line">    verbs:</span><br><span class="line">    - list</span><br><span class="line">    - watch</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    rbac.authorization.kubernetes.io/autoupdate: &quot;true&quot;</span><br><span class="line">  labels:</span><br><span class="line">    kubernetes.io/bootstrapping: rbac-defaults</span><br><span class="line">  name: system:coredns</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:coredns</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  Corefile: |</span><br><span class="line">    .:53 &#123;</span><br><span class="line">        errors</span><br><span class="line">        health &#123;</span><br><span class="line">          lameduck 5s</span><br><span class="line">        &#125;</span><br><span class="line">        ready</span><br><span class="line">        kubernetes cluster.local  in-addr.arpa ip6.arpa &#123;</span><br><span class="line">          fallthrough in-addr.arpa ip6.arpa</span><br><span class="line">        &#125;</span><br><span class="line">        prometheus :9153</span><br><span class="line">        forward . /etc/resolv.conf &#123;</span><br><span class="line">          max_concurrent 1000</span><br><span class="line">        &#125;</span><br><span class="line">        cache 30</span><br><span class="line">        loop</span><br><span class="line">        reload</span><br><span class="line">        loadbalance</span><br><span class="line">    &#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">    kubernetes.io/name: &quot;CoreDNS&quot;</span><br><span class="line">spec:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">replicas: not specified here:</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">1. Default is 1.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">2. Will be tuned <span class="keyword">in</span> real time <span class="keyword">if</span> DNS horizontal auto-scaling is turned on.</span></span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kube-dns</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kube-dns</span><br><span class="line">    spec:</span><br><span class="line">      priorityClassName: system-cluster-critical</span><br><span class="line">      serviceAccountName: coredns</span><br><span class="line">      tolerations:</span><br><span class="line">        - key: &quot;CriticalAddonsOnly&quot;</span><br><span class="line">          operator: &quot;Exists&quot;</span><br><span class="line">      nodeSelector:</span><br><span class="line">        kubernetes.io/os: linux</span><br><span class="line">      affinity:</span><br><span class="line">         podAntiAffinity:</span><br><span class="line">           preferredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">           - weight: 100</span><br><span class="line">             podAffinityTerm:</span><br><span class="line">               labelSelector:</span><br><span class="line">                 matchExpressions:</span><br><span class="line">                   - key: k8s-app</span><br><span class="line">                     operator: In</span><br><span class="line">                     values: [&quot;kube-dns&quot;]</span><br><span class="line">               topologyKey: kubernetes.io/hostname</span><br><span class="line">      containers:</span><br><span class="line">      - name: coredns</span><br><span class="line">        image: coredns/coredns:1.9.3</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            memory: 170Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 70Mi</span><br><span class="line">        args: [ &quot;-conf&quot;, &quot;/etc/coredns/Corefile&quot; ]</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: config-volume</span><br><span class="line">          mountPath: /etc/coredns</span><br><span class="line">          readOnly: true</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 53</span><br><span class="line">          name: dns</span><br><span class="line">          protocol: UDP</span><br><span class="line">        - containerPort: 53</span><br><span class="line">          name: dns-tcp</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 9153</span><br><span class="line">          name: metrics</span><br><span class="line">          protocol: TCP</span><br><span class="line">        securityContext:</span><br><span class="line">          allowPrivilegeEscalation: false</span><br><span class="line">          capabilities:</span><br><span class="line">            add:</span><br><span class="line">            - NET_BIND_SERVICE</span><br><span class="line">            drop:</span><br><span class="line">            - all</span><br><span class="line">          readOnlyRootFilesystem: true</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /health</span><br><span class="line">            port: 8080</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          failureThreshold: 5</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /ready</span><br><span class="line">            port: 8181</span><br><span class="line">            scheme: HTTP</span><br><span class="line">      dnsPolicy: Default</span><br><span class="line">      volumes:</span><br><span class="line">        - name: config-volume</span><br><span class="line">          configMap:</span><br><span class="line">            name: coredns</span><br><span class="line">            items:</span><br><span class="line">            - key: Corefile</span><br><span class="line">              path: Corefile</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/port: &quot;9153&quot;</span><br><span class="line">    prometheus.io/scrape: &quot;true&quot;</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">    kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class="line">    kubernetes.io/name: &quot;CoreDNS&quot;</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">  clusterIP: 10.96.0.2</span><br><span class="line">  ports:</span><br><span class="line">  - name: dns</span><br><span class="line">    port: 53</span><br><span class="line">    protocol: UDP</span><br><span class="line">  - name: dns-tcp</span><br><span class="line">    port: 53</span><br><span class="line">    protocol: TCP</span><br><span class="line">  - name: metrics</span><br><span class="line">    port: 9153</span><br><span class="line">    protocol: TCP</span><br><span class="line"> </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="4-5-3-应用配置文件"><a href="#4-5-3-应用配置文件" class="headerlink" title="4.5.3 应用配置文件"></a>4.5.3 应用配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure><h4 id="4-5-4-验证-CoreDNS"><a href="#4-5-4-验证-CoreDNS" class="headerlink" title="4.5.4 验证 CoreDNS"></a>4.5.4 验证 CoreDNS</h4><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831112825416.png" alt="image-20220831112825416"></p><p>看看是否能正常解析：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master2 ~]# kubectl run -it --rm dns-test --image=busybox:1.28.4 sh</span><br><span class="line">If you don&#x27;t see a command prompt, try pressing enter.</span><br><span class="line">/ # nslookup kubernetes </span><br><span class="line">Server:    10.96.0.2</span><br><span class="line">Address 1: 10.96.0.2 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      kubernetes</span><br><span class="line">Address 1: 10.96.0.1 kubernetes.default.svc.cluster.local</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831132451319.png" alt="image-20220831132451319"></p><p>&#x3D;&#x3D;如果以上 coredns yaml 配置文件中的镜像版本的不能成功运行，建议降低版本，使用以下版本&#x3D;&#x3D;</p><p>image: coredns&#x2F;coredns:1.8.4</p><h2 id="五、验证"><a href="#五、验证" class="headerlink" title="五、验证"></a>五、验证</h2><h3 id="5-1-部署-Nginx"><a href="#5-1-部署-Nginx" class="headerlink" title="5.1 部署 Nginx"></a>5.1 部署 Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;  /data/k8s-work/server/nginx.yaml  &lt;&lt; &quot;EOF&quot;</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-web</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    name: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx</span><br><span class="line">          image: nginx:1.19.6</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service-nodeport</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">      nodePort: 30001</span><br><span class="line">      protocol: TCP</span><br><span class="line">  type: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    name: nginx</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="5-2-Host-访问验证"><a href="#5-2-Host-访问验证" class="headerlink" title="5.2 Host 访问验证"></a>5.2 Host 访问验证</h3><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831131507658.png" alt="image-20220831131507658"></p><p>&#x3D;&#x3D;至此，K8s 高可用集群架构部署完毕！！&#x3D;&#x3D;</p><h2 id="六、FAQ"><a href="#六、FAQ" class="headerlink" title="六、FAQ"></a>六、FAQ</h2><h3 id="6-1-ETCD-启动报错"><a href="#6-1-ETCD-启动报错" class="headerlink" title="6.1 ETCD 启动报错"></a>6.1 ETCD 启动报错</h3><h4 id="6-1-1-报错类型"><a href="#6-1-1-报错类型" class="headerlink" title="6.1.1 报错类型"></a>6.1.1 报错类型</h4><p>当我配置完 ETCD 的 systemd 管理后，启动包如下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conflicting environment variable is shadowed by corresponding command-line flag</span><br></pre></td></tr></table></figure><p>大概意思就是 ETCD 的环境变量冲突问题，查阅了一番资料，再 ETCD3.4+ 版本中已经可以自动读取配置文件。</p><p>原始的 systemd 管理文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF | tee /usr/lib/systemd/system/etcd.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/data/etcd/conf/etcd.conf</span><br><span class="line">ExecStart=/usr/bin/etcd \</span><br><span class="line">  --name=\$&#123;ETCD_NAME&#125; \</span><br><span class="line">  --data-dir=\$&#123;ETCD_DATA_DIR&#125; \</span><br><span class="line">  --listen-peer-urls=\$&#123;ETCD_LISTEN_PEER_URLS&#125; \</span><br><span class="line">  --listen-client-urls=\$&#123;ETCD_LISTEN_CLIENT_URLS&#125; \</span><br><span class="line">  --advertise-client-urls=\$&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \</span><br><span class="line">  --initial-advertise-peer-urls=\$&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \</span><br><span class="line">  --initial-cluster=\$&#123;ETCD_INITIAL_CLUSTER&#125; \</span><br><span class="line">  --initial-cluster-token=\$&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125; \</span><br><span class="line">  --initial-cluster-state=\$&#123;ETCD_INITIAL_CLUSTER_STATE&#125;  \</span><br><span class="line">  --cert-file=\$&#123;ETCD_CERT_FILE&#125; \</span><br><span class="line">  --key-file=\$&#123;ETCD_KEY_FILE&#125; \</span><br><span class="line">  --peer-cert-file=\$&#123;ETCD_PEER_CERT_FILE&#125; \</span><br><span class="line">  --peer-key-file=\$&#123;ETCD_PEER_KEY_FILE&#125; \</span><br><span class="line">  --trusted-ca-file=\$&#123;ETCD_TRUSTED_CA_FILE&#125; \</span><br><span class="line">  --client-cert-auth=\$&#123;ETCD_CLIENT_CERT_AUTH&#125; \</span><br><span class="line">  --peer-client-cert-auth=\$&#123;ETCD_PEER_CLIENT_CERT_AUTH&#125; \</span><br><span class="line">  --peer-trusted-ca-file=\$&#123;ETCD_PEER_TRUSTED_CA_FILE&#125;</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="6-2-1-解决方案"><a href="#6-2-1-解决方案" class="headerlink" title="6.2.1 解决方案"></a>6.2.1 解决方案</h4><ul><li><p>方案一：去掉 systemd 管理文件中的 <code>EnvironmentFile</code> 参数，<code>ExecStart</code> 部分就可以使用 <code>--xxx=xxx</code> 参数了</p></li><li><p>方案二：去掉 <code>ExecStart</code> 部分后的 <code>--xxx=xxx</code> 参数，因为该 ETCD 版本会自动读取。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF | tee /usr/lib/systemd/system/etcd.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=-/data/etcd/conf/etcd.conf</span><br><span class="line">ExecStart=/usr/bin/etcd</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-2-apiserver-启动报错"><a href="#6-2-apiserver-启动报错" class="headerlink" title="6.2 apiserver 启动报错"></a>6.2 apiserver 启动报错</h3><h4 id="6-2-1-报错类型"><a href="#6-2-1-报错类型" class="headerlink" title="6.2.1 报错类型"></a>6.2.1 报错类型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kube-apiserver[1706]: Error: unknown flag: --insecure-port</span><br><span class="line">kube-apiserver[2196]: Error: unknown flag: --enable-swagger-ui</span><br></pre></td></tr></table></figure><p>大致意思就是 kube-apiserver 不知道这些变量，看了一下官方文档，在 1.24+ 版本中已经遗弃了 –insecure-port、–enable-swagger-ui 这两个参数了。</p><h4 id="6-2-2-解决方案"><a href="#6-2-2-解决方案" class="headerlink" title="6.2.2 解决方案"></a>6.2.2 解决方案</h4><blockquote><p>修改 .conf 配置文件</p></blockquote><p>修改前：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /data/kubernetes/conf/kube-apiserver.conf &lt;&lt; &quot;EOF&quot;</span><br><span class="line">KUBE_APISERVER_OPTS=&quot;--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \</span><br><span class="line">  --anonymous-auth=false \</span><br><span class="line">  --bind-address=192.168.56.171 \</span><br><span class="line">  --secure-port=6443 \</span><br><span class="line">  --advertise-address=192.168.56.171 \</span><br><span class="line">  --insecure-port=8080 \</span><br><span class="line">  --authorization-mode=Node,RBAC \</span><br><span class="line">  --runtime-config=api/all=true \</span><br><span class="line">  --enable-bootstrap-token-auth \</span><br><span class="line">  --service-cluster-ip-range=10.96.0.0/16 \</span><br><span class="line">  --token-auth-file=/data/kubernetes/tokenfile/token.csv \</span><br><span class="line">  --service-node-port-range=30000-50000 \</span><br><span class="line">  --tls-cert-file=/data/kubernetes/ssl/kube-apiserver.pem  \</span><br><span class="line">  --tls-private-key-file=/data/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="line">  --client-ca-file=/data/kubernetes/ssl/ca.pem \</span><br><span class="line">  --kubelet-client-certificate=/data/kubernetes/ssl/kube-apiserver.pem \</span><br><span class="line">  --kubelet-client-key=/data/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="line">  --service-account-key-file=/data/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --service-account-signing-key-file=/data/kubernetes/ssl/ca-key.pem  \</span><br><span class="line">  --service-account-issuer=api \</span><br><span class="line">  --etcd-cafile=/data/etcd/ssl/ca.pem \</span><br><span class="line">  --etcd-certfile=/data/etcd/ssl/etcd.pem \</span><br><span class="line">  --etcd-keyfile=/data/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --etcd-servers=https://192.168.56.171:2379,https://192.168.56.172:2379,https://192.168.56.173:2379 \</span><br><span class="line">  --enable-swagger-ui=true \</span><br><span class="line">  --allow-privileged=true \</span><br><span class="line">  --apiserver-count=3 \</span><br><span class="line">  --audit-log-maxage=30 \</span><br><span class="line">  --audit-log-maxbackup=3 \</span><br><span class="line">  --audit-log-maxsize=100 \</span><br><span class="line">  --audit-log-path=/data/kubernetes/logs/kube-apiserver/kube-apiserver-audit.log \</span><br><span class="line">  --event-ttl=1h \</span><br><span class="line">  --alsologtostderr=true \</span><br><span class="line">  --logtostderr=false \</span><br><span class="line">  --log-dir=/data/kubernetes/logs/kube-apiserver \</span><br><span class="line">  --v=4&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>修改后：去掉 –insecure-port、–enable-swagger-ui 选项参数即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /data/kubernetes/conf/kube-apiserver.conf &lt;&lt; &quot;EOF&quot;</span><br><span class="line">KUBE_APISERVER_OPTS=&quot;--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \</span><br><span class="line">  --anonymous-auth=false \</span><br><span class="line">  --bind-address=192.168.56.171 \</span><br><span class="line">  --secure-port=6443 \</span><br><span class="line">  --advertise-address=192.168.56.171 \</span><br><span class="line">  --authorization-mode=Node,RBAC \</span><br><span class="line">  --runtime-config=api/all=true \</span><br><span class="line">  --enable-bootstrap-token-auth \</span><br><span class="line">  --service-cluster-ip-range=10.96.0.0/16 \</span><br><span class="line">  --token-auth-file=/data/kubernetes/tokenfile/token.csv \</span><br><span class="line">  --service-node-port-range=30000-50000 \</span><br><span class="line">  --tls-cert-file=/data/kubernetes/ssl/kube-apiserver.pem  \</span><br><span class="line">  --tls-private-key-file=/data/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="line">  --client-ca-file=/data/kubernetes/ssl/ca.pem \</span><br><span class="line">  --kubelet-client-certificate=/data/kubernetes/ssl/kube-apiserver.pem \</span><br><span class="line">  --kubelet-client-key=/data/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="line">  --service-account-key-file=/data/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --service-account-signing-key-file=/data/kubernetes/ssl/ca-key.pem  \</span><br><span class="line">  --service-account-issuer=api \</span><br><span class="line">  --etcd-cafile=/data/etcd/ssl/ca.pem \</span><br><span class="line">  --etcd-certfile=/data/etcd/ssl/etcd.pem \</span><br><span class="line">  --etcd-keyfile=/data/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --etcd-servers=https://192.168.56.171:2379,https://192.168.56.172:2379,https://192.168.56.173:2379 \</span><br><span class="line">  --allow-privileged=true \</span><br><span class="line">  --apiserver-count=3 \</span><br><span class="line">  --audit-log-maxage=30 \</span><br><span class="line">  --audit-log-maxbackup=3 \</span><br><span class="line">  --audit-log-maxsize=100 \</span><br><span class="line">  --audit-log-path=/data/kubernetes/logs/kube-apiserver/kube-apiserver-audit.log \</span><br><span class="line">  --event-ttl=1h \</span><br><span class="line">  --alsologtostderr=true \</span><br><span class="line">  --logtostderr=false \</span><br><span class="line">  --log-dir=/data/kubernetes/logs/kube-apiserver \</span><br><span class="line">  --v=4&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="6-3-controller-manager-启动报错"><a href="#6-3-controller-manager-启动报错" class="headerlink" title="6.3 controller-manager 启动报错"></a>6.3 controller-manager 启动报错</h3><blockquote><p>与 apiserver 启动报错类似，在该 k8s 版本中，有些选项参数已经被遗弃了，根据提示去掉即可。</p></blockquote><h4 id="6-3-1-报错类型"><a href="#6-3-1-报错类型" class="headerlink" title="6.3.1 报错类型"></a>6.3.1 报错类型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kube-controller-manager[3505]: Error: unknown flag: --port</span><br><span class="line">kube-controller-manager[4159]: Error: unknown flag: --horizontal-pod-autoscaler-use-rest-clients</span><br></pre></td></tr></table></figure><h4 id="6-3-2-解决方案"><a href="#6-3-2-解决方案" class="headerlink" title="6.3.2 解决方案"></a>6.3.2 解决方案</h4><blockquote><p>修改 .conf 配置文件</p></blockquote><p>修改前：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /data/kubernetes/conf/kube-controller-manager.conf &lt;&lt; &quot;EOF&quot;</span><br><span class="line">KUBE_CONTROLLER_MANAGER_OPTS=&quot;--port=10252 \</span><br><span class="line">  --secure-port=10257 \</span><br><span class="line">  --bind-address=127.0.0.1 \</span><br><span class="line">  --kubeconfig=/data/kubernetes/conf/kube-controller-manager.kubeconfig \</span><br><span class="line">  --service-cluster-ip-range=10.96.0.0/16 \</span><br><span class="line">  --cluster-name=kubernetes \</span><br><span class="line">  --cluster-signing-cert-file=/data/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cluster-signing-key-file=/data/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --allocate-node-cidrs=true \</span><br><span class="line">  --cluster-cidr=10.244.0.0/16 \</span><br><span class="line">  --experimental-cluster-signing-duration=87600h \</span><br><span class="line">  --root-ca-file=/data/kubernetes/ssl/ca.pem \</span><br><span class="line">  --service-account-private-key-file=/data/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --leader-elect=true \</span><br><span class="line">  --feature-gates=RotateKubeletServerCertificate=true \</span><br><span class="line">  --controllers=*,bootstrapsigner,tokencleaner \</span><br><span class="line">  --horizontal-pod-autoscaler-use-rest-clients=true \</span><br><span class="line">  --horizontal-pod-autoscaler-sync-period=10s \</span><br><span class="line">  --tls-cert-file=/data/kubernetes/ssl/kube-controller-manager.pem \</span><br><span class="line">  --tls-private-key-file=/data/kubernetes/ssl/kube-controller-manager-key.pem \</span><br><span class="line">  --use-service-account-credentials=true \</span><br><span class="line">  --alsologtostderr=true \</span><br><span class="line">  --logtostderr=false \</span><br><span class="line">  --log-dir=/data/kubernetes/logs/kube-controller-manager \</span><br><span class="line">  --v=2&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /data/kubernetes/conf/kube-controller-manager.conf &lt;&lt; &quot;EOF&quot;</span><br><span class="line">KUBE_CONTROLLER_MANAGER_OPTS=&quot;--secure-port=10257 \</span><br><span class="line">  --bind-address=127.0.0.1 \</span><br><span class="line">  --kubeconfig=/data/kubernetes/conf/kube-controller-manager.kubeconfig \</span><br><span class="line">  --service-cluster-ip-range=10.96.0.0/16 \</span><br><span class="line">  --cluster-name=kubernetes \</span><br><span class="line">  --cluster-signing-cert-file=/data/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cluster-signing-key-file=/data/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --allocate-node-cidrs=true \</span><br><span class="line">  --cluster-cidr=10.244.0.0/16 \</span><br><span class="line">  --experimental-cluster-signing-duration=87600h \</span><br><span class="line">  --root-ca-file=/data/kubernetes/ssl/ca.pem \</span><br><span class="line">  --service-account-private-key-file=/data/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --leader-elect=true \</span><br><span class="line">  --feature-gates=RotateKubeletServerCertificate=true \</span><br><span class="line">  --controllers=*,bootstrapsigner,tokencleaner \</span><br><span class="line">  --tls-cert-file=/data/kubernetes/ssl/kube-controller-manager.pem \</span><br><span class="line">  --tls-private-key-file=/data/kubernetes/ssl/kube-controller-manager-key.pem \</span><br><span class="line">  --use-service-account-credentials=true \</span><br><span class="line">  --alsologtostderr=true \</span><br><span class="line">  --logtostderr=false \</span><br><span class="line">  --log-dir=/data/kubernetes/logs/kube-controller-manager \</span><br><span class="line">  --v=2&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="6-4-scheduler-启动报错"><a href="#6-4-scheduler-启动报错" class="headerlink" title="6.4 scheduler 启动报错"></a>6.4 scheduler 启动报错</h3><h4 id="6-4-1-报错类型"><a href="#6-4-1-报错类型" class="headerlink" title="6.4.1 报错类型"></a>6.4.1 报错类型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kube-scheduler[5036]: Error: unknown flag: --address</span><br></pre></td></tr></table></figure><h4 id="6-4-2-解决方案"><a href="#6-4-2-解决方案" class="headerlink" title="6.4.2 解决方案"></a>6.4.2 解决方案</h4><p>修改前：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /data/kubernetes/conf/kube-scheduler.conf &lt;&lt; &quot;EOF&quot;</span><br><span class="line">KUBE_SCHEDULER_OPTS=&quot;--address=127.0.0.1 \</span><br><span class="line">--kubeconfig=/data/kubernetes/conf/kube-scheduler.kubeconfig \</span><br><span class="line">--leader-elect=true \</span><br><span class="line">--alsologtostderr=true \</span><br><span class="line">--logtostderr=false \</span><br><span class="line">--log-dir=/data/kubernetes/logs/kube-scheduler \</span><br><span class="line">--v=2&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /data/kubernetes/conf/kube-scheduler.conf &lt;&lt; &quot;EOF&quot;</span><br><span class="line">KUBE_SCHEDULER_OPTS=&quot;--kubeconfig=/data/kubernetes/conf/kube-scheduler.kubeconfig \</span><br><span class="line">--leader-elect=true \</span><br><span class="line">--alsologtostderr=true \</span><br><span class="line">--logtostderr=false \</span><br><span class="line">--log-dir=/data/kubernetes/logs/kube-scheduler \</span><br><span class="line">--v=2&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="6-5-kubelet-启动报错"><a href="#6-5-kubelet-启动报错" class="headerlink" title="6.5 kubelet 启动报错"></a>6.5 kubelet 启动报错</h3><h4 id="6-5-1-报错类型"><a href="#6-5-1-报错类型" class="headerlink" title="6.5.1 报错类型"></a>6.5.1 报错类型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubelet[5036]: Error: unknown flag: --network-plugin</span><br></pre></td></tr></table></figure><h4 id="6-5-2-解决方案"><a href="#6-5-2-解决方案" class="headerlink" title="6.5.2 解决方案"></a>6.5.2 解决方案</h4><p>修改前：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; &quot;EOF&quot;</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/kubelet \</span><br><span class="line">  --bootstrap-kubeconfig=/data/kubernetes/conf/kubelet-bootstrap.kubeconfig \</span><br><span class="line">  --cert-dir=/data/kubernetes/ssl \</span><br><span class="line">  --kubeconfig=/data/kubernetes/conf/kubelet.kubeconfig \</span><br><span class="line">  --config=/data/kubernetes/conf/kubelet.json \</span><br><span class="line">  --container-runtime=remote \</span><br><span class="line">  --container-runtime-endpoint=unix:///var/run/cri-dockerd.sock \</span><br><span class="line">  --network-plugin=cni \</span><br><span class="line">  --rotate-certificates \</span><br><span class="line">  --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.2 \</span><br><span class="line">  --alsologtostderr=true \</span><br><span class="line">  --logtostderr=false \</span><br><span class="line">  --log-dir=/data/kubernetes/logs/kubelet \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>修改后：去掉 <code>--network-plugin</code> 和 <code>--pod-infra-container-image</code> 因为，cri-docker 的 systemd 文件已经指定了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; &quot;EOF&quot;</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/kubelet \</span><br><span class="line">  --bootstrap-kubeconfig=/data/kubernetes/conf/kubelet-bootstrap.kubeconfig \</span><br><span class="line">  --cert-dir=/data/kubernetes/ssl \</span><br><span class="line">  --kubeconfig=/data/kubernetes/conf/kubelet.kubeconfig \</span><br><span class="line">  --config=/data/kubernetes/conf/kubelet.json \</span><br><span class="line">  --container-runtime=remote \</span><br><span class="line">  --container-runtime-endpoint=unix:///var/run/cri-dockerd.sock \</span><br><span class="line">  --rotate-certificates \</span><br><span class="line">  --alsologtostderr=true \</span><br><span class="line">  --logtostderr=false \</span><br><span class="line">  --log-dir=/data/kubernetes/logs/kubelet \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> K8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
            <tag> 云原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改 Docker 默认数据存储路径</title>
      <link href="/posts/articles/f3a0a47c.html"/>
      <url>/posts/articles/f3a0a47c.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/docker.png" alt="docker"></p><p><font color=Brown><strong>Author</strong>：rab</font><br><font color=Brown><strong>Date</strong>：2022&#x2F;07&#x2F;22</font><br><font color=Brown><strong>Blog</strong>：<a href="https://blog.csdn.net/IT_ZRS?type=blog"><font color=Brown>https://blog.csdn.net/IT_ZRS?type&#x3D;blog</font></a></font></p><p><strong>Linux Version</strong>：CentOS 7.9<br><strong>Docker Version</strong>：18.06.3</p><hr><p>会存在这样一种情况，当我们安装 Docker 的时候，如果不修改默认数据存储路径的话，其一般默认为 <code>/var/lib/docker/</code> ，该目录是挂载于我们服务器系统盘（&#x2F;）下的，当你后面运行的容器和下载的镜像越来越多时，就会导致磁盘空间被占满，从而无法登录操作系统。此时，就需要调整 Docker 的数据存储目录了。</p><hr><p><strong>1、yum 安装 Docker</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这里以 yum 方式安装的 Docker 来举例</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实不管那种方式部署的Docker，其实原理都一样，掌握一种即可。</span></span><br></pre></td></tr></table></figure><p><strong>2、查看默认路径</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info |grep &#x27;Docker Root Dir&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722113558578.png" alt="image-20220722113558578"></p><p><strong>3、创建数据存储目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/data/docker</span><br></pre></td></tr></table></figure><p><strong>4、修改配置文件（默认路径）</strong></p><blockquote><p>常用三种方法修改默认数据存储路径的方法（三选一即可）</p></blockquote><ul><li><p>修改配置 <code>daemon.json</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止所有正在运行的容器</span></span><br><span class="line">docker stop $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止docker服务</span></span><br><span class="line">systemctl stop docker.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://q1rw9tzz.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;graph&quot;: &quot;/home/data/docker&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动docker服务</span></span><br><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure><p>⚠：重启后，你会发现&#x3D;&#x3D;所有容器和镜像&#x3D;&#x3D;都消失了，那是因为你的 Docker 的数据目录改变了，而旧数据还在原来的 <code>/var/lib/docker/</code> 下，所以此时你是看不到有任何容器和镜像的。</p><p>解决方法就是：将默认数据<code>/var/lib/docker/</code>替换新数据<code>/home/data/docker</code>后，再次重启即可。&#x3D;&#x3D;所以在部署 Docker 的时候就应该先规划好相关路径。&#x3D;&#x3D;</p></li><li><p>修改 <code>systemd</code> 管理脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">ExecStart=/usr/bin/dockerd --graph /home/data/docker</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure></li><li><p>软链接方式（推荐）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker默认数据存储路径容量大小</span></span><br><span class="line">[root@jenkins-node1 data]# cd /var/lib/docker</span><br><span class="line">[root@jenkins-node1 docker]# du -sh</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722121218262.png" alt="image-20220722121218262"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mv</span>移动到新的数据目录，并做软链接</span></span><br><span class="line">[root@jenkins-node1 data]# ln -s /home/data/docker /var/lib/docker</span><br><span class="line">[root@jenkins-node1 data]# ll /var/lib/docker</span><br><span class="line">lrwxrwxrwx 1 root root 17 Jul 22 12:15 /var/lib/docker -&gt; /home/data/docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启一下Docker</span></span><br><span class="line">systemctl start docker.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：不要直接将空目录/home/data/docker软链接到docker默认的数据目录上，因为这样会导致数据目标链接的数据被清空，所以先<span class="built_in">mv</span>一下在做软链接（除非你确认你的目标数据可以被覆盖）</span></span><br></pre></td></tr></table></figure></li></ul><p>&#x3D;&#x3D;至此，Docker 默认数据目录修改完成！！&#x3D;&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Linux 的 Docker Swarm 集群部署及应用</title>
      <link href="/posts/articles/3717b6ec.html"/>
      <url>/posts/articles/3717b6ec.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/docker-docs.webp" alt="docker-docs"></p><p><font color="Brown"><strong>Author</strong>：rab</font> </p><p><font color="Brown"><strong>Date</strong>：2022&#x2F;08&#x2F;01</font> </p><p><font color="Brown"><strong>Blog</strong>：<a href="https://blog.csdn.net/IT_ZRS?type=blog"><font color="Brown">https://blog.csdn.net/IT_ZRS?type&#x3D;blog</font></a></font></p><hr><h2 id="一、规划"><a href="#一、规划" class="headerlink" title="一、规划"></a>一、规划</h2><h3 id="1-1-主机规划"><a href="#1-1-主机规划" class="headerlink" title="1.1 主机规划"></a>1.1 主机规划</h3><table><thead><tr><th>OS</th><th>Service</th><th>角色</th></tr></thead><tbody><tr><td>192.168.56.161（2C&#x2F;2G）</td><td>Docker</td><td>Docker_Swarm_Manager（Work）</td></tr><tr><td>192.168.56.162（2C&#x2F;2G）</td><td>Docker</td><td>Docker_Swarm_Work1</td></tr><tr><td>192.168.56.163（2C&#x2F;2G）</td><td>Docker</td><td>Docker_Swarm_Work2</td></tr></tbody></table><p>⚠注意：如果你是正式环境下进行部署，Manager 必须大于等于 3 台且为奇数（因为在 Manager 挂掉后要进行新 Manager 选举）。该文档的内容结合官方来进行简单测试使用，生成环境中最低服务器数量为（3主+3从）。</p><h3 id="1-2-版本规划"><a href="#1-2-版本规划" class="headerlink" title="1.2 版本规划"></a>1.2 版本规划</h3><ul><li><strong>Linux</strong>：CentOS 7.9</li><li><strong>Docker</strong>：18.06.3</li></ul><p>&#x3D;&#x3D;更加具体资料请参考官方文档&#x3D;&#x3D;（<a href="https://docs.docker.com/">官方参考文档</a>）</p><h2 id="二、部署"><a href="#二、部署" class="headerlink" title="二、部署"></a>二、部署</h2><h3 id="2-1-Docker-服务部署"><a href="#2-1-Docker-服务部署" class="headerlink" title="2.1 Docker 服务部署"></a>2.1 Docker 服务部署</h3><p>直接执行我下面给的安装脚本即可，安装路径你可以安装完成后再自行更改，我这是一个快速自动化安装脚本，不存再路径优化项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">！/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">@Default version：18.06.3</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">@Auth：rab</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">@Date：2021/12/11</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">@适用版本：CentOS 7/8</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否安装</span></span><br><span class="line">rpm -qa | grep docker &amp;&gt; /dev/null</span><br><span class="line">if [ $? -eq 0 ];then</span><br><span class="line">v=`rpm -qa |grep docker |awk -F &#x27;-&#x27; &#x27;&#123;print $3&#125;&#x27;`</span><br><span class="line">echo &quot;docker-ce已经安装，版本为：$v&quot;</span><br><span class="line">read -p &quot;是否卸载原docker版本并安装其他版本？[y/n] &quot; r</span><br><span class="line">    if [ $r = &quot;y&quot; ];then</span><br><span class="line">        yum remove -y `rpm -qa | grep docker` &amp;&gt; /dev/null</span><br><span class="line">        rpm -qa | grep docker &amp;&gt; /dev/null</span><br><span class="line">        if [ $? -ne 0 ]; then</span><br><span class="line">    echo &quot;原docker卸载成功！！&quot;</span><br><span class="line">    else</span><br><span class="line">    echo &quot;原docker卸载失败！！&quot;</span><br><span class="line">    exit 1</span><br><span class="line">    fi</span><br><span class="line">    # step 1: 安装必要的一些系统工具</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 &amp;&gt; /dev/null</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 2: 添加软件源信息</span></span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo &amp;&gt; /dev/null</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 3</span></span><br><span class="line">sed -i &#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 4: 更新并安装Docker-CE</span></span><br><span class="line">       echo &quot;正在建立docker-ce缓存&quot;</span><br><span class="line">yum makecache       </span><br><span class="line">    zz=`yum list docker-ce.x86_64 --showduplicates | sort -r |grep docker-ce.x86_64 |awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">    for rr in $zz</span><br><span class="line">        do</span><br><span class="line">            echo &quot;可选安装版本：$rr&quot;</span><br><span class="line">        done</span><br><span class="line">        read -p &quot;选择要安装的docker版本[如18.06.3.ce-3.el7]: &quot; o</span><br><span class="line">        echo &quot;&quot;</span><br><span class="line">        echo &quot;正在安装 docker-ce-$o，请耐心等待.....&quot;                         </span><br><span class="line">        yum -y install docker-ce-$o</span><br><span class="line">        if [ $? -eq 0 ]; then</span><br><span class="line">            echo &quot;docker-ce-$&#123;o&#125;安装成功！！&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;docker-ce-$&#123;o&#125;安装失败！！&quot;</span><br><span class="line">            exit 2</span><br><span class="line">        fi</span><br><span class="line">        # 启动docker</span><br><span class="line">        systemctl enable docker.service</span><br><span class="line">        systemctl start docker.service</span><br><span class="line">        if [ $? -eq 0 ]; then</span><br><span class="line">            echo &quot;docker-ce-$&#123;o&#125;启动成功！！&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;docker-ce-$&#123;o&#125;启动失败！！&quot;</span><br><span class="line">            exit 2</span><br><span class="line">        fi</span><br><span class="line">        # 配置加速器</span><br><span class="line">        touch /etc/docker/daemon.json</span><br><span class="line">        tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://q1rw9tzz.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">            echo &quot;docker-ce-$&#123;o&#125;阿里加速器配置成功！！&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;docker-ce-$&#123;o&#125;阿里加速器配置失败！！&quot;</span><br><span class="line">            exit 2</span><br><span class="line">        fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">            echo &quot;docker-ce-$&#123;o&#125;重启成功！！&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;docker-ce-$&#123;o&#125;重启失败！！&quot;</span><br><span class="line">            exit 2</span><br><span class="line">        fi</span><br><span class="line">else</span><br><span class="line">    echo &quot;继续使用原版本，退出执行脚本！！&quot; &amp;&amp; exit 1</span><br><span class="line">fi</span><br><span class="line">else</span><br><span class="line">echo &quot;docker未安装，将继续执行安装脚本！！&quot;</span><br><span class="line">        echo &quot;正在搜索可安装的 Docker 版本，请耐心等待.....&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">step 1: 安装必要的一些系统工具</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 &amp;&gt; /dev/null</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 2: 添加软件源信息</span></span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo &amp;&gt; /dev/null</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 3</span></span><br><span class="line">sed -i &#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Step 4: 更新并安装Docker-CE</span></span><br><span class="line">   echo &quot;正在建立docker-ce缓存&quot;</span><br><span class="line">yum makecache</span><br><span class="line">zz=`yum list docker-ce.x86_64 --showduplicates | sort -r |grep docker-ce.x86_64 |awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">for rr in $zz</span><br><span class="line">    do</span><br><span class="line">        echo &quot;可选安装版本：$rr&quot;</span><br><span class="line">    done</span><br><span class="line">    read -p &quot;选择要安装的docker版本[如18.06.3.ce-3.el7]: &quot; o</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    echo &quot;正在安装 docker-ce-$o，请耐心等待.....&quot;</span><br><span class="line"></span><br><span class="line">    yum -y install docker-ce-$o &amp;&gt; /dev/null</span><br><span class="line">    if [ $? -eq 0 ]; then</span><br><span class="line">        echo &quot;docker-ce-$&#123;o&#125;安装成功！！&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;docker-ce-$&#123;o&#125;安装失败！！&quot;</span><br><span class="line">        exit 2</span><br><span class="line">    fi</span><br><span class="line">    # 启动docker</span><br><span class="line">    systemctl enable docker.service</span><br><span class="line">    systemctl start docker.service</span><br><span class="line">    if [ $? -eq 0 ]; then</span><br><span class="line">echo &quot;docker-ce-$&#123;o&#125;启动成功！！&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;docker-ce-$&#123;o&#125;启动失败！！&quot;</span><br><span class="line">exit 2</span><br><span class="line">fi</span><br><span class="line">    # 配置加速器</span><br><span class="line">    touch /etc/docker/daemon.json</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://q1rw9tzz.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">echo &quot;docker-ce-$&#123;o&#125;阿里加速器配置成功！！&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;docker-ce-$&#123;o&#125;阿里加速器配置失败！！&quot;</span><br><span class="line">exit 2</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">echo &quot;docker-ce-$&#123;o&#125;重启成功！！&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;docker-ce-$&#123;o&#125;重启失败！！&quot;</span><br><span class="line">        exit 2</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如脚本名为docker_install.sh</span></span><br><span class="line">sudo chmod +x docker_install.sh</span><br><span class="line">./docker_install.sh</span><br></pre></td></tr></table></figure><blockquote><p>执行结果如下图所示。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801113214240.png" alt="image-20220801113214240"></p><h3 id="2-2-Docker-Swarm-集群部署"><a href="#2-2-Docker-Swarm-集群部署" class="headerlink" title="2.2 Docker Swarm 集群部署"></a>2.2 Docker Swarm 集群部署</h3><p>其实 Docker Swarm 集群很简单，一条命令即可完成。</p><p>1、初始化 Linux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改主机名</span></span><br><span class="line">hostnamectl set-hostname Docker_Swarm_Manager</span><br><span class="line">hostnamectl set-hostname Docker_Swarm_Work1</span><br><span class="line">hostnamectl set-hostname Docker_Swarm_Work2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">互作本地解析（三台均执行）</span></span><br><span class="line">192.168.56.161 Docker_Swarm_Manager</span><br><span class="line">192.168.56.162 Docker_Swarm_Work1</span><br><span class="line">192.168.56.163 Docker_Swarm_Work2</span><br></pre></td></tr></table></figure><p>2、初始化 Manager</p><blockquote><p>在其中一台 Manager 节点执行（其他 Manager 节点按命令并入即可）</p><p>Manager 节点也可作为 work 节点使用。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化swarm集群，创建主管理节点</span></span><br><span class="line">docker swarm init \</span><br><span class="line">--advertise-addr 192.168.56.161:2377 \</span><br><span class="line">--listen-addr 192.168.56.161:2377</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line">--advertise-addr：其他节点并入集群的入口地址</span><br><span class="line">--listen-addr：该参数是默认的，如果不添加也是默认IP:2377，它的作用主要是安全问题（如你只希望您的 swarm 管理界面只能在管理网络上访问）</span><br></pre></td></tr></table></figure><blockquote><p>如果已经执行过该命令了，但是又忘记了相关Token信息，可以重新执行；</p><p>注意，该命令在管理节点执行后，则 Docker Swarm 集群将会被解散。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先删除之前生成的相关信息</span></span><br><span class="line">docker swarm leave --force</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次初始化新的Manager节点</span></span><br><span class="line">docker swarm init \</span><br><span class="line">--advertise-addr 192.168.56.161:2377 \</span><br><span class="line">--listen-addr 192.168.56.161:2377</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801120658124.png" alt="image-20220801120658124"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801120754165.png" alt="image-20220801120754165"></p><p>3、节点如何并入集群</p><ul><li><p>Manager 节点并入集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先在已有的Manager管理节点上生成其他Manager节点并入集群的IP+Token信息</span></span><br><span class="line">docker swarm join-token manager</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801120840144.png" alt="image-20220801120840144"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果我有其他想要成为manager的docker节点</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先在已有的manager节点上生成相关接入信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行生成的命令即可加入集群并成为manager角色</span></span><br><span class="line">docker swarm join --token SWMTKN-1-17fmka1c0l9e6hr66i5ksrl6wreworhx2gwte0644yaij5agvh-4z5yn1vvlvjzghhg1k36bg81k 192.168.56.161:2377</span><br></pre></td></tr></table></figure></li><li><p>Work 节点并入集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先在已有的Manager管理节点上生成其他Manager节点并入集群的IP+Token信息</span></span><br><span class="line">docker swarm join-token worker</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801121406755.png" alt="image-20220801121406755"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果我有其他想要加入Docker-Swarm集群的work节点</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先在已有的manager节点上生成相关接入信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行生成的命令即可加入集群并成为work角色</span></span><br><span class="line">docker swarm join --token SWMTKN-1-17fmka1c0l9e6hr66i5ksrl6wreworhx2gwte0644yaij5agvh-cbfo8i5ubyp4j80y9sqzam9tj 192.168.56.161:2377</span><br></pre></td></tr></table></figure></li></ul><p>&#x3D;&#x3D;以上两种角色的 Token 信息都生成完毕后，就可以将对应的服务器加入集群了&#x3D;&#x3D;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">work1</span></span><br><span class="line">docker swarm join --token SWMTKN-1-17fmka1c0l9e6hr66i5ksrl6wreworhx2gwte0644yaij5agvh-cbfo8i5ubyp4j80y9sqzam9tj 192.168.56.161:2377</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">work2</span></span><br><span class="line">docker swarm join --token SWMTKN-1-17fmka1c0l9e6hr66i5ksrl6wreworhx2gwte0644yaij5agvh-cbfo8i5ubyp4j80y9sqzam9tj 192.168.56.161:2377</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801121743804.png" alt="image-20220801121743804"></p><p>4、查看 Docker Swarm 集群状态</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801121931133.png" alt="image-20220801121931133"></p><p>5、集群可用性验证</p><blockquote><p>官方案例：Docker Swarm 集群上部署服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署应用</span></span><br><span class="line">docker service create --replicas 1 --name helloworld alpine ping docker.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看部署情况</span></span><br><span class="line">docker service ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name helloworld：指定服务名为helloworld</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">alpine：为指定的镜像名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ping docker.com：启动服务后执行的命令</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801122924054.png" alt="image-20220801122924054"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801123016151.png" alt="image-20220801123016151"></p><p>&#x3D;&#x3D;至此 Docker Swarm 集群部署完毕！&#x3D;&#x3D;</p><h2 id="三、集群基本用法"><a href="#三、集群基本用法" class="headerlink" title="三、集群基本用法"></a>三、集群基本用法</h2><blockquote><p>根据上面的官方案例来演示。</p><p>除非特别说明，否则所有操作均在管理节点执行（操作）。</p><p>更多命令请参考<a href="https://docs.docker.com/engine/reference/commandline/node/">官方文档</a></p></blockquote><h3 id="3-1-运行服务"><a href="#3-1-运行服务" class="headerlink" title="3.1 运行服务"></a>3.1 运行服务</h3><p>1、创建服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署应用</span></span><br><span class="line">docker service create \</span><br><span class="line">  --replicas 1 \</span><br><span class="line">  --name helloworld \</span><br><span class="line">  --update-parallelism 2 \</span><br><span class="line">  alpine \</span><br><span class="line">  ping docker.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看部署情况</span></span><br><span class="line">docker service ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--replicas 1：指定运行的服务数（也就是你要启动几个容器）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name helloworld：指定服务名为helloworld</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--update-parallelism：同时更新的服务数（默认为1--也就是其策略是一个服务一个服务的更新的）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">alpine：为指定的镜像名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ping docker.com：启动服务后执行的命令</span></span><br></pre></td></tr></table></figure><blockquote><p>通过私有容器镜像仓库进行部署</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker login registry.example.com</span><br><span class="line">docker service  create \</span><br><span class="line">  --with-registry-auth \</span><br><span class="line">  --name my_service \</span><br><span class="line">  registry.example.com/acme/my_image:latest</span><br></pre></td></tr></table></figure><p>2、运行环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name helloworld \</span><br><span class="line">  --env MYVAR=myvalue \</span><br><span class="line">  --workdir /tmp \</span><br><span class="line">  --user my_user \</span><br><span class="line">  --hostname=&quot;&#123;&#123;.Node.ID&#125;&#125;-&#123;&#123;.Service.Name&#125;&#125;&quot; \</span><br><span class="line">  alpine ping docker.com</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--<span class="built_in">env</span>：自定义环境变量</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--workdir：指定容器的工作目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--user：以什么用户运行容器（用户名/UID）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--hostname：指定容器主机名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">alpine：镜像名（不指定版本默认最新版本）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ping docker.com：启动服务后执行的命令</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220805114025744.png" alt="image-20220805114025744"></p><p>设置容器主机名案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --replicas 2 \</span><br><span class="line">  --name redis \</span><br><span class="line">  --hostname=&quot;redis-3&quot; \</span><br><span class="line">  --update-delay 10s \</span><br><span class="line">  --update-parallelism 2 \</span><br><span class="line">  redis:3.0.6</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220805114429641.png" alt="image-20220805114429641"></p><h3 id="3-2-查看服务详情"><a href="#3-2-查看服务详情" class="headerlink" title="3.2 查看服务详情"></a>3.2 查看服务详情</h3><p>1、简要信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service inspect --pretty helloworld</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801123156070.png" alt="image-20220801123156070"></p><p>2、详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service inspect helloworld</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801123224388.png" alt="image-20220801123224388"></p><p>管理节点会通过相关调度，在集群节点中启动对应的容器，容器名以集群启动的服务名为基础随机生成。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801144334563.png" alt="image-20220801144334563"></p><h3 id="3-3-动态扩-缩-容"><a href="#3-3-动态扩-缩-容" class="headerlink" title="3.3 动态扩(缩)容"></a>3.3 动态扩(缩)容</h3><h4 id="3-3-1-扩容"><a href="#3-3-1-扩容" class="headerlink" title="3.3.1 扩容"></a>3.3.1 扩容</h4><blockquote><p>上面的测试实例为1，没有副本数，我们可以在集群中动态扩展副本数。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法1</span></span><br><span class="line">docker service scale &lt;SERVICE-ID/SERVICE-NAME&gt;=&lt;NUMBER-OF-TASKS&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法2</span></span><br><span class="line">docker service update --replicas &lt;NUMBER-OF-TASKS&gt; &lt;SERVICE-ID/SERVICE-NAME&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例（这两种方法都可以实现动态扩/缩容，选其一即可）</span></span><br><span class="line">docker service scale helloworld=2</span><br><span class="line">docker service update --replicas 2 helloworld</span><br></pre></td></tr></table></figure><blockquote><p>查看 swarm 集群运行服务的基本状态</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801145037815.png" alt="image-20220801145037815"></p><blockquote><p>查看 swarm 集群运行服务在哪个节点上运行（在哪个节点运行，就在哪个节点启动容器）</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801145215249.png" alt="image-20220801145215249"></p><h4 id="3-3-2-缩容"><a href="#3-3-2-缩容" class="headerlink" title="3.3.2 缩容"></a>3.3.2 缩容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其实扩容和缩容的标准就是想对scale和--replicas而言的，如果指定的数值大于当前运行的服务数就是扩容，反之为缩容。</span><br></pre></td></tr></table></figure><h3 id="3-4-删除运行的服务"><a href="#3-4-删除运行的服务" class="headerlink" title="3.4 删除运行的服务"></a>3.4 删除运行的服务</h3><p>1、删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service rm helloworld</span><br></pre></td></tr></table></figure><p>2、验证是否删除成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ls</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801150310996.png" alt="image-20220801150310996"></p><h3 id="3-5-服务滚动升级"><a href="#3-5-服务滚动升级" class="headerlink" title="3.5 服务滚动升级"></a>3.5 服务滚动升级</h3><p>1、升级步骤（假设运行了三个服务）</p><ul><li>先停止第一个服务；</li><li>为已停止的服务进行升级；</li><li>执行更新任务（如镜像版本升级）；</li><li>若升级完成后返回 <code>RUNNING</code>，则进入自定义的等待时间，等待时间完成后开始下一个服务的升级；</li><li>若更新期间（不管何时），更新返回结果为 <code>FAILED</code>，则停止更新。</li></ul><p>&#x3D;&#x3D;接下来开始实际案例演示&#x3D;&#x3D;</p><p>2、运行 redis 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群启动一个3.0.6版本的redis服务</span></span><br><span class="line">docker service create \</span><br><span class="line">  --replicas 3 \</span><br><span class="line">  --name redis \</span><br><span class="line">  --update-delay 10s \</span><br><span class="line">  --update-parallelism 2 \</span><br><span class="line">  redis:3.0.6</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--replicas 3：服务数为3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name redis：运行的服务名（自定义）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--update-delay 10s：更新完成后等待下一个服务跟新的时间（也就是服务间更的间隔时间）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--update-parallelism：同时更新的服务数（默认为1--也就是其策略是一个服务一个服务的更新的）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redis:3.0.6：指定镜像名</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801153827618.png" alt="image-20220801153827618"></p><p>3、redis 版本更新</p><blockquote><p>Manager 根据 <code>UpdateConfig</code> 策略将更新应用到节点</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将redis镜像版本更新至3.0.7（管理节点执行）</span></span><br><span class="line">docker service update --image redis:3.0.7 redis</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801154553547.png" alt="image-20220801154553547"></p><p>下图是官方更新成功与失败的案例截图：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801154427672.png" alt="image-20220801154427672"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新失败后，可尝试重新更新</span></span><br><span class="line">docker service update redis</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;看看滚动更新效果&#x3D;&#x3D;</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801154926148.png" alt="image-20220801154926148"></p><h3 id="3-6-集群服务回滚"><a href="#3-6-集群服务回滚" class="headerlink" title="3.6 集群服务回滚"></a>3.6 集群服务回滚</h3><blockquote><p>如果升级失败，可进行回滚操作，会回滚到你上一个版本。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service update \</span><br><span class="line">  --rollback \</span><br><span class="line">  --update-delay 0s \</span><br><span class="line">  my_web</span><br></pre></td></tr></table></figure><h3 id="3-7-节点脱离集群"><a href="#3-7-节点脱离集群" class="headerlink" title="3.7 节点脱离集群"></a>3.7 节点脱离集群</h3><blockquote><p>以下方法二选一即可</p></blockquote><p>1、节点脱离集群</p><blockquote><p>工作节点自己主动脱离集群</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使work1脱离集群</span></span><br><span class="line">[root@docker_swarm_work1 opt]# docker swarm leave</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制脱离</span></span><br><span class="line">[root@docker_swarm_work1 opt]# docker swarm leave --force</span><br></pre></td></tr></table></figure><blockquote><p>查看集群状态</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801143327408.png" alt="image-20220801143327408"></p><p>2、管理节点移除节点</p><blockquote><p>管理节点强制使节点脱离集群</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从管理节点中移除以停止或失效的节点</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除管理节点：</span></span><br><span class="line">docker node demote &lt;节点ID/HOSTNAME&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除work节点：</span></span><br><span class="line">docker node rm -f &lt;节点ID/HOSTNAME&gt;</span><br></pre></td></tr></table></figure><blockquote><p>通过管理节点使其他节点脱离集群时，如果被移除的这个集群想再次并入集群时，需要做如下操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在要并入集群的节点（被管理节点移除的节点）操作</span></span><br><span class="line">docker swarm leave --force</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始加入集群</span></span><br><span class="line">docker swarm join --token SWMTKN-1-17fmka1c0l9e6hr66i5ksrl6wreworhx2gwte0644yaij5agvh-cbfo8i5ubyp4j80y9sqzam9tj 192.168.56.161:2377</span><br></pre></td></tr></table></figure><h3 id="3-8-节点资源耗尽"><a href="#3-8-节点资源耗尽" class="headerlink" title="3.8 节点资源耗尽"></a>3.8 节点资源耗尽</h3><p>如果集群中某节点资源耗尽，那运行在该节点的服务将会发生什么？停止或是转移，答案是会通过管理节点进行相关调度将资源耗尽的节点上的服务进行转移，使其保持正常提供服务。</p><p>1、如下，我运行了三个服务</p><blockquote><p>每个节点都起了一个 redis 服务</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801160542727.png" alt="image-20220801160542727"></p><p>2、故意将 work1 节点置为资源耗尽状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update --availability drain docker_swarm_work1</span><br></pre></td></tr></table></figure><p>3、查看节点是否可用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node inspect --pretty docker_swarm_work1</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801160908128.png" alt="image-20220801160908128"></p><p>4、看其上的 redis 服务是否转移了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已经转移到管理节点上了</span></span><br><span class="line">docker service ps redis</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801161011290.png" alt="image-20220801161011290"></p><p>5、恢复至可用状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update --availability active docker_swarm_work1</span><br></pre></td></tr></table></figure><blockquote><p>在看看节点可用状态</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801161244932.png" alt="image-20220801161244932"></p><p>&#x3D;&#x3D;但是要注意，恢复后，原来运行的服务不会因为它再次可用而还原到原来的状态。但是此时该节点可以接收管理节点的正常资源调度。&#x3D;&#x3D;</p><h3 id="3-9-节点角色管理"><a href="#3-9-节点角色管理" class="headerlink" title="3.9 节点角色管理"></a>3.9 节点角色管理</h3><p>1、升级角色</p><blockquote><p>将节点提升为管理节点</p><p>由 work 节点 —&gt;  manage 节点。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node promote &lt;node_name&gt;</span><br></pre></td></tr></table></figure><p>2、降级角色</p><blockquote><p>将节点降为工作节点</p><p>由 manage 节点 —&gt;  work 节点。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node demote &lt;node_name&gt;</span><br></pre></td></tr></table></figure><h3 id="3-10-节点标签管理"><a href="#3-10-节点标签管理" class="headerlink" title="3.10 节点标签管理"></a>3.10 节点标签管理</h3><p>标签有什么用？当你想部署服务某服务到指定的 work 节点时，可以使用标签的方式来实现。当你的节点没有定义标签，而你又以指定标签来创建服务，那服务是起不来的，如果此时你在其他节点打上刚刚你创建服务时指定的标签，那你之前创建的服务（带标签）就会在你正在打标签的这台节点上运行。</p><p>1、添加标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker node update docker_swarm_work1 --label-add label=filebeat1</span><br><span class="line">docker node update docker_swarm_work2 --label-add label=filebeat2</span><br><span class="line">docker node update docker_swarm_manager --label-add label=filebeat-m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明：label=filebeat1是一个可以自定义的键值对</span></span><br></pre></td></tr></table></figure><p>2、修改标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker node update docker_swarm_work1 --label-add label=filebeat1-new</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其实就是同添加标签命令一样，保证 key 相同就会覆盖原 key 的值。</span></span><br></pre></td></tr></table></figure><p>3、删除标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update docker_swarm_manager --label-rm label</span><br></pre></td></tr></table></figure><p>4、查看节点标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node inspect docker_swarm_work1</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220808161747515.png" alt="image-20220808161747515"></p><p>5、标签应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --replicas 1 \</span><br><span class="line">  --name filebeat \</span><br><span class="line">  --network my-network \</span><br><span class="line">  --hostname=&quot;filebeat&quot; \</span><br><span class="line">  --constraint &#x27;node.labels.label == filebeat1&#x27; \</span><br><span class="line">  --mount type=bind,src=/data/docker_container/filebeat,dst=/usr/share/filebeat \</span><br><span class="line">  --mount type=bind,src=/data/nginx/logs,dst=/data/nginx/logs \</span><br><span class="line">  --mount type=bind,src=/etc/localtime,dst=/etc/localtime \</span><br><span class="line">  docker.elastic.co/beats/filebeat:6.8.23</span><br></pre></td></tr></table></figure><blockquote><p>运行后，报错了，错误日志显示为文件权限问题，按照提示修改即可</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220808162208549.png" alt="image-20220808162208549"></p><h3 id="3-11-资源限制"><a href="#3-11-资源限制" class="headerlink" title="3.11 资源限制"></a>3.11 资源限制</h3><p><code>docker run</code> 针对限制容器资源有许多设置选项，但 Swarm 中的 <code>docker service</code> 目前只有 cpu 和 memory 的选项可以操作。</p><p>如果 docker 找不到足够的资源來部署 service，则该 service 会进入 Pending 的狀態，然后持续 kill、recreate 的流程直到找到资源为止。</p><ul><li><strong>reserve</strong>：预定资源，是一种承诺，例如 Host 有 4 CPU，如果把某个 service 的 CPU 资源设为 4，其他 service 將无法取得任何 CPU 资源。&amp;#x20;</li><li><strong>limit</strong>：限制资源，最多可使用的资源。</li></ul><p>示例（资源限制）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service create --reserve-memory 800M --limit-memory 1024M --reserve-cpu 1 --limit-cpu 1.5 masl</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预定800M内存，最大可使用1G内存；预定1个cpu，最大可使用1.5个cpu</span></span><br></pre></td></tr></table></figure><p>示例（资源限制更新）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service update --limit-cpu 0.5 --limit-memory 2G masl</span><br><span class="line">docker service update --limit-cpu 3 --limit-memory 1g masl</span><br><span class="line">docker service update --limit-cpu 2 --limit-memory 100m masl</span><br></pre></td></tr></table></figure><h2 id="四、集群网络模式"><a href="#四、集群网络模式" class="headerlink" title="四、集群网络模式"></a>四、集群网络模式</h2><p>集群网络模式与 docker 网络类型类似，比如桥接、Host等网络模式。一个服务部署于 docker swarm 集群中后，那客户如何才能访问你部署的服务呢？根据我们所学的 Docker 相关知识，我们一般会做端口的映射。因此 docker swarm 集群也是这种思想。那它具体是如何实现的呢？</p><p>所有节点都使用一个网络入口（模式），该网络入口（模式）上的每个节点都可以在已映射的端口上接收 docker swarm 集群中任何节点上相关服务的连接，即便该节点没有运行任何服务。</p><p>要使用该网络模式之前，需要在 swarm 集群节点间打通以下端口（所以注意防火墙 IP 白名单问题）：</p><ul><li>7946：容器网络发现端口（manager 和 worker 上）；</li><li>4789：容器网络入口端口（manager 和 worker 上）。</li></ul><p>&#x3D;&#x3D;注意：还有个 2377 端口&#x3D;&#x3D;：该端口用于集群管理通信的 TCP 端口（仅在 manager 上）。</p><p>如下图，尽管我的 node3 节点没有运行任何服务，但我依然可以通过该节点 IP+Port 来实现服务访问。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/ingress-routing-mesh.png" alt="ingress-routing-mesh"></p><p>初始化 swarm 或将 Docker 主机加入现有 swarm 时，会在该主机（管理节点）上创建两个新网络，当然工作节点也会创建对应的这两个网络。</p><ul><li><p>名为 ingress 的 overlay 网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">该网络的作用是：处理与swarm集群服务相关的控制和数据流量。swarm群组服务并不会将其连接到用户定义的overlay网络时，而是连接到默认的ingress网络。</span><br><span class="line">若要连接到用户自定义的overlay网络需要使用--network指定(但创建该用户自定义的overlay网络时必须使用--attachable选项)。</span><br></pre></td></tr></table></figure></li><li><p>名为 docker_gwbridge 的 bridge 网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">它将参与到该swarm群集的各个Docker守护程序连接连接起来。可以使用docker network create创建用户定义overlay网络，服务或容器一次可以连接到多个网络，服务或容器只能通过它们各自连接的网络进行通信</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-1-服务端口"><a href="#4-1-服务端口" class="headerlink" title="4.1 服务端口"></a>4.1 服务端口</h3><p>默认情况下，当您发布端口时，它默认就是 TCP 端口。当然，你可以指定 TCP 或 UDP 来发布，当您同时发布 TCP 和 UDP 端口时，如果你省略了协议说明符，则该端口将作为 TCP 端口来发布。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801165227555.png" alt="image-20220801165227555"></p><h4 id="4-1-1-TCP"><a href="#4-1-1-TCP" class="headerlink" title="4.1.1 TCP"></a>4.1.1 TCP</h4><p>1、语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --name &lt;SERVICE-NAME&gt; \</span><br><span class="line">  --publish published=&lt;PUBLISHED-PORT&gt;,target=&lt;CONTAINER-PORT&gt; \</span><br><span class="line">  &lt;IMAGE&gt;</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--publish：指定（映射）要发布的端口号</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">published：你要实际访问的外部端口（可自定义，不要和系统服务现有端口冲突即可）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">targetL：你swarm集群运行的服务（容器）的真实（内部）端口</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">短语法格式</span></span><br><span class="line">docker service create \</span><br><span class="line">  --name &lt;SERVICE-NAME&gt; \</span><br><span class="line">  -p &lt;PUBLISHED-PORT&gt;:&lt;CONTAINER-PORT&gt; \</span><br><span class="line">  &lt;IMAGE&gt;</span><br></pre></td></tr></table></figure><p>2、案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --name my-web \</span><br><span class="line">  --publish published=8080,target=80 \</span><br><span class="line">  --replicas 2 \</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801165353092.png" alt="image-20220801165353092"></p><p>3、访问验证</p><blockquote><p>上图可看出，这两个服务分别部署在了 work1、work2 上了，管理节点上没有被调度使用，现在就来验证管理是否能正常访问集群中的服务。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801165529583.png" alt="image-20220801165529583"></p><p>所以得出结论，在集群中部署的服务，不管是单节点服务，还是集群，在整个集群节点中都会映射对应的发布端口，所在集群部署服务时，确保所有集群节点的端口与你现在部署的服务端口不发生冲突。</p><p>4、如何改变现有服务的发布端口</p><blockquote><p>上面我定义发布端口为 8080，现在需要改为 8181，可做如下修改。</p><p>实际上这是新增映射端口，原来端口（8080）还存在，如果不需要可在添加完成后删掉旧的映射端口。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker service update \</span><br><span class="line">  --publish-add published=&lt;PUBLISHED-PORT&gt;,target=&lt;CONTAINER-PORT&gt; \</span><br><span class="line">  &lt;SERVICE&gt;</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例--新增端口映射</span></span><br><span class="line">docker service update \</span><br><span class="line">  --publish-add published=8181,target=80 \</span><br><span class="line">  my-web</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除映射的端口</span></span><br><span class="line">docker service update \</span><br><span class="line">  --publish-rm published=8080,target=80 \</span><br><span class="line">  my-web</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但是注意，删除的时候新增的8181端口也被删除，还得重新映射，所以一般的操作步骤就是将原端口先<span class="built_in">rm</span>掉，在添加端口</span></span><br></pre></td></tr></table></figure><blockquote><p>如下图，同样是滚动更新的。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801172328081.png" alt="image-20220801172328081"></p><p>5、如何查看服务的发布端口？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service inspect --format=&quot;&#123;&#123;json .Endpoint.Spec.Ports&#125;&#125;&quot; my-web</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220801172550912.png" alt="image-20220801172550912"></p><h4 id="4-1-2-UDP"><a href="#4-1-2-UDP" class="headerlink" title="4.1.2 UDP"></a>4.1.2 UDP</h4><p>1、语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name &lt;SERVICE-NAME&gt; \</span><br><span class="line">  --publish published=&lt;PUBLISHED-PORT&gt;,target=&lt;CONTAINER-PORT&gt;,protocol=udp \</span><br><span class="line">  &lt;IMAGE&gt;</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--publish：指定（映射）要发布的端口号</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">published：你要实际访问的外部端口（可自定义，不要和系统服务现有端口冲突即可）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">targetL：你swarm集群运行的服务（容器）的真实（内部）端口</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">短语法格式</span></span><br><span class="line">docker service create \</span><br><span class="line">  --name &lt;SERVICE-NAME&gt; \</span><br><span class="line">  -p &lt;PUBLISHED-PORT&gt;:&lt;CONTAINER-PORT&gt;/udp \</span><br><span class="line">  &lt;IMAGE&gt;</span><br></pre></td></tr></table></figure><p>2、案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">长语法</span></span><br><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53,protocol=udp \</span><br><span class="line">  dns-cache</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">短语法</span></span><br><span class="line">docker service create --name dns-cache \</span><br><span class="line">  -p 53:53/udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><h4 id="4-1-3-TCP-及-UDP"><a href="#4-1-3-TCP-及-UDP" class="headerlink" title="4.1.3 TCP 及 UDP"></a>4.1.3 TCP 及 UDP</h4><p>1、语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53 \</span><br><span class="line">  --publish published=53,target=53,protocol=udp \</span><br><span class="line">  dns-cache</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--publish：指定（映射）要发布的端口号</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">published：你要实际访问的外部端口（可自定义，不要和系统服务现有端口冲突即可）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">targetL：你swarm集群运行的服务（容器）的真实（内部）端口</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">短语法格式</span></span><br><span class="line">docker service create --name &lt;SERVICE-NAME&gt; \</span><br><span class="line">  -p &lt;PUBLISHED-PORT&gt;:&lt;CONTAINER-PORT&gt; \</span><br><span class="line">  -p &lt;PUBLISHED-PORT&gt;:&lt;CONTAINER-PORT&gt;/udp \</span><br><span class="line">  &lt;IMAGE&gt;</span><br></pre></td></tr></table></figure><p>2、案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">长语法</span></span><br><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53 \</span><br><span class="line">  --publish published=53,target=53,protocol=udp \</span><br><span class="line">  dns-cache</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">短语法</span></span><br><span class="line">docker service create --name dns-cache \</span><br><span class="line">  -p 53:53 \</span><br><span class="line">  -p 53:53/udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><h3 id="4-2-Host-网络"><a href="#4-2-Host-网络" class="headerlink" title="4.2 Host 网络"></a>4.2 Host 网络</h3><p>如不想经过路由，而直接访问集群服务，可采用 Host 模式，在部署服务时指定。其实这就是 Docker 的 Host 网络模式，共享宿主机网络。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53,protocol=udp,mode=host \</span><br><span class="line">  --mode global \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;至此，基于 Linux 的 Docker Swarm 集群部署及应用告一段落，这种简单的容器编排最终还是会转向 K8s，但是我们也要根据实际场景来部署，别什么一来就上 K8s，也许你目前的服务数量都不够 K8s 的基本生产部署条件。因此，我们是逐步转向 K8s 集群的，不管任何技术，它都有个过渡期。后续会继续分享 Docker Swarm 集群详细的工作原理及网络模式。&#x3D;&#x3D;</p><h3 id="4-3-负载均衡"><a href="#4-3-负载均衡" class="headerlink" title="4.3 负载均衡"></a>4.3 负载均衡</h3><p>在集群中，可通过任意一个节点来实现访问，不管该节点是否已经部署了服务都可访问。因此所有节点都是平等的（对于客户端而言）。于是，我们可以使用负载均衡技术来实现统一入口访问。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/ingress-lb.png" alt="ingress-lb"></p><p>如上图，Docker Swarm 负载均衡有两种模式，一种是vip（默认），另一种是dnsrr，dnsrr模式下 -p参数是无效的，就是说其服务器是无法直接通过端口映射被外边访问的，如果想要被外边访问有两种方式：一种是使用浏览器代理，可参考<a href="https://5socks.net/Manual/browser_en.html">https://5socks.net/Manual/browser_en.html</a> ；另一种是使用类似nginx转发功能。</p><p>&#x3D;&#x3D;使用 Nginx 实现：&#x3D;&#x3D;</p><p>1、创建 overlay 网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver overlay swarm-net</span><br></pre></td></tr></table></figure><p>2、创建 nginx 转发路由服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --replicas 1 \</span><br><span class="line">  --name proxy_docker \</span><br><span class="line">  --network swarm-net \</span><br><span class="line">  --publish published=8088,target=8088 \</span><br><span class="line">  --publish published=50070,target=50070 \</span><br><span class="line">  centos7.3:latest /usr/sbin/init /bin/bash</span><br></pre></td></tr></table></figure><p>官方的说明：</p><p>Use the –publish flag to publish a port when you create a service. target is used to specify the port inside the container, and published is used to specify the port to bind on the routing mesh. If you leave off the published port, a random high-numbered port is bound for each service task. You need to inspect the task to determine the port.</p><p>翻译：</p><p>在创建服务时，使用–Publish标志发布端口。Target用于指定容器内部的端口，PUBLISHED用于指定要绑定到路由网格上的端口。如果不使用发布的端口，则会为每个服务任务绑定一个随机的高编号端口。您需要检查任务以确定端口。</p><p>3、在proxy_docker容器中安装nginx并配置负载均衡即可</p><p>此时就可以通过8088、50070进行访问了。</p><h3 id="4-4-自定义网络"><a href="#4-4-自定义网络" class="headerlink" title="4.4 自定义网络"></a>4.4 自定义网络</h3><p>1、创建网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker network create \</span><br><span class="line">  --driver overlay \</span><br><span class="line">  --subnet 10.0.9.0/24 \</span><br><span class="line">  --gateway 10.0.9.1 \</span><br><span class="line">  my-network</span><br></pre></td></tr></table></figure><p>2、使用自定义的网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --replicas 2 \</span><br><span class="line">  --name my-web \</span><br><span class="line">  --network my-network \</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure><p>说明：自定义的网络可使该网络模式下的服务互相通信（包括跨主机通信）。</p><p>4、将现有服务并入自定义的网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service update --network-add my-network my-web</span><br></pre></td></tr></table></figure><p>5、将自定义网络下的服务移除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service update --network-rm my-network my-web</span><br></pre></td></tr></table></figure><h2 id="五、集群安全"><a href="#五、集群安全" class="headerlink" title="五、集群安全"></a>五、集群安全</h2><h3 id="5-1-集群安全"><a href="#5-1-集群安全" class="headerlink" title="5.1 集群安全"></a>5.1 集群安全</h3><ul><li></li></ul><h3 id="5-2-服务安全"><a href="#5-2-服务安全" class="headerlink" title="5.2 服务安全"></a>5.2 服务安全</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">     --name nginx \</span><br><span class="line">     --secret site.key \</span><br><span class="line">     --secret site.crt \</span><br><span class="line">     --secret site.conf \</span><br><span class="line">     --publish published=3000,target=443 \</span><br><span class="line">     nginx:latest \</span><br><span class="line">     sh -c &quot;ln -s /root/site.conf /etc/nginx/conf.d/site.conf &amp;&amp; exec nginx -g &#x27;daemon off;&#x27;&quot;</span><br></pre></td></tr></table></figure><h3 id="5-3-数据持久化"><a href="#5-3-数据持久化" class="headerlink" title="5.3 数据持久化"></a>5.3 数据持久化</h3><p>Docker 相关得服务，我们一般是要做数据持久化的。集群中使用 volume 或者 bind 类型来挂载，而 –mount 无论使用哪种类型，在创建服务时都是使用该参数。如何对现有的服务更新持久化目录？可采用这两个参数来实现：<code>--mount-add</code>、<code>--mount-rm</code>。</p><p>1、创建服务时指定持久化目录</p><ul><li><p>默认数据卷驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker service create \</span><br><span class="line">  --mount src=&lt;VOLUME-NAME&gt;,dst=&lt;CONTAINER-PATH&gt; \</span><br><span class="line">  --name myservice \</span><br><span class="line">  &lt;IMAGE&gt;</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">src：宿主机持久化目录（执行时不存在则自动创建）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dst：容器内部数据目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认数据卷驱动为<span class="built_in">local</span></span></span><br></pre></td></tr></table></figure></li><li><p>指定数据卷驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker service create \</span><br><span class="line">  --mount type=volume,src=&lt;VOLUME-NAME&gt;,dst=&lt;CONTAINER-PATH&gt;,volume-driver=&lt;DRIVER&gt;,volume-opt=&lt;KEY0&gt;=&lt;VALUE0&gt;,volume-opt=&lt;KEY1&gt;=&lt;VALUE1&gt; \</span><br><span class="line">  --name myservice \</span><br><span class="line">  &lt;IMAGE&gt;</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">src：宿主机持久化目录（执行时不存在则自动创建）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dst：容器内部数据目录</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --mount type=bind,src=&lt;HOST-PATH&gt;,dst=&lt;CONTAINER-PATH&gt; \</span><br><span class="line">  --name myservice \</span><br><span class="line">  &lt;IMAGE&gt;</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">要求src必须提前存在</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">权限：读写</span></span><br><span class="line"></span><br><span class="line">========================================</span><br><span class="line">docker service create \</span><br><span class="line">  --mount type=bind,src=&lt;HOST-PATH&gt;,dst=&lt;CONTAINER-PATH&gt;,readonly \</span><br><span class="line">  --name myservice \</span><br><span class="line">  &lt;IMAGE&gt;</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">要求src必须提前存在</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">权限：只读</span></span><br></pre></td></tr></table></figure></li></ul><p>2、更新现有的服务的持久化目录</p><ul><li><p>新增数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --mount-add src=&lt;VOLUME-NAME&gt;,dst=&lt;CONTAINER-PATH&gt; \</span><br><span class="line">  --name myservice \</span><br><span class="line">  &lt;IMAGE&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --mount-rm src=&lt;VOLUME-NAME&gt;,dst=&lt;CONTAINER-PATH&gt; \</span><br><span class="line">  --name myservice \</span><br><span class="line">  &lt;IMAGE&gt;</span><br></pre></td></tr></table></figure></li></ul><p>3、案例</p><p>&#x3D;&#x3D;用 bind 方式来实现&#x3D;&#x3D;</p><ul><li><p>创建持久化目录</p><blockquote><p>先在集群中某台服务器执行，完成后在将整体目录结构同步于其他集群节点</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/nginx/&#123;conf,html,logs&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动临时容器（拷贝必要配置文件至持久化目录）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行临时容器</span></span><br><span class="line">docker run -d --name=tmp nginx:1.20.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝相关文件</span></span><br><span class="line">docker cp tmp:/etc/nginx/nginx.conf /data/nginx/conf/</span><br><span class="line">docker cp tmp:/etc/nginx/conf.d /data/nginx/conf/</span><br></pre></td></tr></table></figure></li><li><p>将目录&#x2F;文件 scp 至其他节点</p><blockquote><p>因为集群内部服务运行节点是随机的，所以要保证集群中所有工作节点都具备相同的程序（服务）运行环境。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /data/nginx/conf 192.168.56.132:/data/nginx/</span><br><span class="line">scp -r /data/nginx/conf 192.168.56.133:/data/nginx/</span><br></pre></td></tr></table></figure></li><li><p>Docker Swarm 集群启动服务</p><blockquote><p>以上配置完成后，就可以在集群的管理节点执行如下命令来启动一个服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --replicas 2 \</span><br><span class="line">  --name my-web \</span><br><span class="line">  --network my-network \</span><br><span class="line">  --publish published=8080,target=80 \</span><br><span class="line">  --hostname=&quot;my-nginx&quot; \</span><br><span class="line">  --mount type=bind,src=/data/nginx/conf/nginx.conf,dst=/etc/nginx/nginx.conf \</span><br><span class="line">  --mount type=bind,src=/data/nginx/conf/conf.d,dst=/etc/nginx/conf.d \</span><br><span class="line">  --mount type=bind,src=/data/nginx/html,dst=/usr/share/nginx/html \</span><br><span class="line">  --mount type=bind,src=/data/nginx/logs,dst=/var/log/nginx \</span><br><span class="line">  nginx:1.20.2</span><br></pre></td></tr></table></figure></li><li><p>创建测试数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch /data/nginx/html/index.html</span><br><span class="line">echo &quot;test&quot; &gt; /data/nginx/html/index.html</span><br></pre></td></tr></table></figure></li><li><p>验证</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220805130319377.png" alt="image-20220805130319377"></p></li></ul><p>&#x3D;&#x3D;用 volume 来实现：&#x3D;&#x3D;</p><p>下面的功能实现将容器内部的 <code>/usr/share/nginx/html</code> 目录以  volume 持久化到 Host 本地，至于会持久化到哪个 node 节点，就看这个 service 是在哪个节点上运行的，service 在哪个节点上运行就持久化到哪个节点上，并且你会看到挂载的目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --replicas 1 \</span><br><span class="line">  --name my-web \</span><br><span class="line">  --publish published=10800,target=80 \</span><br><span class="line">  --hostname=&quot;my-nginx&quot; \</span><br><span class="line">  --constraint node.labels.label==produce-smzhsserver \</span><br><span class="line">  --mount &#x27;type=volume,src=nginx,dst=/usr/share/nginx/html,volume-driver=local,volume-nocopy=true,volume-opt=type=nfs,volume-opt=device=172.17.16.86:/data/nginx,&quot;volume-opt=o=addr=172.17.16.86,vers=4,soft,timeo=180,bg,tcp,rw&quot;&#x27; \</span><br><span class="line">  nginx:1.20.2</span><br></pre></td></tr></table></figure><p>我去 produce-smzhsserver 节点上去看看：</p><blockquote><p>86 NFS 共享的目录已经被自动挂载到运行 service 的节点上，当集群删除 service 时会自动取消挂载。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221118173834456.png" alt="image-20221118173834456"></p><p>再看看 produce-smzhsserver 节点上的持久化目录：</p><blockquote><p>volume 数据卷路径：&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;nginx&#x2F;_data</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221118174309280.png" alt="image-20221118174309280"></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>注意关闭相关主机防火墙，或者你开放了防火墙后，注意添加相关 IP Port 白名单、安全组等。</p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker Swarm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker_Swarm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何制作一个精简的 Docker 镜像？</title>
      <link href="/posts/articles/f1d19dd5.html"/>
      <url>/posts/articles/f1d19dd5.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、选用最小基础镜像"><a href="#一、选用最小基础镜像" class="headerlink" title="一、选用最小基础镜像"></a>一、选用最小基础镜像</h2><p>比如：debian（更推荐）、Ubuntu。</p><p>案例：通过 Debian、Ubuntu 基础镜像构建 redis 镜像。</p><h3 id="1-1-Ubuntu"><a href="#1-1-Ubuntu" class="headerlink" title="1.1 Ubuntu"></a>1.1 Ubuntu</h3><p>1、Dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; Dockerfile-Ubuntu &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">FROM ubuntu:trusty</span><br><span class="line">ENV VER 3.0.0</span><br><span class="line">ENV URL http://download.redis.io/releases/redis-$VER.tar.gz</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y curl make gcc</span><br><span class="line">RUN curl -L $URL | tar zxv</span><br><span class="line">WORKDIR redis-$VER</span><br><span class="line">RUN make</span><br><span class="line">RUN make install</span><br><span class="line">WORKDIR /</span><br><span class="line">RUN apt-get remove -y --auto-remove curl make gcc</span><br><span class="line">RUN apt-get clean</span><br><span class="line">RUN rm -rf /var/lib/apt/lists/* /redis-$VER</span><br><span class="line">CMD [&quot;redis-server&quot;]</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>2、构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t redis:v1 -f Dockerfile-Ubuntu .</span><br></pre></td></tr></table></figure><h3 id="1-2-Debian"><a href="#1-2-Debian" class="headerlink" title="1.2 Debian"></a>1.2 Debian</h3><p>1、Dockerfile</p><blockquote><p>更换一下国内源：<a href="https://developer.aliyun.com/mirror/debian?spm=a2c6h.13651102.0.0.4a0c1b111SQZ4Z">https://developer.aliyun.com/mirror/debian?spm=a2c6h.13651102.0.0.4a0c1b111SQZ4Z</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; Dockerfile-Debian &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">FROM debian:jessie</span><br><span class="line">ENV VER 3.0.0</span><br><span class="line">ENV URL http://download.redis.io/releases/redis-$VER.tar.gz</span><br><span class="line">RUN echo &quot;deb http://mirrors.aliyun.com/debian jessie main contrib non-free&quot; &gt; /etc/apt/sources.list</span><br><span class="line">RUN echo &quot;deb-src http://mirrors.aliyun.com/debian jessie main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN echo &quot;deb http://mirrors.aliyun.com/debian jessie-updates main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN echo &quot;deb-src http://mirrors.aliyun.com/debian jessie-updates main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN echo &quot;deb http://mirrors.aliyun.com/debian-security jessie/updates main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN echo &quot;deb-src http://mirrors.aliyun.com/debian-security jessie/updates main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y curl make gcc</span><br><span class="line">RUN curl -L $URL | tar zxv</span><br><span class="line">WORKDIR redis-$VER</span><br><span class="line">RUN make</span><br><span class="line">RUN make install</span><br><span class="line">WORKDIR /</span><br><span class="line">RUN apt-get remove -y --auto-remove curl make gcc</span><br><span class="line">RUN apt-get clean</span><br><span class="line">RUN rm -rf /var/lib/apt/lists/* /redis-$VER</span><br><span class="line">CMD [&quot;redis-server&quot;]</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>2、构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t redis:v2 -f Dockerfile-Debian .</span><br></pre></td></tr></table></figure><h3 id="1-3-镜像大小对比"><a href="#1-3-镜像大小对比" class="headerlink" title="1.3 镜像大小对比"></a>1.3 镜像大小对比</h3><p>redis:v1：Ubuntu 为基础构建的镜像</p><p>redis:v2：Debian 为基础构建的镜像</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831160948177.png" alt="image-20220831160948177"></p><p>可见，Debian 构建的镜像比 Ubuntu 构建的镜像小，&#x3D;&#x3D;所以我们一般通过 Debian 作为基础镜像来构建镜像&#x3D;&#x3D;。</p><h2 id="二、串联指令"><a href="#二、串联指令" class="headerlink" title="二、串联指令"></a>二、串联指令</h2><p>Dockerfile 中最多只能有 127 个 RUN 指令，镜像制作中我们可以将多条 RUN 指令合并为一条 RUN 指令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; Dockerfile-Debian &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">FROM debian:jessie</span><br><span class="line">ENV VER 3.0.0</span><br><span class="line">ENV URL http://download.redis.io/releases/redis-$VER.tar.gz</span><br><span class="line">RUN echo &quot;deb http://mirrors.aliyun.com/debian jessie main contrib non-free&quot; &gt; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    echo &quot;deb-src http://mirrors.aliyun.com/debian jessie main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list  &amp;&amp; \</span><br><span class="line">    echo &quot;deb http://mirrors.aliyun.com/debian jessie-updates main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    echo &quot;deb-src http://mirrors.aliyun.com/debian jessie-updates main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    echo &quot;deb http://mirrors.aliyun.com/debian-security jessie/updates main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    echo &quot;deb-src http://mirrors.aliyun.com/debian-security jessie/updates main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; \</span><br><span class="line">    apt-get install -y curl make gcc &amp;&amp; \</span><br><span class="line">    curl -L $URL | tar zxv &amp;&amp; \</span><br><span class="line">    cd redis-$VER &amp;&amp; \</span><br><span class="line">    make &amp;&amp; \</span><br><span class="line">    make install &amp;&amp; \</span><br><span class="line">    cd / &amp;&amp; \</span><br><span class="line">    apt-get remove -y --auto-remove curl make gcc &amp;&amp; \</span><br><span class="line">    apt-get clean &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apt/lists/* /redis-$VER</span><br><span class="line">CMD [&quot;redis-server&quot;]</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>看看串联后构建的镜像大小：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831162432371.png" alt="image-20220831162432371"></p><p>可明显看到，redis:v3 镜像的大小仅为 144M，是没有将 RUN 指令合并前构建镜像的二分之一还要小，可见 RUN 指令串联后效果是很明显的。</p><h2 id="三、压缩镜像"><a href="#三、压缩镜像" class="headerlink" title="三、压缩镜像"></a>三、压缩镜像</h2><p>实际上就是将多个 RUN 指令进行压缩，下载 docker-squash 即可，解压就是一个二进制文件。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831162208429.png" alt="image-20220831162208429"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加到环境变量</span></span><br><span class="line">mv docker-squash /usr/local/bin/</span><br></pre></td></tr></table></figure><p>开始压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker save redis:v2 | docker-squash -verbose -t redis:v4 | docker load</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩redis:v2镜像为redis:v4然后再导回redis:v2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">效果并不是很明显（尝试压缩即可）</span></span><br></pre></td></tr></table></figure><h2 id="四、使用专用的基础镜像"><a href="#四、使用专用的基础镜像" class="headerlink" title="四、使用专用的基础镜像"></a>四、使用专用的基础镜像</h2><p>如 scratch、busybox 镜像。</p><h3 id="4-1-运行一个-redis-容器"><a href="#4-1-运行一个-redis-容器" class="headerlink" title="4.1 运行一个 redis 容器"></a>4.1 运行一个 redis 容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --rm --name=tmp --hostname tmp redis:v3</span><br></pre></td></tr></table></figure><h3 id="4-2-查看可执行模块的所属"><a href="#4-2-查看可执行模块的所属" class="headerlink" title="4.2 查看可执行模块的所属"></a>4.2 查看可执行模块的所属</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it tmp bash</span><br><span class="line">ldd /usr/local/bin/redis-server</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831164416695.png" alt="image-20220831164416695"></p><blockquote><p>将所属的文件都 copy 到 Host，然后使用空镜像（scratch）为基础镜像进行打包。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker cp tmp:/usr .</span><br><span class="line">docker cp tmp:/lib .</span><br><span class="line">docker cp tmp:/lib64 .</span><br><span class="line"></span><br><span class="line">tar czf rootfs.tar.gz usr lib lib64</span><br></pre></td></tr></table></figure><p>编写 Dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; Dockerfile-Rootfs &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">FROM scratch</span><br><span class="line">ADD rootfs.tar.gz /</span><br><span class="line">COPY redis.conf /etc/redis/redis.conf</span><br><span class="line">EXPOSE 6379</span><br><span class="line">CMD [&quot;/usr/local/bin/redis-server&quot;]</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t redis:v4 -f Dockerfile-Rootfs .</span><br></pre></td></tr></table></figure><p>查看镜像大小</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831171305830.png" alt="image-20220831171305830"></p><p>运行容器并查看容器日志</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220831171105626.png" alt="image-20220831171105626"></p><p><mark>以上就是如何制作一个最简镜像。</mark></p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何理解 K8s 动态伸缩与触发上线？</title>
      <link href="/posts/articles/e927d0f0.html"/>
      <url>/posts/articles/e927d0f0.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/yys.jpeg" alt="yys"></p><p><strong>K8s 版本</strong>：1.23.6</p><hr><p>一般地，如果仅修改 Pod 的副本数（如新增&#x2F;缩减），这就属于<code>动态伸缩</code>。如果是修改容器镜像的版本，则会触发上线，具体看下面例子。</p><h2 id="一、动态伸缩"><a href="#一、动态伸缩" class="headerlink" title="一、动态伸缩"></a>一、动态伸缩</h2><p>1、查看当前 Pod 副本（当前为 2）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230210162734240.png" alt="image-20230210162734240"></p><p>2、扩容 Pod 副本数（扩容为 3）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1：编辑控制器，修改副本</span></span><br><span class="line">kubectl edit deployment nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2：修改YAML配置文件</span></span><br><span class="line">...</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      web: web-server</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法3：scale</span></span><br><span class="line">kubectl scale deployments/nginx --replicas=3</span><br></pre></td></tr></table></figure><p>3、apply 应用创建资源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nginx.yml</span><br></pre></td></tr></table></figure><p>4、再次查看副本数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod</span><br></pre></td></tr></table></figure><blockquote><p>可见，副本数已经调整为 3 了，你会发现，它是在原副本数的基础上新增了一个副本，之前的副本仍保持不变且正常对外提供服务，且 Replicaset 名也没发生变化。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230210163525542.png" alt="image-20230210163525542"></p><blockquote><p>如果要实现缩容，把值调小于当前值即可。</p></blockquote><h2 id="二、触发上线"><a href="#二、触发上线" class="headerlink" title="二、触发上线"></a>二、触发上线</h2><p>1、查看当前 Pod 副本（当前为 3）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230210163525542.png" alt="image-20230210163525542"></p><p>2、修改 Pod 中容器的镜像版本号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1：编辑控制器，修改副本</span></span><br><span class="line">kubectl edit deployment nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2：修改YAML配置文件</span></span><br><span class="line">...</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx</span><br><span class="line">          image: nginx:1.23.3</span><br><span class="line">          ports:</span><br><span class="line">          - containerPort: 80</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>3、apply 应用创建资源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nginx.yml</span><br></pre></td></tr></table></figure><p>4、查看 Pod 是否正常运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230210165232135.png" alt="image-20230210165232135"></p><p>5、验证 Pod 中容器镜像版本号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe replicaset nginx-7ccc4bb9dd</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230210165053887.png" alt="image-20230210165053887"></p><p>你会发现，这三个新的 Pod 实现了一个滚动更新的效果，ReplicaSet 名也发生了变化，也就是说创建了新的 ReplicaSet，新版逐渐替换旧版。如下图所示，创建了一个名为 <code>nginx-7ccc4bb9dd</code> 的 ReplicaSet 资源，并替换了旧的 ReplicaSet。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20230210165559485.png" alt="image-20230210165559485"></p><p>所以这里 ReplicaSet 的作用就很明显了，前面的章节提到 ReplicaSet 创建于 Deployment，且 ReplicaSet 的名称为 <code>Deploymen名称 + hash字串</code>，这个 Hash 字串保证了不重叠，可见上图两个 ReplicaSet 资源，均来源于同个 Deploymen，但由于 Hash 的作用，在服务版本升级时避免了重叠现象。</p><p>之所以保留旧的 ReplicaSet，也是便于版本会退时直接沿用原来的 ReplicaSet。</p><p><mark>小结：</mark></p><ul><li><p>动态伸缩时，ReplicaSet 资源不发生变化，触发上线时，ReplicaSet 发生了变化；</p></li><li><p>动态伸缩时，扩容则会在原 Pod 副本数的基础上新增 Pod，此时未发生触发上线；</p></li><li><p>触发上线时，如修改 Pod 容器镜像版本，则所有 Pod 依次实现滚动升级，此时未发生动态伸缩。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> K8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
            <tag> 云原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Pipeline 方法定义及调用</title>
      <link href="/posts/articles/fcc16254.html"/>
      <url>/posts/articles/fcc16254.html</url>
      
        <content type="html"><![CDATA[<p>网上查了一些文档资料，<code>Jenkins Pipeline 方法调用</code> 的文章还是比较少的，就算有也描述得不太清楚。于是根据自己的经验总结了如何在 Jenkinsfile 进行方法调用。如有不当之处，请予指正。</p><p>首先来说一下为什么要使用<code>方法</code>？有这样一个场景，我有十几台远端服务器，这些服务器都是我的测试（或线上）服务器，我构建后的包需要部署到这些服务器上，于是我会为每台远程服务器定义相关登录信息（用户名、密码或密钥）等。这些配置对于每台服务器来说其实都是一样，无非就是 IP 不同而已（用户名、密钥或密码我暂且保持一致），于是我就可以将相同的部分定义为一个方法或叫函数，并在我的流水线阶段来调用这些方法或函数，当你定义的函数过多时，你还可以将这些函数写道<code>共享库</code>中，然后流水线调用共享库即可。</p><p>本案例以<code>声明式</code>  Jenkinsfile 为例进行演示！</p><h3 id="1、定义方法（函数）"><a href="#1、定义方法（函数）" class="headerlink" title="1、定义方法（函数）"></a>1、定义方法（函数）</h3><p>方法定义于 <code>pipeline &#123;&#125;</code> 之外，并在 <code>pipeline &#123;&#125;</code> 之内进行调用。如下，我定义了一个远程服务器的远程登录信息，方便我能把构建的包发布到远程服务器上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 创建函数</span><br><span class="line">def RemoteHost(Jarnname, Host, ProJect) &#123;</span><br><span class="line">    withCredentials([usernamePassword(credentialsId: &#x27;131&#x27;, passwordVariable: &#x27;PassWord&#x27;, usernameVariable: &#x27;UserName&#x27;)])&#123;</span><br><span class="line">        def remote = [:]</span><br><span class="line">        remote.name = &quot;$Jarnname&quot;</span><br><span class="line">        remote.host = &quot;$Host&quot;</span><br><span class="line">        remote.user = &quot;$UserName&quot;</span><br><span class="line">        remote.password = &quot;$PassWord&quot;</span><br><span class="line">        remote.port = 22</span><br><span class="line">        remote.allowAnyHosts = true</span><br><span class="line">        sshPut remote: remote, from: &quot;./target/$Jarnname&quot;, into: &quot;./$&#123;ProJect&#125;/&quot;, override: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 流水线步骤</span><br><span class="line">pipeline &#123;</span><br><span class="line">stages &#123;</span><br><span class="line">// 阶段 + 步骤</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、调用方法（函数）"><a href="#2、调用方法（函数）" class="headerlink" title="2、调用方法（函数）"></a>2、调用方法（函数）</h3><p>看下面代码块的<code>项目发布</code>阶段，在这里调用了上面定义的函数，并进行参数传递。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">// 创建函数</span><br><span class="line">def RemoteHost(Jarnname, Host, ProJect) &#123;</span><br><span class="line">    withCredentials([usernamePassword(credentialsId: &#x27;131&#x27;, passwordVariable: &#x27;PassWord&#x27;, usernameVariable: &#x27;UserName&#x27;)])&#123;</span><br><span class="line">        def remote = [:]</span><br><span class="line">        remote.name = &quot;$Jarnname&quot;</span><br><span class="line">        remote.host = &quot;$Host&quot;</span><br><span class="line">        remote.user = &quot;$UserName&quot;</span><br><span class="line">        remote.password = &quot;$PassWord&quot;</span><br><span class="line">        remote.port = 22</span><br><span class="line">        remote.allowAnyHosts = true</span><br><span class="line">        sshPut remote: remote, from: &quot;./target/$Jarnname&quot;, into: &quot;./$&#123;ProJect&#125;/&quot;, override: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 流水线步骤</span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        docker &#123;</span><br><span class="line">            image &#x27;maven:v2&#x27;</span><br><span class="line">            args &#x27;-v /var/lib/jenkins/workspace/$JOB_NAME:/root/.m2 -v /root/mavenRepository:/usr/repository&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">stages &#123;</span><br><span class="line">    // 拉取代码</span><br><span class="line">        stage(&#x27;拉取代码&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                checkout([$class: &#x27;GitSCM&#x27;,</span><br><span class="line">                    branches: [[name: &quot;$&#123;params.BRANCH_TAG&#125;&quot;]],</span><br><span class="line">                    doGenerateSubmoduleConfigurations: false,</span><br><span class="line">                    extensions: [],</span><br><span class="line">                    gitTool: &#x27;Default&#x27;,</span><br><span class="line">                    submoduleCfg: [],</span><br><span class="line">                    userRemoteConfigs: [[url: &#x27;https://codeup.aliyun.com/xx/java_code.git&#x27;,credentialsId: &#x27;yourid&#x27;,]]</span><br><span class="line">                ])</span><br><span class="line">        &#125;</span><br><span class="line">        // 项目构建</span><br><span class="line">        stage(&quot;构建项目&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &quot;mvn clean package -Dmaven.test.skip=true -P test&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 项目发布（在这里调用方法）</span><br><span class="line">        stage (&quot;项目发布&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    switch(&quot;$p_name&quot;)&#123;</span><br><span class="line">                        case &quot;cms&quot;:</span><br><span class="line">                            Jarnname = &quot;demo.jar&quot;</span><br><span class="line">                            Host = &quot;192.168.56.131&quot;</span><br><span class="line">                            ProJect = &quot;cms&quot;</span><br><span class="line">                            // 调用方法并传递参数</span><br><span class="line">                            RemoteHost(&quot;$&#123;Jarnname&#125;&quot;, &quot;$&#123;Host&#125;&quot;, &quot;$&#123;ProJect&#125;&quot;)</span><br><span class="line">                        break</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，我们就不用每次都写一遍定义的方法内容了，只需调用其函数名即可。</p><p><mark>注意：</mark>上面只是我 Jenkinsfile 的一部分！</p><p>至此，Jenkins Pipeline 方法定义及调用已经完成。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
            <tag> Jenkins_Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Pipeline 配置钉钉消息通知</title>
      <link href="/posts/articles/7ede8fbb.html"/>
      <url>/posts/articles/7ede8fbb.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/2d697c8b26a7d91dc044f623e7f80f4a.jpeg" alt="2d697c8b26a7d91dc044f623e7f80f4a"></p><p><font color="Brown"><strong>Author</strong>：rab</font> <font color="Brown"><strong>Date</strong>：2022&#x2F;07&#x2F;08</font> <font color="Brown"><strong>Blog</strong>：<a href="https://blog.csdn.net/IT_ZRS?type=blog"><font color="Brown">https://blog.csdn.net/IT_ZRS?type&#x3D;blog</font></a></font></p><p><strong>Jenkins 版本</strong>：2.341</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有这样一个需求，在编写 Jenkinsfile 脚本中，需配置钉钉告警功能，里面涉及到的相关告警信息中，需包含构建人，即哪个该项目是由哪个人进行构建的，构建成功后相关的构建信息会以钉钉消息的形式通知。</p><p>功能实现：</p><ul><li>构建编号；</li><li>构建列表；</li><li>构建分支；</li><li>构建环境；</li><li>构建状态；</li><li>项目地址；</li><li>构建日志；</li><li>构建后启动状态；</li><li>执行人；</li><li>构建持续时间。</li></ul><h2 id="一、安装插件"><a href="#一、安装插件" class="headerlink" title="一、安装插件"></a>一、安装插件</h2><h3 id="1-1-build-user-vars-plugin"><a href="#1-1-build-user-vars-plugin" class="headerlink" title="1.1 build user vars plugin"></a>1.1 build user vars plugin</h3><p>如果需要获取项目构建的人信息，需要安装 <code>build user vars plugin</code> 插件，否在获取变量值的时为 <code>Null</code>，下图我已经安装了，大家在搜索框搜索安装即可。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/plugin.png" alt="plugin"></p><h3 id="1-2-Ding-Talk"><a href="#1-2-Ding-Talk" class="headerlink" title="1.2 Ding Talk"></a>1.2 Ding Talk</h3><p>这里还需要安装钉钉插件 <code>Ding Talk</code>，这后面会在 <code>Jenkins 系统配置</code>中进行相关配置。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220708101206429.png" alt="image-20220708101206429"></p><h2 id="二、配置钉钉告警"><a href="#二、配置钉钉告警" class="headerlink" title="二、配置钉钉告警"></a>二、配置钉钉告警</h2><h3 id="2-1-钉钉添加机器人"><a href="#2-1-钉钉添加机器人" class="headerlink" title="2.1 钉钉添加机器人"></a>2.1 钉钉添加机器人</h3><p><strong>1、进入你对应的相关群聊</strong></p><blockquote><p>点击右上角的设置图标；</p><p>下图是我已经配置过钉钉了。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220708102604257.png" alt="image-20220708102604257"></p><p><strong>2、点击<code>智能群助手</code></strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220708102736255.png" alt="image-20220708102736255"></p><p><strong>3、点击<code>添加机器人</code></strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220708103008728.png" alt="image-20220708103008728"></p><p>这时会跳到这个页面：继续点击<code>添加机器人</code></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220708103218129.png" alt="image-20220708103218129"></p><p><strong>4、选择<code>自定义</code></strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220708103341118.png" alt="image-20220708103341118"></p><p><strong>5、完成相关填写即可</strong></p><blockquote><p>不清楚的可以点击图片上的<code>说明问文档</code></p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220708103446648.png" alt="image-20220708103446648"></p><p>此时会生成 <code>webhook</code> 口令！你也可以点击对应的机器人获取：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220708103943044.png" alt="image-20220708103943044"></p><h3 id="2-2-Jenkins-系统配置"><a href="#2-2-Jenkins-系统配置" class="headerlink" title="2.2 Jenkins 系统配置"></a>2.2 Jenkins 系统配置</h3><p><strong>1、进入系统配置</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220708102301654.png" alt="image-20220708102301654"></p><p><strong>2、找到钉钉模块</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220708102207159.png" alt="image-20220708102207159"></p><h2 id="三、编写-Jenkinsfile"><a href="#三、编写-Jenkinsfile" class="headerlink" title="三、编写 Jenkinsfile"></a>三、编写 Jenkinsfile</h2><p>以上配置均完成后，接下来就是在 <code>jenkinsfile</code> 中配置了。</p><p>构建后通知配置于 <code>pipeline &#123;&#125;</code> 中，与 <code>stages &#123;&#125;</code> 同级，下面是具体的模板信息，这里我只设置了<code>成功</code>、<code>失败</code>两种情况，当然还有其他情况，大家根据实际情况配置即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">stages &#123;</span><br><span class="line">// 流水线阶段/步骤</span><br><span class="line">&#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        success &#123;</span><br><span class="line">            wrap([$class: &#x27;BuildUser&#x27;]) &#123;</span><br><span class="line">                dingtalk(</span><br><span class="line">                    robot: &#x27;Jenkins-Dingtalk&#x27;,</span><br><span class="line">                    type: &#x27;MARKDOWN&#x27;,</span><br><span class="line">                    title: &quot;success: $&#123;JOB&#125;&quot;,</span><br><span class="line">                    text: [&quot;### 项目信息&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;- 项目主体: CheckCheck&quot;,</span><br><span class="line">                        &quot;- 子项目: 斗地主&quot;,</span><br><span class="line">                        &quot;![ddz](https://xxx.com/img/puk.jpeg)&quot;,</span><br><span class="line">                        &quot;&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;### 构建信息&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;- 构建编号: &lt;font color=#008000&gt;$&#123;BUILD_ID&#125;&lt;/font&gt;&quot;,</span><br><span class="line">                        &quot;- 构建列表: $&#123;JOB&#125;&quot;,</span><br><span class="line">                        &quot;- 构建分支: $&#123;BRANCH_TAG&#125;&quot;,</span><br><span class="line">                        &quot;- 构建环境: $&#123;ENV&#125;&quot;,</span><br><span class="line">                        &quot;- 构建状态: **&lt;font color=#008000&gt;$&#123;currentBuild.result&#125;&lt;/font&gt;**&quot;,</span><br><span class="line">                        &quot;- 项目地址: $&#123;BUILD_URL&#125;&quot;,</span><br><span class="line">                        &quot;- 构建日志: $&#123;BUILD_URL&#125;console&quot;,</span><br><span class="line">                        &quot;&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;### 是否启动&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;- 构建后启动: $&#123;START&#125;&quot;,</span><br><span class="line">                        &quot;&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;### 执行人&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;- $&#123;env.BUILD_USER&#125;&quot;,</span><br><span class="line">                        &quot;&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;### 持续时间&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;- $&#123;currentBuild.durationString&#125;&quot;,</span><br><span class="line">                        &quot;&quot;,</span><br><span class="line">                        &#x27;---&#x27;]</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            wrap([$class: &#x27;BuildUser&#x27;]) &#123;</span><br><span class="line">                dingtalk(</span><br><span class="line">                    robot: &#x27;Jenkins-Dingtalk&#x27;,</span><br><span class="line">                    type: &#x27;MARKDOWN&#x27;,</span><br><span class="line">                    title: &quot;failure: $&#123;JOB&#125;&quot;,</span><br><span class="line">                    text: [&quot;### 项目信息&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;- 项目主体: CheckCheck&quot;,</span><br><span class="line">                        &quot;- 子项目: 斗地主&quot;,</span><br><span class="line">                        &quot;![ddz](https://xxx.com/img/puk.jpeg)&quot;,</span><br><span class="line">                        &quot;&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;### 构建信息&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;- 构建编号: &lt;font color=#dd3238&gt;$&#123;BUILD_ID&#125;&lt;/font&gt;&quot;,</span><br><span class="line">                        &quot;- 构建列表: $&#123;JOB&#125;&quot;,</span><br><span class="line">                        &quot;- 构建分支: $&#123;BRANCH_TAG&#125;&quot;,</span><br><span class="line">                        &quot;- 构建环境: $&#123;ENV&#125;&quot;,</span><br><span class="line">                        &quot;- 构建状态: **&lt;font color=#dd3238&gt;$&#123;currentBuild.result&#125;&lt;/font&gt;**&quot;,</span><br><span class="line">                        &quot;- 项目地址: $&#123;BUILD_URL&#125;&quot;,</span><br><span class="line">                        &quot;- 构建日志: $&#123;BUILD_URL&#125;console&quot;,</span><br><span class="line">                        &quot;&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;### 是否启动&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;- 构建后启动: $&#123;START&#125;&quot;,</span><br><span class="line">                        &quot;&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;### 执行人&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;- $&#123;env.BUILD_USER&#125;&quot;,</span><br><span class="line">                        &quot;&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;### 持续时间&quot;,</span><br><span class="line">                        &#x27;---&#x27;,</span><br><span class="line">                        &quot;- $&#123;currentBuild.durationString&#125;&quot;,</span><br><span class="line">                        &quot;&quot;,</span><br><span class="line">                        &#x27;---&#x27;]</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写 <code>jenkinsfile</code> 需注意的几个问题：</p><ul><li>变量：需确保你定义的变量有效；</li><li>钉钉配置：robot: ‘Jenkins-Dingtalk’  这个值必须为 <code>2.2 小结</code> 中系统配置定义的机器人 ID，因为钉钉的 webhook 是配置在 Jenkins 系统上的，否则你的 jenkinsfile 是无法连接或找到钉钉的。</li></ul><h2 id="四、钉钉告警验证"><a href="#四、钉钉告警验证" class="headerlink" title="四、钉钉告警验证"></a>四、钉钉告警验证</h2><p>配完成后，就可以进行构建操作，不管成功或失败，都会接收到告警信息。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220708105131153.png" alt="image-20220708105131153"></p><p><mark>至此，Jenkins pipeline 配置钉钉消息通知已经完成！</mark></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
            <tag> Jenkins_Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 实现 Gitlab API 调用及共享库应用</title>
      <link href="/posts/articles/c2464361.html"/>
      <url>/posts/articles/c2464361.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/original.webp" alt="original"></p><p><font color="Brown"><strong>Author</strong>：rab</font><br><strong>Gitlab 版本</strong>：15.1.2<br><strong>Jenkins 版本</strong>：2.332.3</p><p><a href="https://www.jenkins.io/doc/">Jenkins 官方文档</a><br><a href="https://docs.gitlab.com/">Gitlab 官方文档</a></p><hr><p>我们可通过 <code>Branches API</code> 接口来创建分支，先进行接口调试，调试完成后以 Jenkins Pipeline 的方式执行，并最终通过进一步优化实现 Jenkins 共享库构建效果。</p><h2 id="一、Branches-API"><a href="#一、Branches-API" class="headerlink" title="一、Branches API"></a>一、Branches API</h2><h3 id="1-1-获取接口地址"><a href="#1-1-获取接口地址" class="headerlink" title="1.1 获取接口地址"></a>1.1 获取接口地址</h3><p>此时，就可以根据官方接口文档，获取如下创建分支的接口地址。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220720212457723.png" alt="image-20220720212457723"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --request POST --header &quot;PRIVATE-TOKEN: &lt;your_access_token&gt;&quot; &quot;https://gitlab.example.com/api/v4/projects/5/repository/branches?branch=newbranch&amp;ref=main&quot;</span><br></pre></td></tr></table></figure><h3 id="1-2-创建-Token"><a href="#1-2-创建-Token" class="headerlink" title="1.2 创建 Token"></a>1.2 创建 Token</h3><p>然后在 Gitlab 上创建 Token，操作步骤如下图：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220720210637927.png" alt="image-20220720210637927"></p><blockquote><p>创建完成后会生成一个 Token，复制到接口地址</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220720211017865.png" alt="image-20220720211017865"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl --request POST --header &quot;PRIVATE-TOKEN: DxVUpBnVmg4NUNfBdyxx&quot; &quot;https://192.168.56.133/api/v4/projects/5/repository/branches?branch=newbranch&amp;ref=main&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个toke与上图不符，是因为上图的toke被我删了，然后这是我重新创建的token</span></span><br></pre></td></tr></table></figure><ul><li>接口地址中 <code>/projects/5</code> 就是 Gitlab 的项目 ID，如果你要对下图项目做相关操作，应修改为 <code>/projects/3</code>；</li><li>newbranch 表示你要创建的分支名称（自定义）；</li><li>main 表示你以哪个分支为基础来创建新分支。</li></ul><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220720211901227.png" alt="image-20220720211901227"></p><p>所以最终地址为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl --request POST --header &quot;PRIVATE-TOKEN: DxVUpBnVmg4NUNfBdyxx&quot; &quot;https://192.168.56.133/api/v4/projects/3/repository/branches?branch=rab_test&amp;ref=main&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我定义了一个名为rab_test的新分支，且以main分支为基础进行创建</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你的Gitlab没有开启443认证，那需要把https---&gt;http</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl --request POST --header <span class="string">&quot;PRIVATE-TOKEN: DxVUpBnVmg4NUNfBdyxx&quot;</span> <span class="string">&quot;http://192.168.56.133/api/v4/projects/3/repository/branches?branch=rab_test&amp;ref=main&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="1-3-接口调试"><a href="#1-3-接口调试" class="headerlink" title="1.3 接口调试"></a>1.3 接口调试</h3><h4 id="1-3-1-shell-终端调试"><a href="#1-3-1-shell-终端调试" class="headerlink" title="1.3.1 shell 终端调试"></a>1.3.1 shell 终端调试</h4><p>此时，你在任意 <code>shell 终端</code>进行调试，最终看是否生成预期分支，这里我就在 <code>Jenkins</code> 服务器上执行上述接口地址。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220720213450615.png" alt="image-20220720213450615"></p><p>看样子是没什么问题，然后到 Gitlab 上看看有没有创建指定的分支。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220720213716467.png" alt="image-20220720213716467"></p><p>看到上图结果，完全是没问题的，说明调试已经调通了。</p><h4 id="1-3-2-Postman-调试"><a href="#1-3-2-Postman-调试" class="headerlink" title="1.3.2 Postman 调试"></a>1.3.2 Postman 调试</h4><p>1、新建 POST 请求</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220720215246034.png" alt="image-20220720215246034"></p><p>2、请求头添加 Token 信息（k-v）</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220720215715183.png" alt="image-20220720215715183"></p><p>3、配置好后点击 Send</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220720220019813.png" alt="image-20220720220019813"></p><p>4、Gitlab 查看结果</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220720215923496.png" alt="image-20220720215923496"></p><p>也是能够成功构建的。</p><p>postman 有一个好处就是，可以根据你的接口地址生成对应的语言片段，入下图，生成 cURL 格式的片段：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220721074130645.png" alt="image-20220721074130645"></p><p>当然，它还支持其他语言片段，如 python、Java等</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220721074618259.png" alt="image-20220721074618259"></p><h3 id="1-4-Pipeline-实现"><a href="#1-4-Pipeline-实现" class="headerlink" title="1.4 Pipeline 实现"></a>1.4 Pipeline 实现</h3><p>以上接口都调通后，接下来就可以通过 Jenkins 流水线来实现了，写一个简单的案例，创建分支<code>rab_test-2</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">stages &#123;</span><br><span class="line">stage(&quot;create branch&quot;)&#123;</span><br><span class="line">steps&#123;</span><br><span class="line">// 复制刚刚postman调通的接口地址</span><br><span class="line">sh &quot;&quot;&quot;</span><br><span class="line">curl --location --request POST \</span><br><span class="line">&quot;http://192.168.56.133/api/v4/projects/3/repository/branches?branch=rab_test-2&amp;ref=main&quot; \</span><br><span class="line">--header &quot;PRIVATE-TOKEN: DxVUpBnVmg4NUNfBdyxx&quot;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行 Jenkins 构建操作，如图构建成功。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220720221858742.png" alt="image-20220720221858742"></p><p>接下来去 Gitlab 上看看是否生成新的分支。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220720222025108.png" alt="image-20220720222025108"></p><p>完全没问题，由于我的分支在 Pipeline 脚本中写死了，后面你可以自己优化一下，比如传递一些参数进行动态创建。</p><h2 id="二、优化-Pipeline"><a href="#二、优化-Pipeline" class="headerlink" title="二、优化 Pipeline"></a>二、优化 Pipeline</h2><p>你会发现，上面的 Pipeline 脚本的接口都是写死的，也就是说如果你想修改相关参数值的话，需要进入脚本中修改，比较麻烦，因此我们再次进行优化。</p><h3 id="2-1-参数化构建"><a href="#2-1-参数化构建" class="headerlink" title="2.1 参数化构建"></a>2.1 参数化构建</h3><p>实现功能：使用者可以灵活自定义新分支名、基础分支，而不需要再次进入修改 Pipeline 脚本，只需要传递参数即可值。</p><p>1、配置参数化配置</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722160509602.png" alt="image-20220722160509602"></p><p>最终效果如下图：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722161159292.png" alt="image-20220722161159292"></p><p>2、修改 Pipeline 脚本</p><p>上述参数定义好后，接下来就需要把参数名写进 Pipeline 脚本对应位置，实现参数传递。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">stages &#123;</span><br><span class="line">stage(&quot;create branch&quot;)&#123;</span><br><span class="line">steps&#123;</span><br><span class="line">// 复制刚刚postman调通的接口地址</span><br><span class="line">sh &quot;&quot;&quot;</span><br><span class="line">curl --location --request POST \</span><br><span class="line">&quot;http://192.168.56.133/api/v4/projects/3/repository/branches?branch=$&#123;env.NewBranchName&#125;&amp;ref=$&#123;env.BaseBranchName&#125;&quot; \</span><br><span class="line">--header &quot;PRIVATE-TOKEN: DxVUpBnVmg4NUNfBdyxx&quot;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、构建验证</p><ul><li><p>Jenkins 构建</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722163726215.png" alt="image-20220722163726215"></p></li><li><p>Gitlab 查看是否创建成功</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722163829870.png" alt="image-20220722163829870"></p></li></ul><h3 id="2-2-Token-加密"><a href="#2-2-Token-加密" class="headerlink" title="2.2 Token 加密"></a>2.2 Token 加密</h3><p>上面的 Token 是以明文形式传输传输的，并不安全，我们需要用到凭证方式来代替明文方式。</p><p>1、在安全设置中找到管理凭据</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722164231089.png" alt="image-20220722164231089"></p><p>2、具体配置</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722164704419.png" alt="image-20220722164704419"></p><p>3、通过 Jenkins 自带的<code>片段生成器</code>来生成相关片段语句</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722165500385.png" alt="image-20220722165500385"></p><p>4、修改 Pipeline 脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">stages &#123;</span><br><span class="line">stage(&quot;Create Branch&quot;)&#123;</span><br><span class="line">steps&#123;</span><br><span class="line">script&#123;</span><br><span class="line">withCredentials([string(credentialsId: &#x27;gitlab-create-branch&#x27;, variable: &#x27;Gitlab_Token&#x27;)]) &#123;</span><br><span class="line">// 创建分支</span><br><span class="line">sh &quot;&quot;&quot;</span><br><span class="line">curl --location --request POST \</span><br><span class="line">&quot;http://192.168.56.133/api/v4/projects/3/repository/branches?branch=$&#123;env.NewBranchName&#125;&amp;ref=$&#123;env.BaseBranchName&#125;&quot; \</span><br><span class="line">--header &quot;PRIVATE-TOKEN: $&#123;Gitlab_Token&#125;&quot;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、构建验证</p><ul><li><p>Jenkins 构建</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722170212203.png" alt="image-20220722170212203"></p></li><li><p>Gitlab 查看是否创建成功</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722170244315.png" alt="image-20220722170244315"></p></li></ul><h3 id="2-3-定义函数（方法）"><a href="#2-3-定义函数（方法）" class="headerlink" title="2.3 定义函数（方法）"></a>2.3 定义函数（方法）</h3><p>函数的作用在于更加灵活的传递参数、减少书写代码量。</p><p>1、定义函数</p><blockquote><p>注意：函数体的参数名要和定义函数中的参数保持一致</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 创建分支</span><br><span class="line">def CreateBranch(ProjectID, NewBranchName, BaseBranchName) &#123;</span><br><span class="line">withCredentials([string(credentialsId: &#x27;gitlab-create-branch&#x27;, variable: &#x27;Gitlab_Token&#x27;)]) &#123;</span><br><span class="line">sh &quot;&quot;&quot;</span><br><span class="line">curl --location --request POST \</span><br><span class="line">&quot;http://192.168.56.133/api/v4/projects/$&#123;ProjectID&#125;/repository/branches?branch=$&#123;NewBranchName&#125;&amp;ref=$&#123;BaseBranchName&#125;&quot; \</span><br><span class="line">--header &quot;PRIVATE-TOKEN: $&#123;Gitlab_Token&#125;&quot;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 流水线（主）</span><br><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">stages &#123;</span><br><span class="line">stage(&quot;Create Branch&quot;) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">script &#123;</span><br><span class="line">ProjectID = 3</span><br><span class="line">// 调用函数时，如果定义的参数类型为字符串时需夹双引号，为数字时则不需要</span><br><span class="line">CreateBranch(ProjectID, &quot;$&#123;env.NewBranchName&#125;&quot;, &quot;$&#123;BaseBranchName&#125;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、构建验证</p><ul><li><p>Jenkins 构建</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722171720258.png" alt="image-20220722171720258"></p></li><li><p>Gitlab 查看是否创建成功</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722171903832.png" alt="image-20220722171903832"></p></li></ul><p>到这里，Gitlab 的工程 ID 还是被写死的，因此我们需要通过 Gitlab 的项目名动态获取 Gitlab 项目对应的 ID 值，这也需要调用 Gitlab 的相关接口，如下图。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722174810022.png" alt="image-20220722174810022"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl --header &quot;PRIVATE-TOKEN: &lt;your_access_token&gt;&quot; &quot;https://gitlab.example.com/api/v4/projects?search=test&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PRIVATE-TOKEN：Token值</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">test</span>：表示你要填入的项目名称</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改一下</span></span><br><span class="line">curl --header &quot;PRIVATE-TOKEN: DxVUpBnVmg4NUNfBdyxx&quot; &quot;http://192.168.56.133/api/v4/projects?search=Tq&quot;</span><br></pre></td></tr></table></figure><blockquote><p>现在命令行测试一下，看看该接口返回的结果；</p><p>可看到，已经返回了 Gitlab 中 Tq 项目的 id 值了，说明该接口可用。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722175431433.png" alt="image-20220722175431433"></p><blockquote><p>Postman 上更直观一点</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722180306186.png" alt="image-20220722180306186"></p><p>3、再次优化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// 请求地址</span><br><span class="line">def HttpReq(ApiUrl, Method) &#123;</span><br><span class="line">GitlabAPI = &quot;http://192.168.56.133/api/v4&quot;</span><br><span class="line">withCredentials([string(credentialsId: &#x27;gitlab-create-branch&#x27;, variable: &#x27;Gitlab_Token&#x27;)]) &#123;</span><br><span class="line">response = sh returnStdout: true, script: &quot;&quot;&quot;</span><br><span class="line">curl --location --request $&#123;Method&#125; \</span><br><span class="line">&quot;$&#123;GitlabAPI&#125;/$&#123;ApiUrl&#125;&quot; \</span><br><span class="line">--header &quot;PRIVATE-TOKEN: $&#123;Gitlab_Token&#125;&quot;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">return response</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建分支</span><br><span class="line">def CreateBranch(ProjectID, NewBranchName, BaseBranchName) &#123;</span><br><span class="line">ApiUrl = &quot;projects/$&#123;ProjectID&#125;/repository/branches?branch=$&#123;NewBranchName&#125;&amp;ref=$&#123;BaseBranchName&#125;&quot;</span><br><span class="line">Method = &quot;POST&quot;</span><br><span class="line">HttpReq(ApiUrl, Method)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取项目ID</span><br><span class="line">def GetProjectID(ProjectName) &#123;</span><br><span class="line">ApiUrl = &quot;projects?search=$&#123;ProjectName&#125;&quot;</span><br><span class="line">Method = &quot;GET&quot;</span><br><span class="line">result = HttpReq(ApiUrl, Method)</span><br><span class="line">result = readJSON text: result</span><br><span class="line">return result[0][&quot;id&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 流水线（主）</span><br><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">stages &#123;</span><br><span class="line">stage(&quot;Create Branch&quot;) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">script &#123;</span><br><span class="line">ProjectID = GetProjectID(&quot;$&#123;ProjectName&#125;&quot;)</span><br><span class="line">CreateBranch(ProjectID, &quot;$&#123;env.NewBranchName&#125;&quot;, &quot;$&#123;BaseBranchName&#125;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>进行构建</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723141300754.png" alt="image-20220723141300754"></p></li><li><p>Gitlab 上查看是否生成</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723145203412.png" alt="image-20220723145203412"></p></li></ul><p>=&#x3D;注意：如果你使用了 <code>readJSON</code> JSON 解析，那你需要安装如下插件，否则报错。&#x3D;&#x3D;</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723144954347.png" alt="image-20220723144954347"></p><p>&#x3D;&#x3D;错误现象：提示没有 readJDSON 这个方法，这种报错类型一般是缺少插件导致的，安装对应插件即可。&#x3D;&#x3D;</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723145457812.png" alt="image-20220723145457812"></p><h2 id="三、共享库"><a href="#三、共享库" class="headerlink" title="三、共享库"></a>三、共享库</h2><p>上面已经做了相关优化了，但是在生产环境中的代码量远比上面多，而且定义的函数也会越来越多，因此，我们就需要使用 Jenkins 的共享库，共享库的作用是将具备同样性质或很少改动的函数（方法）归档于 Git 仓库管理，并在 Jenkinsfile 中调用（引用）的手段，这将大大减少 Pipeline 代码量。</p><h3 id="3-1-创建共享库"><a href="#3-1-创建共享库" class="headerlink" title="3.1 创建共享库"></a>3.1 创建共享库</h3><p>1、创建项目仓库</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723150155668.png" alt="image-20220723150155668"></p><p>2、添加目录&#x2F;文件</p><ul><li>点击 <code>Web IDE</code></li></ul><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723151049250.png" alt="image-20220723151049250"></p><ul><li><p>创建目录</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723150944708.png" alt="image-20220723150944708"></p></li><li><p>添加文件</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723152123651.png"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723152250816.png" alt="image-20220723152250816"></p></li></ul><p>3、将定义好的方法提交到代码仓库</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723152849499.png" alt="image-20220723152849499"></p><h3 id="3-2-加载共享库"><a href="#3-2-加载共享库" class="headerlink" title="3.2 加载共享库"></a>3.2 加载共享库</h3><p>1、流水线脚本加载共享库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 加载共享库，其中jenkinslib要与Jenkins系统配置中保持一致（jenkinslib可自定义），@amin表示共享库所在分支</span><br><span class="line">@Library(&quot;jenkinslib@main&quot;) _</span><br><span class="line">// 导入jenkinsfile.groovy。这里要注意：下面的jenkinsfile()名字必须与你共享库中jenkinsfile.groovy名一致，否则报错</span><br><span class="line">def myjenkinsfile = new org.devops.jenkinsfile()</span><br><span class="line"></span><br><span class="line">// 流水线（主）</span><br><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">tools &#123;</span><br><span class="line">git &#x27;git&#x27;</span><br><span class="line">&#125;</span><br><span class="line">stages &#123;</span><br><span class="line">stage(&quot;Create Branch&quot;) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">script &#123;</span><br><span class="line">// 然后就可以调用共享库中的方法了 myjenkinsfile 即为我上面引用的方法（可在上面自定义）</span><br><span class="line">ProjectID = myjenkinsfile.GetProjectID(&quot;$&#123;env.ProjectName&#125;&quot;)</span><br><span class="line">myjenkinsfile.CreateBranch(ProjectID, &quot;$&#123;env.NewBranchName&#125;&quot;, &quot;$&#123;env.BaseBranchName&#125;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、同样将流水线脚本也进行 Git 版本管理</p><blockquote><p>这样的话便于管理 Jenkinfile 及共享库</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723153913871.png" alt="image-20220723153913871"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723162121271.png" alt="image-20220723162121271"></p><h3 id="3-3-Jenkins-配置"><a href="#3-3-Jenkins-配置" class="headerlink" title="3.3 Jenkins 配置"></a>3.3 Jenkins 配置</h3><p>1、Jenkins 流水线配置</p><p>因为我们的流水线脚本进行了 Git 版本管理，所以你可以在 Jenkins 流水线配置中配置 URL 即可。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723155806926.png" alt="image-20220723155806926"></p><p>2、Jenkins 系统配置</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723161609360.png" alt="image-20220723161609360"></p><h3 id="3-4-Jenkins-构建"><a href="#3-4-Jenkins-构建" class="headerlink" title="3.4 Jenkins 构建"></a>3.4 Jenkins 构建</h3><p>以上都配置好之后，接下来就开始构建了。</p><p>1、Jenkins 构建</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723190934794.png" alt="image-20220723190934794"></p><p>2、Gitlab 查看是否构建成功</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723190856525.png" alt="image-20220723190856525"></p><p><mark>至此，已实现 Jenkins 如何调用 Gitlab API 及 Jenkins 共享库的最终应用。</mark></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
            <tag> Jenkins_Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Pipeline 密钥远程部署</title>
      <link href="/posts/articles/7e46479a.html"/>
      <url>/posts/articles/7e46479a.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/pipeline.png" alt="pipeline"></p><p><strong>Jenkins 版本</strong>：Jenkins 2.341</p><hr><h2 id="一、配置流程"><a href="#一、配置流程" class="headerlink" title="一、配置流程"></a>一、配置流程</h2><h3 id="1-1-片段生成"><a href="#1-1-片段生成" class="headerlink" title="1.1 片段生成"></a>1.1 片段生成</h3><p>1、按如下图选择</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220719122921121.png" alt="image-20220719122921121"></p><p>2、新增密钥信息</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220719133057946.png" alt="image-20220719133057946"></p><h3 id="1-2-脚本配置"><a href="#1-2-脚本配置" class="headerlink" title="1.2 脚本配置"></a>1.2 脚本配置</h3><p>以上配置完成后，接下来就可以在 Jenkinsfile 中配置了，具体配置如下图：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220719064524167.png" alt="image-20220719064524167"></p><p>:warning:注意：使用密钥形式的推送方式，<code>sshPut</code>、<code>sshCommand</code> 等相关命令必须放到 <code>remote.*</code> 下，否则报如下错误：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220718221941424.png" alt="image-20220718221941424"></p><p>与 <code>withCredentials.usernamePassword</code> 方式不同的是，<code>withCredentials.usernamePassword</code> 则可以紧跟 <code>remote.*</code> ，也可以不紧跟，具体如下：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220719071358730.png" alt="image-20220719071358730"></p><h2 id="二、小结"><a href="#二、小结" class="headerlink" title="二、小结"></a>二、小结</h2><p>为了服务器账户安全，jenkins 远程部署时可使用<code>withCredentials()</code> 方法来实现密码加密，常用的有<code>用户名/密码</code>方式、<code>SSH 用户密钥对</code> 方式来实现，当然还有其他方式，图下图所示：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220719133812902.png" alt="image-20220719133812902"></p><p>但要注意的一点是，<code>用户名/密码</code>方式和<code>SSH 用户密钥对</code> 方式在 Jenkinsfile 脚本结构上有一点小区别：</p><ul><li><p><code>SSH 用户密钥对</code> 方式：<code>sshPut</code>、<code>sshCommand</code> 等相关命令必须紧跟 <code>remote.*</code></p></li><li><p><code>用户名/密码</code>方式：<code>sshPut</code>、<code>sshCommand</code> 等相关命令可以紧跟 <code>remote.*</code>，也可以不紧跟。</p></li></ul><p><mark>至此，Jenkins Pipeline 密钥远程部署已经配置完成！</mark></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
            <tag> Jenkins_Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 数据迁移</title>
      <link href="/posts/articles/5515f74f.html"/>
      <url>/posts/articles/5515f74f.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/jenkins-logo.webp" alt="jenkins-logo"></p><p><font color=Brown><strong>Author</strong>：rab</font><br><font color=Brown><strong>Date</strong>：2022&#x2F;07&#x2F;22</font><br><font color=Brown><strong>Blog</strong>：<a href="https://blog.csdn.net/IT_ZRS?type=blog"><font color=Brown>https://blog.csdn.net/IT_ZRS?type&#x3D;blog</font></a></font></p><p><strong>Jenkins Version</strong>：2.341</p><hr><h2 id="一、迁移目的"><a href="#一、迁移目的" class="headerlink" title="一、迁移目的"></a>一、迁移目的</h2><p>由于 Jenkins 部署初期磁盘规划问题（数据目录部署到了系统盘），导致服务器磁盘（系统盘）吃紧，现对 Jenkins 数据目录进行更改迁移（变更），具体如下。</p><table><thead><tr><th>迁移目录</th><th>文件详情</th><th>部署方式</th><th>磁盘容量</th><th>服务版本</th></tr></thead><tbody><tr><td>原始数据</td><td>&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;jenkins-data</td><td>Docker</td><td>（&#x2F;）50G    Used：82%</td><td>Jenkins：2.341</td></tr><tr><td>目标数据</td><td>&#x2F;home&#x2F;www&#x2F;jenkins-data</td><td>Docker</td><td>（&#x2F;home&#x2F;www）100G    Used：61%</td><td>Jenkins：2.341</td></tr></tbody></table><h2 id="二、迁移步骤"><a href="#二、迁移步骤" class="headerlink" title="二、迁移步骤"></a>二、迁移步骤</h2><h3 id="2-1-方案-1（推荐）"><a href="#2-1-方案-1（推荐）" class="headerlink" title="2.1 方案 1（推荐）"></a>2.1 方案 1（推荐）</h3><blockquote><p>以软（符号）链接的方式迁移数据目录；</p><p>本次采用的就是该方案进行的数据迁移。</p></blockquote><p>1、停止当前 Jenkins 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop elastic_lalande</span><br></pre></td></tr></table></figure><p>2、移动 Jenkins 数据目录至新目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /var/lib/docker/volumes/jenkins-data /home/www/jenkins-data</span><br></pre></td></tr></table></figure><p>3、对移动后的数据目录做软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /home/www/jenkins-data /var/lib/docker/volumes/jenkins-data </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这样做的好处在于，你不用重新运行新容器，对你之前的jenkinsfile文件也无需改动。</span></span><br></pre></td></tr></table></figure><p>4、启动 Jenkins</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker start elastic_lalande</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后查看日志是否启动有报错（没有明显的error信息就代表启动成功）</span></span><br><span class="line">docker logs -f elastic_lalande</span><br><span class="line">....</span><br></pre></td></tr></table></figure><blockquote><p>最后在确认一下相关端口是否正常监听。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722133403078.png" alt="image-20220722133403078"></p><h3 id="2-2-方案-2"><a href="#2-2-方案-2" class="headerlink" title="2.2 方案 2"></a>2.2 方案 2</h3><blockquote><p>以重新运行新容器方式迁移</p></blockquote><p>1、保存当前容器为新镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit elastic_lalande jenkins:2022.07.22</span><br></pre></td></tr></table></figure><p>2、停止原始 Jenkins 容器</p><blockquote><p>先 stop 关闭容器，不要 rm -v，便于新容器无法启动（运行）时再次启用原始 Jenkins</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop elastic_lalande</span><br></pre></td></tr></table></figure><p>3、拷贝原始数据至目标路径</p><blockquote><p>原始数据保持不变，便于失败后回滚</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp -rfp /var/lib/docker/volumes/jenkins-data /home/www/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果原本你的服务器磁盘空间就不够，可以直接<span class="built_in">mv</span>，若后续需要回滚，再<span class="built_in">mv</span>回来即可（这不影响）</span></span><br><span class="line">mv /var/lib/docker/volumes/jenkins-data /home/www/</span><br></pre></td></tr></table></figure><p>4、启动新 Jenkins 容器（备选）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd \</span><br><span class="line">       --user root \</span><br><span class="line">       --privileged=true  \</span><br><span class="line">       --name=jenkins \</span><br><span class="line">       --restart=always \</span><br><span class="line">       -p 8888:8080 \</span><br><span class="line">       -p 50000:50000 \</span><br><span class="line">       -v /root:/home \</span><br><span class="line">       -v /home/www/jenkins-data:/var/jenkins_home \</span><br><span class="line">       -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">       -v /etc/localtime:/etc/localtime \</span><br><span class="line">       -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai jenkins:2022.07.22</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后查看日志是否启动有报错（没有明显的error信息就代表启动成功）</span></span><br><span class="line">docker logs -f Jenkins</span><br><span class="line">....</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后在确认一下相关端口是否正常监听</span></span><br></pre></td></tr></table></figure><h2 id="三、构建验证"><a href="#三、构建验证" class="headerlink" title="三、构建验证"></a>三、构建验证</h2><blockquote><p>启动无误后，就可以浏览器访问了，紧接着就是验证测试、生产环境的构建是否正常。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722132320403.png" alt="image-20220722132320403"></p><h3 id="3-1-测试环境"><a href="#3-1-测试环境" class="headerlink" title="3.1 测试环境"></a>3.1 测试环境</h3><p>1、台球</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722131158153.png" alt="image-20220722131158153"></p><p>2、麻将</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722130945462.png" alt="image-20220722130945462"></p><p>3、地主</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722130548988.png" alt="image-20220722130548988"></p><h3 id="3-2-生产环境"><a href="#3-2-生产环境" class="headerlink" title="3.2 生产环境"></a>3.2 生产环境</h3><p>1、台球</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722132003684.png" alt="image-20220722132003684"></p><p>2、麻将</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722132142832.png" alt="image-20220722132142832"></p><p>3、地主</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220722131802571.png" alt="image-20220722131802571"></p><p>以上测试没有异常，说明 Jenkins 功能没受任何影响，此时可通知相关开发人员使用了。</p><h2 id="四、数据清理"><a href="#四、数据清理" class="headerlink" title="四、数据清理"></a>四、数据清理</h2><blockquote><p>如果你采用的是软链接的方式，则跳过以下操作步骤。</p></blockquote><p>当目标容器运行正常时（功能、权限、数据等），就可清理旧数据释放存储空间了。</p><p>1、删除 Jenkins 原始挂载数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/docker/volumes/jenkins-data</span><br></pre></td></tr></table></figure><p>2、删除 Docker 容器即相关挂载数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -v elastic_lalande</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;至此，Jenkins 数据迁移完成！&#x3D;&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Active Choice Parameter 在 Jenkinsfile 中的应用</title>
      <link href="/posts/articles/1be7f41.html"/>
      <url>/posts/articles/1be7f41.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/js.jpeg" alt="js"></p><p>插件地址：</p><blockquote><p>插件地址：<a href="https://plugins.jenkins.io/uno-choice/">https://plugins.jenkins.io/uno-choice/</a></p><p>Github 地址：<a href="https://github.com/jenkinsci/active-choices-plugin">https://github.com/jenkinsci/active-choices-plugin</a></p></blockquote><hr><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>也许你可能有这样一个需求，在 Jenkins 构建时需要使用有单选、复选、及多值输入的场景，那你就可以使用 <code>Active Choice</code> 插件来实现。</p><h2 id="一、插件安装"><a href="#一、插件安装" class="headerlink" title="一、插件安装"></a>一、插件安装</h2><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022112938268.png" alt="image-20221022112938268"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022112857295.png" alt="image-20221022112857295"></p><h3 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h3><p>1、添加选项参数</p><blockquote><p>选择下图红框</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022142752156.png" alt="image-20221022142752156"></p><p>2、编写 Groovy Script</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022115716214.png" alt="image-20221022115716214"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">return [</span><br><span class="line">    &#x27;Sao Paulo&#x27;,</span><br><span class="line">    &#x27;Rio de Janeiro&#x27;,</span><br><span class="line">    &#x27;Parana&#x27;,</span><br><span class="line">    &#x27;Acre&#x27;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2、选择<code>选择类型</code></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022115007328.png" alt="image-20221022115007328"></p><p>3、效果展示</p><blockquote><p>当你选择多选时，可通过下图实现多选</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022115434378.png"></p><p>4、当选择不同的 user 时可进行动态更新</p><blockquote><p>再次新增一个 Active Choice Reactive 控件，上面的 UI 控件会触发下面的选项参数并动态更新</p><p>此时选项参数选择如下图红框</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022142942603.png" alt="image-20221022142942603"></p><p>&#x3D;&#x3D;配置&#x3D;&#x3D;：引用参数，实现自动更新。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022150006005.png" alt="image-20221022150006005"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (User == &quot;Sao Paulo&quot;) &#123;</span><br><span class="line">  return [&quot;Barretos&quot;, &quot;Sao Paulo&quot;, &quot;Itu&quot;]</span><br><span class="line">&#125; else if (User == &quot;Rio de Janeiro&quot;) &#123;</span><br><span class="line">  return [&quot;Rio de Janeiro&quot;, &quot;Mangaratiba&quot;]</span><br><span class="line">&#125; else if (User == &quot;Parana&quot;) &#123;</span><br><span class="line">  return [&quot;Curitiba&quot;, &quot;Ponta Grossa&quot;]</span><br><span class="line">&#125; else if (User == &quot;Acre&quot;) &#123;</span><br><span class="line">  return [&quot;Rio Branco&quot;, &quot;Acrelandia&quot;]</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  return [&quot;Unknown state&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、效果</p><blockquote><p>选择 User 时，会根据配置规则刷新 PerformShell。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022150121681.png" alt="image-20221022150121681"></p><h2 id="二、应用案例"><a href="#二、应用案例" class="headerlink" title="二、应用案例"></a>二、应用案例</h2><p>实现功能：通过选择不同的构建工具来构建不同的项目。</p><h3 id="2-1-直接配置"><a href="#2-1-直接配置" class="headerlink" title="2.1 直接配置"></a>2.1 直接配置</h3><blockquote><p>该方式不通过 <code>Pipeline</code> 脚本配置，直接进入你 Jenkins 的 Project 进行配置。</p></blockquote><p>1、添加选项参数</p><blockquote><p>选择下图红框</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022142752156.png" alt="image-20221022142752156"></p><p>2、编写 Groovy Script</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022114859335.png" alt="image-20221022114859335"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">return[</span><br><span class="line">  &quot;maven&quot;,</span><br><span class="line">  &quot;ant&quot;,</span><br><span class="line">  &quot;gradle&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3、效果</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022120838181.png" alt="image-20221022120838181"></p><p>4、当选择不同的 BuildType 时可进行动态更新</p><blockquote><p>再次新增一个 Active Choice Reactive 控件，上面的 UI 控件会触发下面的选项参数并动态更新</p><p>此时选项参数选择如下图红框</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022142942603.png" alt="image-20221022142942603"></p><p>5、配置</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022144341857.png" alt="image-20221022144341857"></p><p>&#x3D;&#x3D;Groovy 脚本&#x3D;&#x3D;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">if (BuildType == &quot;maven&quot;) &#123;</span><br><span class="line">  return [&quot;clean package&quot;]</span><br><span class="line">&#125; else if (BuildType == &quot;ant&quot;) &#123;</span><br><span class="line">  return [&quot;ant -buildfile build.xml&quot;]</span><br><span class="line">&#125; else if (BuildType == &quot;gradle&quot;) &#123;</span><br><span class="line">  return [&quot;gradle clean build&quot;]</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  return [&quot;Unknown state&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或下面的都一样的（任选其一即可）</span></span><br><span class="line"></span><br><span class="line">if (BuildType.equals (&quot;maven&quot;)) &#123;</span><br><span class="line">  return [&quot;clean package&quot;]</span><br><span class="line">&#125; else if (BuildType.equals (&quot;ant&quot;)) &#123;</span><br><span class="line">  return [&quot;ant -buildfile build.xml&quot;]</span><br><span class="line">&#125; else if (BuildType.equals (&quot;gradle&quot;)) &#123;</span><br><span class="line">  return [&quot;gradle clean build&quot;]</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  return [&quot;Unknown state&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、效果</p><p>选择 maven 类型时自动选择构建命令，而不需要手动点击 PerformShell 选项</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221022145422284.png" alt="image-20221022145422284"></p><h3 id="2-2-Jenkinsfile-配置"><a href="#2-2-Jenkinsfile-配置" class="headerlink" title="2.2 Jenkinsfile 配置"></a>2.2 Jenkinsfile 配置</h3><p><code>2.1 部分</code>是直接通过 web 界面设置，接下来我们可以通过 Pipeline 来自动化实现。附上一个参考模板样例：根据自身需求修改即可</p><h4 id="2-2-1-案例一"><a href="#2-2-1-案例一" class="headerlink" title="2.2.1 案例一"></a>2.2.1 案例一</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">properties([</span><br><span class="line">    parameters([</span><br><span class="line">        [<span class="attr">$class:</span> <span class="string">&#x27;ChoiceParameter&#x27;</span>, </span><br><span class="line">            <span class="symbol">choiceType:</span> <span class="string">&#x27;PT_SINGLE_SELECT&#x27;</span>, </span><br><span class="line">            <span class="symbol">description:</span> <span class="string">&#x27;Select the Env Name from the Dropdown List&#x27;</span>, </span><br><span class="line">            <span class="symbol">filterLength:</span> <span class="number">1</span>, </span><br><span class="line">            <span class="symbol">filterable:</span> <span class="literal">true</span>, </span><br><span class="line">            <span class="symbol">name:</span> <span class="string">&#x27;Env&#x27;</span>, </span><br><span class="line">            <span class="symbol">randomName:</span> <span class="string">&#x27;choice-parameter-5631314439613978&#x27;</span>, </span><br><span class="line">            <span class="symbol">script:</span> [</span><br><span class="line">                <span class="symbol">$class:</span> <span class="string">&#x27;GroovyScript&#x27;</span>, </span><br><span class="line">                <span class="symbol">fallbackScript:</span> [</span><br><span class="line">                    <span class="symbol">classpath:</span> [], </span><br><span class="line">                    <span class="symbol">sandbox:</span> <span class="literal">false</span>, </span><br><span class="line">                    <span class="symbol">script:</span> </span><br><span class="line">                        <span class="string">&#x27;return[\&#x27;Could not get Env\&#x27;]&#x27;</span></span><br><span class="line">                ], </span><br><span class="line">                <span class="symbol">script:</span> [</span><br><span class="line">                    <span class="symbol">classpath:</span> [], </span><br><span class="line">                    <span class="symbol">sandbox:</span> <span class="literal">false</span>, </span><br><span class="line">                    <span class="symbol">script:</span> </span><br><span class="line">                        <span class="string">&#x27;return[&quot;Dev&quot;,&quot;QA&quot;,&quot;Stage&quot;,&quot;Prod&quot;]&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ],</span><br><span class="line">        [<span class="attr">$class:</span> <span class="string">&#x27;CascadeChoiceParameter&#x27;</span>, </span><br><span class="line">            <span class="symbol">choiceType:</span> <span class="string">&#x27;PT_SINGLE_SELECT&#x27;</span>, </span><br><span class="line">            <span class="symbol">description:</span> <span class="string">&#x27;Select the Server from the Dropdown List&#x27;</span>, </span><br><span class="line">            <span class="symbol">filterLength:</span> <span class="number">1</span>, </span><br><span class="line">            <span class="symbol">filterable:</span> <span class="literal">true</span>, </span><br><span class="line">            <span class="symbol">name:</span> <span class="string">&#x27;Server&#x27;</span>, </span><br><span class="line">            <span class="symbol">randomName:</span> <span class="string">&#x27;choice-parameter-5631314456178619&#x27;</span>, </span><br><span class="line">            <span class="symbol">referencedParameters:</span> <span class="string">&#x27;Env&#x27;</span>,</span><br><span class="line">            <span class="symbol">script:</span> [</span><br><span class="line">                <span class="symbol">$class:</span> <span class="string">&#x27;GroovyScript&#x27;</span>, </span><br><span class="line">                <span class="symbol">fallbackScript:</span> [</span><br><span class="line">                    <span class="symbol">classpath:</span> [], </span><br><span class="line">                    <span class="symbol">sandbox:</span> <span class="literal">false</span>, </span><br><span class="line">                    <span class="symbol">script:</span> </span><br><span class="line">                        <span class="string">&#x27;return[\&#x27;Could not get Environment from Env Param\&#x27;]&#x27;</span></span><br><span class="line">                ], </span><br><span class="line">                <span class="symbol">script:</span> [</span><br><span class="line">                    <span class="symbol">classpath:</span> [], </span><br><span class="line">                    <span class="symbol">sandbox:</span> <span class="literal">false</span>, </span><br><span class="line">                    <span class="symbol">script:</span> </span><br><span class="line">                        <span class="string">&#x27;&#x27;&#x27;if (Env.equals(&quot;Dev&quot;)) &#123;</span></span><br><span class="line"><span class="string">  return[&quot;devaaa001&quot;,&quot;devaaa002&quot;,&quot;devbbb001&quot;,&quot;devbbb002&quot;,&quot;devccc001&quot;,&quot;devccc002&quot;]</span></span><br><span class="line"><span class="string">&#125; else if (Env.equals(&quot;QA&quot;)) &#123;</span></span><br><span class="line"><span class="string">  return[&quot;qaaaa001&quot;,&quot;qabbb002&quot;,&quot;qaccc003&quot;]</span></span><br><span class="line"><span class="string">&#125; else if (Env.equals(&quot;Stage&quot;)) &#123;</span></span><br><span class="line"><span class="string">  return[&quot;staaa001&quot;,&quot;stbbb002&quot;,&quot;stccc003&quot;]</span></span><br><span class="line"><span class="string">&#125; else if (Env.equals(&quot;Prod&quot;)) &#123;</span></span><br><span class="line"><span class="string">  return[&quot;praaa001&quot;,&quot;prbbb002&quot;,&quot;prccc003&quot;]</span></span><br><span class="line"><span class="string">&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    ])</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">  environment &#123;</span><br><span class="line">         vari = <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  agent any</span><br><span class="line">  stages &#123;</span><br><span class="line">      stage (<span class="string">&quot;Example&quot;</span>) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">         script&#123;</span><br><span class="line">          echo <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">          echo <span class="string">&quot;$&#123;params.Env&#125;&quot;</span></span><br><span class="line">          echo <span class="string">&quot;$&#123;params.Server&#125;&quot;</span></span><br><span class="line">          <span class="keyword">if</span> (params.Server.equals(<span class="string">&quot;Could not get Environment from Env Param&quot;</span>)) &#123;</span><br><span class="line">              echo <span class="string">&quot;Must be the first build after Pipeline deployment.  Aborting the build&quot;</span></span><br><span class="line">              currentBuild.result = <span class="string">&#x27;ABORTED&#x27;</span></span><br><span class="line">              <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">          echo <span class="string">&quot;Crossed param validation&quot;</span></span><br><span class="line">        &#125; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;构建结果：&#x3D;&#x3D;</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221023142918432.png" alt="image-20221023142918432"></p><h4 id="2-2-2-案例二"><a href="#2-2-2-案例二" class="headerlink" title="2.2.2 案例二"></a>2.2.2 案例二</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">properties([</span><br><span class="line">    parameters([</span><br><span class="line">        choice(<span class="attr">name:</span><span class="string">&quot;Select&quot;</span>,<span class="attr">choices:</span>[<span class="string">&#x27;yes&#x27;</span>,<span class="string">&#x27;no&#x27;</span>],<span class="attr">description:</span> <span class="string">&quot;⚠ 选择 yse 或 no ！&quot;</span>),</span><br><span class="line">        [<span class="attr">$class:</span> <span class="string">&#x27;CascadeChoiceParameter&#x27;</span>,</span><br><span class="line">            <span class="symbol">choiceType:</span> <span class="string">&#x27;PT_SINGLE_SELECT&#x27;</span>,</span><br><span class="line">            <span class="symbol">description:</span> <span class="string">&#x27;⚠ 选择需要限制的 CPU 值 ！&#x27;</span>,</span><br><span class="line">            <span class="symbol">name:</span> <span class="string">&#x27;CPU_LIMIT&#x27;</span>,</span><br><span class="line">            <span class="symbol">randomName:</span> <span class="string">&#x27;choice-parameter-5631314456178624&#x27;</span>,</span><br><span class="line">            <span class="symbol">referencedParameters:</span> <span class="string">&#x27;Select&#x27;</span>,</span><br><span class="line">            <span class="symbol">script:</span> [</span><br><span class="line">                <span class="symbol">$class:</span> <span class="string">&#x27;GroovyScript&#x27;</span>,</span><br><span class="line">                <span class="symbol">fallbackScript:</span> [</span><br><span class="line">                    <span class="symbol">classpath:</span> [],</span><br><span class="line">                    <span class="symbol">sandbox:</span> <span class="literal">true</span>,</span><br><span class="line">                    <span class="symbol">script:</span></span><br><span class="line">                        <span class="string">&#x27;return[\&#x27;nothing.....\&#x27;]&#x27;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="symbol">script:</span> [</span><br><span class="line">                    <span class="symbol">classpath:</span> [],</span><br><span class="line">                    <span class="symbol">sandbox:</span> <span class="literal">true</span>,</span><br><span class="line">                    <span class="symbol">script:</span></span><br><span class="line">                        <span class="string">&quot;&quot;&quot;if (Select.equals(&#x27;yes&#x27;)) &#123;</span></span><br><span class="line"><span class="string">  return[&quot;0.5C&quot;,&quot;2C&quot;,&quot;4C&quot;]</span></span><br><span class="line"><span class="string">&#125; else &#123;</span></span><br><span class="line"><span class="string">  return[&quot;none limit&quot;]</span></span><br><span class="line"><span class="string">&#125;&quot;&quot;&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    ])</span><br><span class="line">])</span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&quot;$&#123;params.Select&#125;&quot;</span></span><br><span class="line">                echo <span class="string">&quot;$&#123;params.CPU_LIMIT&#125;&quot;</span>  <span class="comment">// 获取参数值时必须使用params.&lt;参数名&gt;才能获取，否则报错</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;构建效果&#x3D;&#x3D;</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221023152841068.png" alt="image-20221023152841068"></p><h4 id="2-2-3-案例三"><a href="#2-2-3-案例三" class="headerlink" title="2.2.3 案例三"></a>2.2.3 案例三</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">properties([</span><br><span class="line">    parameters([</span><br><span class="line">        <span class="comment">// 参数一：用于用户构建前的选择（如选择构建工具）</span></span><br><span class="line">        [<span class="attr">$class:</span> <span class="string">&#x27;ChoiceParameter&#x27;</span>, </span><br><span class="line">            <span class="symbol">choiceType:</span> <span class="string">&#x27;PT_SINGLE_SELECT&#x27;</span>, </span><br><span class="line">            <span class="symbol">description:</span> <span class="string">&#x27;Select the BuildTools Name from the Dropdown List&#x27;</span>, </span><br><span class="line">            <span class="symbol">filterLength:</span> <span class="number">1</span>, </span><br><span class="line">            <span class="symbol">filterable:</span> <span class="literal">true</span>, </span><br><span class="line">            <span class="symbol">name:</span> <span class="string">&#x27;BuildTools&#x27;</span>, </span><br><span class="line">            <span class="symbol">randomName:</span> <span class="string">&#x27;choice-parameter-5631314439613978&#x27;</span>, </span><br><span class="line">            <span class="symbol">script:</span> [</span><br><span class="line">                <span class="symbol">$class:</span> <span class="string">&#x27;GroovyScript&#x27;</span>, </span><br><span class="line">                <span class="symbol">fallbackScript:</span> [</span><br><span class="line">                    <span class="symbol">classpath:</span> [], </span><br><span class="line">                    <span class="symbol">sandbox:</span> <span class="literal">true</span>, </span><br><span class="line">                    <span class="symbol">script:</span> </span><br><span class="line">                        <span class="string">&#x27;return[\&#x27;Could not get BuildTools\&#x27;]&#x27;</span></span><br><span class="line">                ], </span><br><span class="line">                <span class="symbol">script:</span> [</span><br><span class="line">                    <span class="symbol">classpath:</span> [], </span><br><span class="line">                    <span class="symbol">sandbox:</span> <span class="literal">true</span>, </span><br><span class="line">                    <span class="symbol">script:</span> </span><br><span class="line">                        <span class="string">&#x27;return[&quot;Maven&quot;,&quot;Ant&quot;,&quot;Gradle&quot;]&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 参数二：根据参数一的选择内容自动更新（如选择不同的构建工具就会自动更新为对应的构建命名）</span></span><br><span class="line">        [<span class="attr">$class:</span> <span class="string">&#x27;CascadeChoiceParameter&#x27;</span>, </span><br><span class="line">            <span class="symbol">choiceType:</span> <span class="string">&#x27;PT_SINGLE_SELECT&#x27;</span>, </span><br><span class="line">            <span class="symbol">description:</span> <span class="string">&#x27;Select the ExecuteShell from the Dropdown List&#x27;</span>, </span><br><span class="line">            <span class="symbol">filterLength:</span> <span class="number">1</span>, </span><br><span class="line">            <span class="symbol">filterable:</span> <span class="literal">true</span>, </span><br><span class="line">            <span class="symbol">name:</span> <span class="string">&#x27;ExecuteShell&#x27;</span>, </span><br><span class="line">            <span class="symbol">randomName:</span> <span class="string">&#x27;choice-parameter-5631314456178619&#x27;</span>, </span><br><span class="line">            <span class="comment">// BuildTools 为应用参数一（并获取参数一的值）</span></span><br><span class="line">            <span class="symbol">referencedParameters:</span> <span class="string">&#x27;BuildTools&#x27;</span>,</span><br><span class="line">            <span class="symbol">script:</span> [</span><br><span class="line">                <span class="symbol">$class:</span> <span class="string">&#x27;GroovyScript&#x27;</span>, </span><br><span class="line">                <span class="symbol">fallbackScript:</span> [</span><br><span class="line">                    <span class="symbol">classpath:</span> [], </span><br><span class="line">                    <span class="symbol">sandbox:</span> <span class="literal">true</span>, </span><br><span class="line">                    <span class="symbol">script:</span> </span><br><span class="line">                        <span class="string">&#x27;return[\&#x27;Could not get Environment from ExecuteShell Param\&#x27;]&#x27;</span></span><br><span class="line">                ], </span><br><span class="line">                <span class="symbol">script:</span> [</span><br><span class="line">                    <span class="symbol">classpath:</span> [], </span><br><span class="line">                    <span class="symbol">sandbox:</span> <span class="literal">true</span>, </span><br><span class="line">                    <span class="comment">// 根据获取的参数一的值来动态返回你自定义的值</span></span><br><span class="line">                    <span class="symbol">script:</span> </span><br><span class="line">                        <span class="string">&#x27;&#x27;&#x27;if (BuildTools.equals(&quot;Maven&quot;)) &#123;</span></span><br><span class="line"><span class="string">  return[&quot;clean package&quot;]</span></span><br><span class="line"><span class="string">&#125; else if (BuildTools.equals(&quot;Ant&quot;)) &#123;</span></span><br><span class="line"><span class="string">  return[&quot;ant -buildfile build.xml&quot;]</span></span><br><span class="line"><span class="string">&#125; else if (BuildTools.equals(&quot;Gradle&quot;)) &#123;</span></span><br><span class="line"><span class="string">  return[&quot;gradle clean build&quot;]</span></span><br><span class="line"><span class="string">&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    ])</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 流水线脚本</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">    environment &#123;</span><br><span class="line">        vari = <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage (<span class="string">&quot;Example&quot;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script&#123;</span><br><span class="line">                echo <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">                echo <span class="string">&quot;$&#123;params.BuildTools&#125;&quot;</span></span><br><span class="line">                echo <span class="string">&quot;$&#123;params.ExecuteShell&#125;&quot;</span></span><br><span class="line">                <span class="comment">// 若参数二获取不到值则取消本次构建</span></span><br><span class="line">                <span class="keyword">if</span> (params.ExecuteShell.equals(<span class="string">&quot;Could not get Environment from ExecuteShell Param&quot;</span>)) &#123;</span><br><span class="line">                    echo <span class="string">&quot;Must be the first build after Pipeline deployment.  Aborting the build&quot;</span></span><br><span class="line">                    currentBuild.result = <span class="string">&#x27;ABORTED&#x27;</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><mark>构建效果：</mark><br><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221023162054239.png" alt="image-20221023162054239"></p><p><mark>构建输出：</mark><br><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221023161641157.png" alt="image-20221023161641157"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
            <tag> Jenkins_Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 用户权限管理</title>
      <link href="/posts/articles/bc241c84.html"/>
      <url>/posts/articles/bc241c84.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/2d697c8b26a7d91dc044f623e7f80f4a.jpeg" alt="2d697c8b26a7d91dc044f623e7f80f4a"></p><p><font color="Brown"><strong>Author</strong>：rab</font> <font color="Brown"><strong>Date</strong>：2022&#x2F;07&#x2F;05</font> <font color="Brown"><strong>Blog</strong>：<a href="https://blog.csdn.net/IT_ZRS?type=blog"><font color="Brown">https://blog.csdn.net/IT_ZRS?type&#x3D;blog</font></a></font></p><p><strong>Jenkins 版本</strong>：2.332.3</p><hr><h2 id="一、安装插件"><a href="#一、安装插件" class="headerlink" title="一、安装插件"></a>一、安装插件</h2><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><blockquote><p>在 Jenkins 的管理插件中进行插件安装</p><p>输入 Role 即可找到，如下图我已经安装过了。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220706113750812.png" alt="image-20220706113750812"></p><h3 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h3><blockquote><p>点击 Configure Global Security 进入配置</p></blockquote><p><strong>1、在 Jenkins 设置中找到如下图标</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220706114033184.png" alt="image-20220706114033184"></p><p><strong>2、选择刚安装的插件来作为我的用户权限</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220706114334669.png" alt="image-20220706114334669"></p><h2 id="二、创建角色"><a href="#二、创建角色" class="headerlink" title="二、创建角色"></a>二、创建角色</h2><h3 id="2-1-插件功能"><a href="#2-1-插件功能" class="headerlink" title="2.1 插件功能"></a>2.1 插件功能</h3><p>在 Jenkins 设置下找到 <code>Manage and Assign Roles</code> 并点击进入</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220706114829442.png" alt="image-20220706114829442"></p><p>主要功能：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220706115131927.png" alt="image-20220706115131927"></p><h3 id="2-2-角色管理"><a href="#2-2-角色管理" class="headerlink" title="2.2 角色管理"></a>2.2 角色管理</h3><p><strong>1、点击上图 <code>Manage Roles</code> 进入角色管理</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220706115702953.png" alt="image-20220706115702953"></p><p><strong>2、创建全局角色</strong></p><p>创建一个名为 base 的全局角色，该角色可作为所有用户的基本权限，也就是所有普通用户都具备的基本权限，并赋予角色 <code>Overall 下的 Read</code> 权限。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220706120353287.png" alt="image-20220706120353287"><strong>3、创建项目角色</strong></p><p>创建一个名为 shop 的项目角色，Pattern 为过滤或匹配正则表达项，<code>cms.*</code> 表示以 cms 开头的项目都会被匹配到，设置完之后，为该项目角色赋予对应的权限。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220706121102934.png" alt="image-20220706121102934"></p><p>Pattern 可以匹配作业（job）、代理（agents）、文件夹（folders）等项目关键字及类型。</p><p>格式为：<code>jobs, agents, folders, etc</code>    如有多个的话，用英文状态下的逗号”,”分开即可。</p><p><strong>4、创建节点角色</strong></p><p>节点角色主要是用于主从 Jenkins 部署时，进行节点权限配置。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220706121946074.png" alt="image-20220706121946074"></p><h3 id="2-3-角色分配"><a href="#2-3-角色分配" class="headerlink" title="2.3 角色分配"></a>2.3 角色分配</h3><p><strong>1、创建用户</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220706122231874.png" alt="image-20220706122231874"></p><p><strong>2、点击 <code>Assign Roles</code> 为用户分配权限</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220706122541034.png" alt="image-20220706122541034"></p><p>按照上面配置的项目角色权限，ops 用户只能匹配到以 cms 开头的项目，其他项目他是无法看到的，接下来进行验证。</p><p><strong>3、ops 用户登录验证</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220706122943398.png" alt="image-20220706122943398"></p><p><mark>至此，Jenkins 用户权限设置完毕！</mark></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pipeline 核心技术</title>
      <link href="/posts/articles/a951d278.html"/>
      <url>/posts/articles/a951d278.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/%E6%B5%81%E6%B0%B4%E7%BA%BF.webp" alt="流水线"></p><p><font color=Brown><strong>Author</strong>：rab</font><br><font color=Brown><strong>Date</strong>：2022&#x2F;07&#x2F;24</font><br><font color=Brown><strong>Blog</strong>：<a href="https://blog.csdn.net/IT_ZRS?type=blog"><font color=Brown>https://blog.csdn.net/IT_ZRS?type&#x3D;blog</font></a></font></p><hr><h2 id="一、整体结构"><a href="#一、整体结构" class="headerlink" title="一、整体结构"></a>一、整体结构</h2><p>Pipeline 有两种语法格式，分别是脚本式和声明式，通常我们是两种语法格式结合使用。先来看看整体结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">stages &#123;</span><br><span class="line">stage(&#x27;git&#x27;) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">// 拉取项目</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">stage(&#x27;build&#x27;) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">// 构建项目</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">stage(&#x27;deproment&#x27;) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">script &#123;</span><br><span class="line">// 发布项目</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">post &#123;</span><br><span class="line">always &#123;</span><br><span class="line">// 不管构建成功、失败还是取消都执行该部分操作</span><br><span class="line">&#125;</span><br><span class="line">success &#123;</span><br><span class="line">// 只有构建成功后才执行该部分操作</span><br><span class="line">&#125;</span><br><span class="line">failure &#123;</span><br><span class="line">// 只有构建失败后才执行该部分操作</span><br><span class="line">&#125;</span><br><span class="line">aborted &#123;</span><br><span class="line">// 只有构建中途取消构建后才执行该部分</span><br><span class="line">&#125;</span><br><span class="line">unstable &#123;</span><br><span class="line">// 构建不稳定时执行该部分</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h2><h3 id="2-1-agent"><a href="#2-1-agent" class="headerlink" title="2.1 agent"></a>2.1 agent</h3><h4 id="2-1-1-说明"><a href="#2-1-1-说明" class="headerlink" title="2.1.1 说明"></a>2.1.1 说明</h4><p><code>agent</code>  的作用是：你本次的构建在哪个 Jenkins 服务器实例上执行。因此 <code>agent</code> 部分有以下参数可选择。</p><ul><li><p><strong>any</strong>：该参数表示当前构建任务可在任意可用 Jenkins 节点上运行；</p></li><li><p><strong>none</strong>：当为 none 时，在 stage 阶段中时必须指定  Jenkins 服务器实例，否则报错；</p></li><li><p><strong>label</strong>：在指定的 Jenkins 标签节点运行（前提是你已经为你的 Jenkins 实例设置了标签）；</p></li><li><p><strong>node</strong>：该参数支持自定义流水线工作目录（<code>即 workspace 目录</code>）；</p></li><li><p><strong>docker</strong>：可使用 docker 在指定的 <code>pipeline &#123;&#125;</code> 或 <code>stage() &#123;&#125;</code> 中执行；</p></li><li><p><strong>dockerfile</strong>：可使用 dockerfile 在指定的 <code>pipeline &#123;&#125;</code> 或 <code>stage() &#123;&#125;</code> 中执行；</p></li><li><p><strong>kubernetes</strong>：应用于 K8s 中</p></li></ul><h4 id="2-1-2-案例"><a href="#2-1-2-案例" class="headerlink" title="2.1.2 案例"></a>2.1.2 案例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例1</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例2</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">agent none</span><br><span class="line">stages &#123;</span><br><span class="line">stage(&#x27;build&#x27;) &#123;</span><br><span class="line">agent your_Jenkins_labelname</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例3</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">agent &#123; label &quot;your_Jenkins_labelname&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例4</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">  agent &#123; </span><br><span class="line">     node &#123;</span><br><span class="line">        label &quot;your_Jenkins_labelname&quot;,</span><br><span class="line">        customWorkspace &quot;/data/jenkins_agent/workspace&quot;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例5</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">agent &#123;</span><br><span class="line">docker &#123;</span><br><span class="line">image &#x27;maven:3.8.1-adoptopenjdk-11&#x27;</span><br><span class="line">label &#x27;your_Jenkins_labelname&#x27;</span><br><span class="line">args  &#x27;-v /tmp:/tmp&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例6</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        // Equivalent to &quot;docker build -f Dockerfile.build --build-arg version=1.0.2 ./build/</span><br><span class="line">        dockerfile &#123;</span><br><span class="line">            filename &#x27;Dockerfile.build&#x27;</span><br><span class="line">            dir &#x27;build&#x27;</span><br><span class="line">            label &#x27;your_Jenkins_labelname&#x27;</span><br><span class="line">            additionalBuildArgs  &#x27;--build-arg version=1.0.2&#x27;</span><br><span class="line">            args &#x27;-v /tmp:/tmp&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例7</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        kubernetes &#123;</span><br><span class="line">            defaultContainer &#x27;kaniko&#x27;</span><br><span class="line">            yaml &#x27;&#x27;&#x27;</span><br><span class="line">    kind: Pod</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: kaniko</span><br><span class="line">        image: gcr.io/kaniko-project/executor:debug</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        command:</span><br><span class="line">        - sleep</span><br><span class="line">        args:</span><br><span class="line">        - 99d</span><br><span class="line">        volumeMounts:</span><br><span class="line">          - name: aws-secret</span><br><span class="line">            mountPath: /root/.aws/</span><br><span class="line">          - name: docker-registry-config</span><br><span class="line">            mountPath: /kaniko/.docker</span><br><span class="line">      volumes:</span><br><span class="line">        - name: aws-secret</span><br><span class="line">          secret:</span><br><span class="line">            secretName: aws-secret</span><br><span class="line">        - name: docker-registry-config</span><br><span class="line">          configMap:</span><br><span class="line">            name: docker-registry-config</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单看一下 node 形式的：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724140903917.png" alt="image-20220724140903917"></p><h3 id="2-2-stages"><a href="#2-2-stages" class="headerlink" title="2.2 stages"></a>2.2 stages</h3><h4 id="2-2-1-说明"><a href="#2-2-1-说明" class="headerlink" title="2.2.1 说明"></a>2.2.1 说明</h4><p>stages （阶段）包含多个 stage（且至少包含一个 stage），一个 stage 中包含一个 steps（步骤-且只包含一个 steps）</p><h4 id="2-2-2-案例"><a href="#2-2-2-案例" class="headerlink" title="2.2.2 案例"></a>2.2.2 案例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">stages &#123;</span><br><span class="line">stage(&#x27;build&#x27;) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">script &#123;</span><br><span class="line">println(&#x27;build your project !&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===================================</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如何嵌套脚本式语法？</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当我们引用 script &#123;&#125; 时，就可以在该部分中引入脚本时语法（比如<span class="keyword">for</span>循环、<span class="keyword">if</span>判断等等）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">script &#123;&#125; 紧跟 steps，然后所有的脚本式语法就在 script &#123;...&#125; 中执行</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">错误书写方式如下：</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">stages &#123;</span><br><span class="line">stage(&#x27;build&#x27;) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">echo &#x27;hello world&#x27;</span><br><span class="line">script &#123;</span><br><span class="line">println(&#x27;build your project !&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">正确书写方式如下：</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">stages &#123;</span><br><span class="line">stage(&#x27;build&#x27;) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">script &#123;</span><br><span class="line">echo &#x27;hello world&#x27;</span><br><span class="line">println(&#x27;build your project !&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724141744321.png" alt="image-20220724141744321"></p><h3 id="2-3-post"><a href="#2-3-post" class="headerlink" title="2.3 post"></a>2.3 post</h3><h4 id="2-3-1-说明"><a href="#2-3-1-说明" class="headerlink" title="2.3.1 说明"></a>2.3.1 说明</h4><p><code>post</code> 部分是流水线构建后的相关操作步骤，其包含五个状态参数。</p><ul><li><strong>always</strong>：不管构建成功、失败还是取消都执行该部分操作；</li><li><strong>success</strong>：只有构建成功后才执行该部分操作；</li><li><strong>failure</strong>：只有构建失败后才执行该部分操作；</li><li><strong>aborted</strong>：只有构建中途取消构建后才执行该部分；</li><li><strong>unstable</strong>：构建不稳定时执行该部分。</li></ul><p>⚠注意：<code>post</code> 部分与 <code>stages</code>  处于同级。</p><h4 id="2-3-2-案例"><a href="#2-3-2-案例" class="headerlink" title="2.3.2 案例"></a>2.3.2 案例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">stages &#123;</span><br><span class="line">stage(&#x27;build&#x27;) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">script &#123;</span><br><span class="line">println(&#x27;build your project !&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">post &#123;</span><br><span class="line">success &#123;</span><br><span class="line">echo &#x27;build success&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724143856442.png" alt="image-20220724143856442"></p><h3 id="2-4-环境变量"><a href="#2-4-环境变量" class="headerlink" title="2.4 环境变量"></a>2.4 环境变量</h3><p>我们可以通过 <code>environment</code> 来设置环境变量。</p><h4 id="2-4-1-预定义变量"><a href="#2-4-1-预定义变量" class="headerlink" title="2.4.1 预定义变量"></a>2.4.1 预定义变量</h4><p>1、说明</p><p>预定义变量也就是我们 Jenkins 内部默认存在且可用的变量，属于全局 变量，即该类型的变量<code>可在 Pipeline 中全局或局部引用</code>。如何查看 Jenkins 的预定义变量？可在 <code>Jenkins 流水线语法</code> 部分中查看，如下图，每一个变量都有相应的解释。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724144355604.png" alt="image-20220724144355604"></p><p>2、如何引用预定义变量</p><p>对于预定义变量或全局变量，引用方式为：<code>$&#123;env.变量名&#125;</code></p><h4 id="2-4-2-自定义变量"><a href="#2-4-2-自定义变量" class="headerlink" title="2.4.2 自定义变量"></a>2.4.2 自定义变量</h4><p>自定义变量也可以定义全局变量与局部变量。</p><p>1、自定义全局变量</p><blockquote><p>与 <code>stages &#123;&#125;</code> 同级的自定义变量属于全局变量，在流水线脚本中各阶段中可全局或局部引用。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123;</span><br><span class="line">        PROJECT = &quot;cms&quot;</span><br><span class="line">        VERSION = &quot;v1.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;$&#123;env.PROJECT&#125;&quot;</span><br><span class="line">                // 或 echo &quot;$&#123;PROJECT&#125;&quot; 都是可以的</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo &#x27;build success&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724145832755.png" alt="image-20220724145832755"></p><p>2、自定义局部变量</p><blockquote><p>定义于 <code>stage(&#39;...&#39;) &#123;&#125;</code> 下的变量我们称之为局部变量，该变量只能在其所处的阶段步骤中引用。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;build&#x27;) &#123;</span><br><span class="line">            environment &#123;</span><br><span class="line">                PROJECT = &quot;cms&quot;</span><br><span class="line">                VERSION = &quot;v1.0.0&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;$&#123;VERSION&#125;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo &#x27;build success&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724154749312.png" alt="image-20220724154749312"></p><p>如果你在其他 stage 阶段引用时，是获取不到该变量值的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;build&#x27;) &#123;</span><br><span class="line">            environment &#123;</span><br><span class="line">                PROJECT = &quot;cms&quot;</span><br><span class="line">                VERSION = &quot;v1.0.0&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;$&#123;VERSION&#125;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;depro&#x27;) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">        echo &quot;$&#123;VERSION&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo &#x27;build success&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724155044976.png" alt="image-20220724155044976"></p><p>除非你定义了全局变量，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123;</span><br><span class="line">    NAME = &quot;rab&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;build&#x27;) &#123;</span><br><span class="line">            environment &#123;</span><br><span class="line">                PROJECT = &quot;cms&quot;</span><br><span class="line">                VERSION = &quot;v1.0.0&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;$&#123;VERSION&#125;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;depro&#x27;) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">        echo &quot;$&#123;NAME&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo &#x27;build success&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724155259349.png" alt="image-20220724155259349"></p><p>&#x3D;&#x3D;再次来看看定义变量的方法：&#x3D;&#x3D;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def PROJECT = cms</span><br><span class="line">String NAME = rab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以上这两种写法是一样，def可以自动推导出变量类型，而String这种写法是精确这个变量是一个字符串类型的。</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局变量的定义方式</span></span><br><span class="line">env.NAME = rab</span><br></pre></td></tr></table></figure><h3 id="2-5-credentials"><a href="#2-5-credentials" class="headerlink" title="2.5 credentials"></a>2.5 credentials</h3><h4 id="2-5-1-说明"><a href="#2-5-1-说明" class="headerlink" title="2.5.1 说明"></a>2.5.1 说明</h4><p><code>credentials</code> 可用于在 Jenkins 环境中通过标识符访问预定义的凭证。在 <code>environment</code> 中，我们经常使用 <code>credentials</code> 方法来对敏感密钥&#x2F;密码进行加密。</p><ul><li><p><strong>Secret Text 类型的凭证</strong></p><p><code>credentials()</code> 将确保指定的环境变量包含秘密文本内容。</p></li><li><p><strong>SStandard username and password 类型的凭证</strong></p><p>指定的环境变量指定为 <code>username:password</code> ，并且两个额外的环境变量将被自动定义：分别为 <code>MYVARNAME_USR</code> 和 <code>MYVARNAME_PSW</code> 。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123; </span><br><span class="line">        CC = &#x27;clang&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Example&#x27;) &#123;</span><br><span class="line">            environment &#123; </span><br><span class="line">                REMOTE_HOST = credentials(&#x27;remote-host&#x27;) </span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;printenv&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">credentials 填的是凭证的唯一ID标识值</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时你就可以在 stage(<span class="string">&#x27;Example&#x27;</span>) &#123;&#125; 阶段中引用相关变量参数了（REMOTE_HOST_PSW和REMOTE_HOST_USR）</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724171024606.png" alt="image-20220724171024606"></p><h4 id="2-5-2-案例"><a href="#2-5-2-案例" class="headerlink" title="2.5.2 案例"></a>2.5.2 案例</h4><p>1、<code>Secret Text</code> 类型的凭证</p><p>这个比较简单，一般用于以文本形式加密密码、Token 等敏感信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123; </span><br><span class="line">        CC = &#x27;clang&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Example&#x27;) &#123;</span><br><span class="line">            environment &#123; </span><br><span class="line">                REMOTE_HOST_TOKEN = credentials(&#x27;test-secret-text&#x27;) </span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;printenv&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724184105358.png" alt="image-20220724184105358"></p><p>2、<code>SStandard username and password</code> 类型的凭证</p><blockquote><p>如果想以密钥形式登录远程服务器，可采用 <code>withCredentials() &#123;&#125;</code> 函数（方法）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123; </span><br><span class="line">        CC = &#x27;clang&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;remote_host&#x27;) &#123;</span><br><span class="line">            environment &#123; </span><br><span class="line">                REMOTE_HOST = credentials(&#x27;remote-host&#x27;) </span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    sh &#x27;printenv&#x27;</span><br><span class="line">                    def remote = [:]</span><br><span class="line">                    remote.name = &quot;192.168.56.133&quot;</span><br><span class="line">                    remote.host = &quot;192.168.56.133&quot;</span><br><span class="line">                    remote.user = &quot;$&#123;REMOTE_HOST_USR&#125;&quot;</span><br><span class="line">                    remote.port = 22</span><br><span class="line">                    remote.password = &quot;$&#123;REMOTE_HOST_PSW&#125;&quot;</span><br><span class="line">                    remote.allowAnyHosts = true</span><br><span class="line">                    sshCommand remote: remote, command: &quot;ls -a&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724180206647.png" alt="image-20220724180206647"></p><p>来到 133 这台服务器上验证看看，是不是有这几个文件：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724180407114.png" alt="image-20220724180407114"></p><h3 id="2-6-options"><a href="#2-6-options" class="headerlink" title="2.6 options"></a>2.6 options</h3><h4 id="2-6-1-说明"><a href="#2-6-1-说明" class="headerlink" title="2.6.1 说明"></a>2.6.1 说明</h4><p>该选项参数可控制 Jenkins 构建超时时间、构建重试次数、禁止并行构建等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">options &#123;</span><br><span class="line">// 保存最近的记录（保留1份）</span><br><span class="line">buildDiscarder(logRotator(numToKeepStr: &#x27;1&#x27;))</span><br><span class="line">// 禁止并行构建</span><br><span class="line">disableConcurrentBuilds()</span><br><span class="line">// 跳过默认的代码检出</span><br><span class="line">skipDefaultCheckout()</span><br><span class="line">// 设定流水线的超时时间(可用于阶段级别)</span><br><span class="line">timeout(time: 1, unit: &#x27;HOURS&#x27;)</span><br><span class="line">// 设定流水线的重试次数(可用于阶段级别)</span><br><span class="line">retry(3)</span><br><span class="line">// 设置日志时间输出(可用于阶段级别)</span><br><span class="line">timestamps()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-2-案例"><a href="#2-6-2-案例" class="headerlink" title="2.6.2 案例"></a>2.6.2 案例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;build&#x27;) &#123;</span><br><span class="line">            environment &#123;</span><br><span class="line">                PROJECT = &quot;cms&quot;</span><br><span class="line">                VERSION = &quot;v1.0.0&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            options &#123;</span><br><span class="line">            timestamps()</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;$&#123;VERSION&#125;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo &#x27;build success&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724163227712.png" alt="image-20220724163227712"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724163409911.png" alt="image-20220724163409911"></p><h3 id="2-7-parameters"><a href="#2-7-parameters" class="headerlink" title="2.7 parameters"></a>2.7 parameters</h3><h4 id="2-7-1-说明"><a href="#2-7-1-说明" class="headerlink" title="2.7.1 说明"></a>2.7.1 说明</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字符串类型</span></span><br><span class="line">string(name: &#x27;&#x27;, defaultvalue: &#x27;&#x27;, description: &#x27;&#x27;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文本类型</span></span><br><span class="line">text(name: &#x27;&#x27;, defaultvalue: &#x27;&#x27;, description: &#x27;&#x27;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">布尔类型</span></span><br><span class="line">booleanParam(name: &#x27;&#x27;, defaultvalue: &#x27;&#x27;, description: &#x27;&#x27;)  --&gt; true/false</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选项类型（只可选择一项）</span></span><br><span class="line">choice(name: &#x27;&#x27;, choices: [&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;], description: &#x27;&#x27;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩展选项类型（可选择多项，需安装扩展插件）</span></span><br><span class="line">extendedChoice(name: &#x27;&#x27;, description: &#x27;&#x27;, multiSelectDelimiter: &#x27;,&#x27;, quoteValue: false, saveJSONParameterToFile: false, type: &#x27;PT_CHECKBOX&#x27;, value: &#x27;a,b,c,...&#x27;, visibleItemCount: 10)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">密码类型</span></span><br><span class="line">password(name:&#x27;&#x27;, defaultvalue:&#x27;&#x27;, description:&#x27;&#x27;)</span><br></pre></td></tr></table></figure><p>注意：extendedChoice 类型参数需要安装下面插件：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724173732718.png" alt="image-20220724173732718"></p><h4 id="2-7-2-案例"><a href="#2-7-2-案例" class="headerlink" title="2.7.2 案例"></a>2.7.2 案例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    parameters &#123;</span><br><span class="line">        string(name: &#x27;A&#x27;, defaultValue: &#x27;A-string&#x27;, description: &#x27;this is string&#x27;)</span><br><span class="line">        text(name: &#x27;B&#x27;, defaultValue: &#x27;B-text&#x27;, description: &#x27;this is text&#x27;)</span><br><span class="line">        booleanParam(name: &#x27;C&#x27;, defaultValue: &#x27;true&#x27;, description: &#x27;this is booleanParam&#x27;)</span><br><span class="line">        choice(name:&#x27;D&#x27;, choices:[&#x27;dev&#x27;,&#x27;ops&#x27;,&#x27;master&#x27;], description: &#x27;this is choice&#x27;)</span><br><span class="line">        extendedChoice(name: &#x27;&#x27;, description: &#x27;this is extendedChoice&#x27;, multiSelectDelimiter: &#x27;,&#x27;, quoteValue: false, saveJSONParameterToFile: false, type: &#x27;PT_CHECKBOX&#x27;, value: &#x27;a,b,c,...&#x27;, visibleItemCount: 10)</span><br><span class="line">        password(name: &#x27;E&#x27;, defaultValue: &#x27;E-password&#x27;, description: &#x27;this is password&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Hello&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;Hello World&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;myparamters&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;hello $&#123;params.A&#125;&quot;</span><br><span class="line">                echo &quot;hello $&#123;params.B&#125;&quot;</span><br><span class="line">                echo &quot;hello $&#123;params.C&#125;&quot;</span><br><span class="line">                echo &quot;hello $&#123;params.D&#125;&quot;</span><br><span class="line">                echo &quot;hello $&#123;params.E&#125;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数化界面：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724174328712.png" alt="image-20220724174328712"></p><p>构建结果：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724174537039.png" alt="image-20220724174537039"></p><h3 id="2-8-triggers"><a href="#2-8-triggers" class="headerlink" title="2.8 triggers"></a>2.8 triggers</h3><h4 id="2-8-1-说明"><a href="#2-8-1-说明" class="headerlink" title="2.8.1 说明"></a>2.8.1 说明</h4><p><code>triggers</code> 为流水线触发方式，一般用于 webhook 集成：</p><ul><li>cron 定时触发：<code>triggers &#123; cron(&#39;H */4 * * 1-5&#39;) &#125;</code></li><li>pollSCM：<code>triggers &#123; pollSCM(&#39;H */4 * * 1-5&#39;) &#125;</code></li></ul><p>⚠注意：<code>pollSCM</code> 触发器仅在 <code>Jenkins 2.22</code> 或更高版本中可用。</p><h4 id="2-8-2-案例"><a href="#2-8-2-案例" class="headerlink" title="2.8.2 案例"></a>2.8.2 案例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    triggers &#123;</span><br><span class="line">        cron(&#x27;H/1 * * * 1-5&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    environment &#123;</span><br><span class="line">        PROJECT = &quot;cms&quot;</span><br><span class="line">        VERSION = &quot;v1.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;$&#123;PROJECT&#125;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo &#x27;build success&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于计划任务具体详细解释，可以看官方文档——<a href="https://www.jenkins.io/doc/book/pipeline/syntax/">计划任务</a></p></blockquote><h3 id="2-9-input"><a href="#2-9-input" class="headerlink" title="2.9 input"></a>2.9 input</h3><h4 id="2-9-1-说明"><a href="#2-9-1-说明" class="headerlink" title="2.9.1 说明"></a>2.9.1 说明</h4><p><code>input</code> 在流水线中作为交互式应用，应用于 <code>steps &#123;&#125;</code> 前，并在<code>steps &#123;&#125;</code> 执行前暂停。如果 <code>input</code> 为同意继续执行，那将会继续执行 <code>steps &#123;&#125;</code> 部分，否则取消。</p><p>配置选项：</p><ul><li>message：自定义信息（该选项是必须存在的）；</li><li>id：可选 input 标识符（默认为 stage 名称）;</li><li>ok：表单上“确定”按钮（继续&#x2F;取消）；</li><li>submitter：提交者；</li><li>parameters：提示提交者提供的可选参数列表。</li></ul><h4 id="2-9-2-案例"><a href="#2-9-2-案例" class="headerlink" title="2.9.2 案例"></a>2.9.2 案例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Example&#x27;) &#123;</span><br><span class="line">            input &#123;</span><br><span class="line">                message &quot;Should we continue?&quot;</span><br><span class="line">                id &quot;deploy&quot;</span><br><span class="line">                ok &quot;Yes, we should.&quot;</span><br><span class="line">                submitter &quot;alice&quot;</span><br><span class="line">                parameters &#123;</span><br><span class="line">                    string(name: &#x27;PERSON&#x27;, defaultValue: &#x27;Mr Jenkins&#x27;, description: &#x27;my test&#x27;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;Hello, $&#123;PERSON&#125;, nice to meet you.&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220725163538813.png" alt="image-20220725163538813"></p><blockquote><p>点击【Yes, we should.】则继续执行 <code>steps &#123;&#125;</code> 部分；</p><p>点击【Abort】则取消执行该阶段的 <code>steps &#123;&#125;</code> 部分，如下图：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220725163754347.png" alt="image-20220725163754347"></p></blockquote><h3 id="2-10-when"><a href="#2-10-when" class="headerlink" title="2.10 when"></a>2.10 when</h3><h4 id="2-10-1-说明"><a href="#2-10-1-说明" class="headerlink" title="2.10.1 说明"></a>2.10.1 说明</h4><p>这是声明式语法中的条件判断语句，而在脚本式语法中使用的是 <code>if</code> 判断。该指令主要是根据给定的条件来选择是否继续执行 <code>stage 阶段</code>  部分，只有所有条件都返回 <code>true</code> 才能执行阶段，否则跳过该阶段。</p><p>常用选项参数：</p><ul><li>branch：仅适用于多分支管道。<code>when &#123; branch &#39;master&#39; &#125;</code></li><li>environment：当指定环境变量设置为给定值时执行该阶段。<code>when &#123; environment name: &#39;DEPLOY_TO&#39;, value: &#39;production&#39; &#125;</code></li><li>expression：表达式返回结果为 true 时执行该阶段。<code>when &#123; expression &#123; return params.DEBUG_BUILD &#125; &#125;</code> 返回结果必须为布尔型（true&#x2F;null），简单地返回“0”或“false”仍将评估为“true”。</li></ul><p>常用判断参数：</p><ul><li>not：<code>when &#123; not &#123; branch &#39;master&#39; &#125; &#125;</code>，表示：当分支不是 master 的时候，执行 steps。</li><li>allOf：<code>when &#123; allOf &#123; branch &#39;master&#39;; environment name: &#39;DEPLOY_TO&#39;, value: &#39;production&#39; &#125; &#125;</code> 当所有都满足条件时才执行 steps。</li><li>anyOf：<code>when &#123; anyOf &#123; branch &#39;master&#39;; branch &#39;staging&#39; &#125; &#125;</code>，只要有一个条件成立了才会执行 steps。</li></ul><h4 id="2-10-2-案例"><a href="#2-10-2-案例" class="headerlink" title="2.10.2 案例"></a>2.10.2 案例</h4><ul><li><p>单一条件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Example Build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;Hello World&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Example Deploy&#x27;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                branch &#x27;main&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;Deploying&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多条件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Example Build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;Hello World&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Example Deploy&#x27;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                branch &#x27;production&#x27;</span><br><span class="line">                environment name: &#x27;DEPLOY_TO&#x27;, value: &#x27;production&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;Deploying&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>嵌套条件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Example Build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;Hello World&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Example Deploy&#x27;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                allOf &#123;</span><br><span class="line">                    branch &#x27;production&#x27;</span><br><span class="line">                    environment name: &#x27;DEPLOY_TO&#x27;, value: &#x27;production&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;Deploying&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多重条件和嵌套条件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Example Build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;Hello World&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Example Deploy&#x27;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                branch &#x27;production&#x27;</span><br><span class="line">                anyOf &#123;</span><br><span class="line">                    environment name: &#x27;DEPLOY_TO&#x27;, value: &#x27;production&#x27;</span><br><span class="line">                    environment name: &#x27;DEPLOY_TO&#x27;, value: &#x27;staging&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;Deploying&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>表达式条件和嵌套条件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Example Build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;Hello World&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Example Deploy&#x27;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                expression &#123; BRANCH_NAME ==~ /(production|staging)/ &#125;</span><br><span class="line">                anyOf &#123;</span><br><span class="line">                    environment name: &#x27;DEPLOY_TO&#x27;, value: &#x27;production&#x27;</span><br><span class="line">                    environment name: &#x27;DEPLOY_TO&#x27;, value: &#x27;staging&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;Deploying&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-11-parallel"><a href="#2-11-parallel" class="headerlink" title="2.11 parallel"></a>2.11 parallel</h3><h4 id="2-11-1-说明"><a href="#2-11-1-说明" class="headerlink" title="2.11.1 说明"></a>2.11.1 说明</h4><p>一个阶段必须有且只有一个 <code>steps</code>、<code>stages</code>、<code>parallel</code>或<code>matrix</code>。该部分可应用于自动化测试及多主机并行发布。</p><h4 id="2-11-2-案例"><a href="#2-11-2-案例" class="headerlink" title="2.11.2 案例"></a>2.11.2 案例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">stages &#123;</span><br><span class="line">// 这个stage只能有一个parallel</span><br><span class="line">stage( &#x27;Parallel stage&#x27;) &#123;</span><br><span class="line">failFast true</span><br><span class="line">parallel &#123;</span><br><span class="line">stage( &#x27;windows&#x27; ) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">echo &quot;windows&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">stage( &#x27;linux&#x27; ) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">echo &quot;linux&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 这个stage同样也只能有一个parallel</span><br><span class="line">stage( &#x27;Parallel stage 1&#x27;) &#123;</span><br><span class="line">failFast true</span><br><span class="line">parallel &#123;</span><br><span class="line">stage( &#x27;windows-1&#x27; ) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">echo &quot;windows-1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">stage( &#x27;linux-1&#x27; ) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">echo &quot;linux-1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220725172122718.png" alt="image-20220725172122718"></p><h3 id="2-12-DSL"><a href="#2-12-DSL" class="headerlink" title="2.12 DSL"></a>2.12 DSL</h3><h4 id="2-12-1-JSON-数据格式解析"><a href="#2-12-1-JSON-数据格式解析" class="headerlink" title="2.12.1 JSON 数据格式解析"></a>2.12.1 JSON 数据格式解析</h4><p>1、所需插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pipeline Utils Steps</span><br></pre></td></tr></table></figure><p>2、流水线配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 插件方式配置</span><br><span class="line">def response = readJSON text: &quot;$&#123;scanResult&#125;&quot;</span><br><span class="line">println(scanResult)</span><br><span class="line"></span><br><span class="line">// 原生方法配置</span><br><span class="line">import groovy .json.*</span><br><span class="line">@NonCPs</span><br><span class="line">def Getson(text)&#123;</span><br><span class="line">def prettyJson = sonoutput.prettyPrint(text)</span><br><span class="line">new sonslurperClassic( ).parseText(prettyson)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-12-2-使用凭据"><a href="#2-12-2-使用凭据" class="headerlink" title="2.12.2 使用凭据"></a>2.12.2 使用凭据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">withcredentials([string(credentialsId: &quot;xxxxx&quot;， variable: &quot;sonarToken&quot;)])&#123;</span><br><span class="line">println(sonarToken)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体如何生产，可以参考 Jenkins 自带的<code>片段生成器</code></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220725174748559.png" alt="image-20220725174748559"></p><h4 id="2-12-3-代码管理"><a href="#2-12-3-代码管理" class="headerlink" title="2.12.3 代码管理"></a>2.12.3 代码管理</h4><p>1、git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">checkout([$</span><span class="language-bash">class: <span class="string">&#x27;GitsCM&#x27;</span>, branches: [[name: <span class="string">&quot;brnachName&quot;</span>]],</span></span><br><span class="line">doGenerateSubmoduleconfigurations: false,</span><br><span class="line">extensions: [], submoduleCfg: [],</span><br><span class="line">userRemoteConfigs: [[credentialsId: &quot;$&#123;credentialsId&#125;&quot;,</span><br><span class="line">url: &quot;$&#123;srcUrl&#125;&quot;]]])</span><br></pre></td></tr></table></figure><p>2、svn</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">checkout([$</span><span class="language-bash">class: <span class="string">&#x27;subversionscM&#x27;</span> , additionalCredentials: [],</span></span><br><span class="line">filterChangelog: false，ignoreDirPropChanges: false,</span><br><span class="line">locations: [[credentialsId: &quot;$&#123;credentialsId&#125;&quot;,</span><br><span class="line">depthoption: &#x27;infinity&#x27;, ignoreExternalsoption: true,</span><br><span class="line">remote: &quot;$&#123;svnurl]&quot;]]，</span><br><span class="line">workspaceUpdater: [$class: &#x27;checkoutUpdater&#x27;]]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="2-12-4-HTML-报告展示"><a href="#2-12-4-HTML-报告展示" class="headerlink" title="2.12.4 HTML 报告展示"></a>2.12.4 HTML 报告展示</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">publishHTML([allowMissing: false,</span><br><span class="line">alwaysLinkToLastBuild: false,keepAll: true,</span><br><span class="line">reportDir: &#x27;./report/&#x27;,</span><br><span class="line">reportFiles: &quot;a.htm1, b.html&quot;,</span><br><span class="line">reportName: &#x27;TnterfaceTestReport&#x27;,</span><br><span class="line">reportTitles: &#x27;HTML&#x27;])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-12-5-获取管道构建用户"><a href="#2-12-5-获取管道构建用户" class="headerlink" title="2.12.5 获取管道构建用户"></a>2.12.5 获取管道构建用户</h4><p>1、所需插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build user vars</span><br></pre></td></tr></table></figure><p>2、流水线配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">wrap([$</span><span class="language-bash">class: <span class="string">&#x27;BuildUser&#x27;</span>])&#123;</span></span><br><span class="line">echo &quot;full name is $BUILD_USER&quot;</span><br><span class="line">echo &quot;user id is $BUTLD_USER_ID&quot;</span><br><span class="line">echo &quot;user email is $BUILD_USER_EMAIL&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-12-6-使用-HttpRequest-发起请求"><a href="#2-12-6-使用-HttpRequest-发起请求" class="headerlink" title="2.12.6 使用 HttpRequest 发起请求"></a>2.12.6 使用 HttpRequest 发起请求</h4><p>1、所需插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP Request</span><br></pre></td></tr></table></figure><p>2、流水线配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ApiUrl = &quot;http://xxxxxx/api/project_branches/list?project=$&#123;projectName&#125;&quot;</span><br><span class="line">Result = httpRequest authentication : &#x27;xxxxxxxxx &#x27;,</span><br><span class="line">quiet : true,</span><br><span class="line">contentType:&#x27;APPLICATION_JSON&#x27;,</span><br><span class="line">url: &quot;$&#123;ApiUrl&#125;&quot;</span><br></pre></td></tr></table></figure><h4 id="2-12-7-获取-Shell-返回值"><a href="#2-12-7-获取-Shell-返回值" class="headerlink" title="2.12.7 获取 Shell 返回值"></a>2.12.7 获取 Shell 返回值</h4><p>1、无需获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">  // 主要阶段以及子阶段流程</span><br><span class="line">  stages &#123;</span><br><span class="line">    // [ 阶段.shell命令执行测试 ]</span><br><span class="line">    stage (&#x27;代码拉取&#x27;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        // 最简单的方式</span><br><span class="line">        sh &#x27;whoami &amp;&amp; uname -a&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220728182527543.png" alt="image-20220728182527543"></p><p>2、获取标准输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//第一种</span><br><span class="line">result = sh returnStdout: true ,script: &quot;&lt;shell command&gt;&quot;</span><br><span class="line">result = result.trim()</span><br><span class="line"></span><br><span class="line">//第二种</span><br><span class="line">result = sh(script: &quot;&lt;shell command&gt;&quot;, returnStdout: true).trim()</span><br><span class="line"></span><br><span class="line">//第三种</span><br><span class="line">sh &quot;&lt;shell command&gt; &gt; commandResult&quot;</span><br><span class="line">result = readFile(&#x27;commandResult&#x27;).trim()</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220728182611577.png" alt="image-20220728182611577"></p><p>3、获取执行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//第一种</span><br><span class="line">result = sh returnStatus: true ,script: &quot;&lt;shell command&gt;&quot;</span><br><span class="line">result = result.trim()</span><br><span class="line"></span><br><span class="line">//第二种</span><br><span class="line">result = sh(script: &quot;&lt;shell command&gt;&quot;, returnStatus: true).trim()</span><br><span class="line"></span><br><span class="line">//第三种</span><br><span class="line">sh &#x27;&lt;shell command&gt;; echo $? &gt; status&#x27;</span><br><span class="line">def r = readFile(&#x27;status&#x27;).trim()</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220728182645235.png" alt="image-20220728182645235"></p><p>&#x3D;&#x3D;trim() 方法说明：&#x3D;&#x3D;</p><p>该方法用于删除字符串的头尾空白符。空白符包括：空格、制表符 tab、换行符等其他空白符等, 在 Jenkins 流水线中非常重要，因为命令执行后总是会在其末尾添加一个换行符。</p><h2 id="三、共享库"><a href="#三、共享库" class="headerlink" title="三、共享库"></a>三、共享库</h2><h3 id="3-1-创建共享库"><a href="#3-1-创建共享库" class="headerlink" title="3.1 创建共享库"></a>3.1 创建共享库</h3><p>1、创建项目仓库</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723150155668.png" alt="image-20220723150155668"></p><p>2、添加目录&#x2F;文件</p><ul><li>点击 <code>Web IDE</code></li></ul><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723151049250.png" alt="image-20220723151049250"></p><ul><li><p>创建目录</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723150944708.png" alt="image-20220723150944708"></p></li><li><p>添加文件</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723152123651.png"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723152250816.png" alt="image-20220723152250816"></p></li></ul><p>3、将定义好的方法提交到代码仓库</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723152849499.png" alt="image-20220723152849499"></p><h3 id="3-2-加载共享库"><a href="#3-2-加载共享库" class="headerlink" title="3.2 加载共享库"></a>3.2 加载共享库</h3><p>1、流水线脚本加载共享库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 加载共享库，其中jenkinslib要与Jenkins系统配置中保持一致（jenkinslib可自定义），@amin表示共享库所在分支</span><br><span class="line">@Library(&quot;jenkinslib@main&quot;) _</span><br><span class="line">// 导入jenkinsfile.groovy。这里要注意：下面的jenkinsfile()名字必须与你共享库中jenkinsfile.groovy名一致，否则报错</span><br><span class="line">def myjenkinsfile = new org.devops.jenkinsfile()</span><br><span class="line"></span><br><span class="line">// 流水线（主）</span><br><span class="line">pipeline &#123;</span><br><span class="line">agent any</span><br><span class="line">tools &#123;</span><br><span class="line">git &#x27;git&#x27;</span><br><span class="line">&#125;</span><br><span class="line">stages &#123;</span><br><span class="line">stage(&quot;Create Branch&quot;) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">script &#123;</span><br><span class="line">// 然后就可以调用共享库中的方法了 myjenkinsfile 即为我上面引用的方法（可在上面自定义）</span><br><span class="line">ProjectID = myjenkinsfile.GetProjectID(&quot;$&#123;env.ProjectName&#125;&quot;)</span><br><span class="line">myjenkinsfile.CreateBranch(ProjectID, &quot;$&#123;env.NewBranchName&#125;&quot;, &quot;$&#123;env.BaseBranchName&#125;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、同样将流水线脚本也进行 Git 版本管理</p><blockquote><p>这样的话便于管理 Jenkinfile 及共享库</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723153913871.png" alt="image-20220723153913871"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723162121271.png" alt="image-20220723162121271"></p><h3 id="3-3-Jenkins-配置"><a href="#3-3-Jenkins-配置" class="headerlink" title="3.3 Jenkins 配置"></a>3.3 Jenkins 配置</h3><p>1、Jenkins 流水线配置</p><p>因为我们的流水线脚本进行了 Git 版本管理，所以你可以在 Jenkins 流水线配置中配置 URL 即可。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723155806926.png" alt="image-20220723155806926"></p><p>2、Jenkins 系统配置</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723161609360.png" alt="image-20220723161609360"></p><h3 id="3-4-Jenkins-构建"><a href="#3-4-Jenkins-构建" class="headerlink" title="3.4 Jenkins 构建"></a>3.4 Jenkins 构建</h3><p>以上都配置好之后，接下来就开始构建了。</p><p>1、Jenkins 构建</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723190934794.png" alt="image-20220723190934794"></p><p>2、Gitlab 查看是否构建成功</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220723190856525.png" alt="image-20220723190856525"></p><p>&#x3D;&#x3D;至此，已实现 Jenkins 如何调用 Gitlab API 及 Jenkins 共享库的最终应用。&#x3D;&#x3D;</p><h3 id="3-5-扩展"><a href="#3-5-扩展" class="headerlink" title="3.5 扩展"></a>3.5 扩展</h3><blockquote><p>共享库加载扩展。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载testlib共享库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">共享库名可自定义，但必须和Jenkins系统配置中配置的共享库名保持一致</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为Jenkins配置了共享库的git地址，如果不一致的话，在加载共享库时就会找不到共享库</span></span><br><span class="line">@Library(&#x27;testlib&#x27;) _</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载testlib共享库的1.0版本</span></span><br><span class="line">@Library(&#x27;testlib@1.0&#x27;) _</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载多个共享库</span></span><br><span class="line">@Library([&#x27;testlib&#x27;, &#x27;testlib@1.0&#x27;]) _</span><br></pre></td></tr></table></figure><h2 id="四、邮件配置"><a href="#四、邮件配置" class="headerlink" title="四、邮件配置"></a>四、邮件配置</h2><h3 id="4-1-Jenkins-配置"><a href="#4-1-Jenkins-配置" class="headerlink" title="4.1 Jenkins 配置"></a>4.1 Jenkins 配置</h3><p>1、安装邮件插件</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220726101813745.png" alt="image-20220726101813745"></p><p>2、服务器地址及相关端口</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220726103143647.png" alt="image-20220726103143647"></p><p>3、系统配置ZRSanqy@123</p><blockquote><p>此处我使用163邮箱来演示。</p></blockquote><ul><li><p>先查看163邮箱的服务器地址</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220726102038591.png" alt="image-20220726102038591"></p></li><li><p>系统配置–&gt;E-mail Notification</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220726104650219.png" alt="image-20220726104650219"></p></li><li><p>注意：上图中的 <code>Use SMTP Authentication</code> 邮件地址必须与下列地址保持一致。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220726105057878.png" alt="image-20220726105057878"></p></li></ul><h3 id="4-2-Jenkinsfile-配置"><a href="#4-2-Jenkinsfile-配置" class="headerlink" title="4.2 Jenkinsfile 配置"></a>4.2 Jenkinsfile 配置</h3><p>保留…后续补充</p><h3 id="4-3-邮件内容参考模板"><a href="#4-3-邮件内容参考模板" class="headerlink" title="4.3 邮件内容参考模板"></a>4.3 邮件内容参考模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;ENV, var=&quot;JOB_NAME&quot;&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">topmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;95%&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            本邮件由系统自动发出，无需回复！<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            各位同事，大家好，以下为$&#123;PROJECT_NAME &#125;项目构建信息<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#CC0000&quot;</span>&gt;</span>构建结果 - $&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称 ： $&#123;PROJECT_NAME&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号 ： 第$&#123;BUILD_NUMBER&#125;次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因： $&#123;CAUSE&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建状态： $&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;console&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作目录 ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;ws&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>报告  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;allure<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>失败用例<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line">$FAILED_TESTS<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>最近提交(#$SVN_REVISION)<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">$&#123;CHANGES_SINCE_LAST_SUCCESS, reverse=true, format=&quot;%c&quot;, changesFormat=&quot;<span class="tag">&lt;<span class="name">li</span>&gt;</span>%d [%a] %m<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&quot;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">详细提交: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;changes&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;changes<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、项目构建"><a href="#五、项目构建" class="headerlink" title="五、项目构建"></a>五、项目构建</h2><h3 id="5-1-前端项目"><a href="#5-1-前端项目" class="headerlink" title="5.1 前端项目"></a>5.1 前端项目</h3><h4 id="5-1-1-npm"><a href="#5-1-1-npm" class="headerlink" title="5.1.1 npm"></a>5.1.1 npm</h4><p>1、工具下载地址</p><p><a href="https://nodejs.org/en/download/">官方下载地址</a></p><p>2、常用命令</p><ul><li>npm install &lt;模块名&gt; -g     包安装到全局；</li><li>npm list   查看当前已经安装的包；</li><li>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a>   设置淘宝源；</li><li>npm config set cache “&#x2F;opt&#x2F;npmcache&#x2F;“   设置缓存路径。</li></ul><h4 id="5-1-2-yarn"><a href="#5-1-2-yarn" class="headerlink" title="5.1.2 yarn"></a>5.1.2 yarn</h4><p>facebook 取代了 npm 的包管理工具，速度快、yarn 缓存包无需重复下载，安装速度快。</p><p>1、安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br><span class="line">yarn info</span><br></pre></td></tr></table></figure><p>2、常用命令</p><ul><li>yarn</li><li>yarn install</li><li>yarn config set cache-folder “&#x2F;opt&#x2F;yarncache”</li></ul><h3 id="5-2-后端项目"><a href="#5-2-后端项目" class="headerlink" title="5.2 后端项目"></a>5.2 后端项目</h3><h4 id="5-2-1-mavn"><a href="#5-2-1-mavn" class="headerlink" title="5.2.1 mavn"></a>5.2.1 mavn</h4><p>1、工具下载地址</p><p><a href="http://maven.apache.org/download.cgi">官方下载地址</a></p><p>2、常用命令</p><ul><li>mvn clean  清理构建目录；</li><li>mvn clean package  打包；</li><li>mvn clean install  打包部署；</li><li>mvn clean test  单元测试；</li><li>mvn clean package -f ..&#x2F;pom.xml   -f 指定 pom 文件位置；</li><li>mvn clean package -DskipTests   跳过单元测试；</li><li>mvn clean package -Dmaven.test.skip&#x3D;true   跳过单元测试；</li><li>mvn deploy  发布包到制品库。</li></ul><h4 id="5-2-2-gradle"><a href="#5-2-2-gradle" class="headerlink" title="5.2.2 gradle"></a>5.2.2 gradle</h4><p>gradle 基于 groovy，具有灵活强大的构建系统，能帮我们构建更复杂的项目。</p><p>1、工具下载地址</p><p><a href="https://gradle.org/releases/">官方下载地址</a></p><p>2、常用命令</p><ul><li>gradle build  构建项目；</li><li>gradle build -x test  跳过单元测试；</li><li>gradle clean  清空构建目录。</li></ul><h4 id="5-2-3-ant"><a href="#5-2-3-ant" class="headerlink" title="5.2.3 ant"></a>5.2.3 ant</h4><p>1、工具下载地址</p><p><a href="https://ant.apache.org/bindownload.cgi">官方下载地址</a></p><p>2、常用命令</p><ul><li>ant   构建；</li><li>ant -f ..&#x2F;build.xml   -f 指定 xml 文件。</li></ul><h3 id="5-3-Go-项目"><a href="#5-3-Go-项目" class="headerlink" title="5.3 Go 项目"></a>5.3 Go 项目</h3><p>1、工具下载地址</p><p><a href="https://studygolang.com/dl">官方下载地址</a></p><p>2、常用命令</p><ul><li>go build   构建源文件；</li><li>go clean  清空构建目录；</li><li>go doc   生成 godoc 文档；</li><li>go install   编译并安装指定的代码包；</li><li>go fmt   代码格式化；</li><li>go get   获取一个包；</li><li>go run   运行一个 go 文件；</li><li>go test   运行测试。</li></ul><h3 id="5-4-综合案例"><a href="#5-4-综合案例" class="headerlink" title="5.4 综合案例"></a>5.4 综合案例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">// git拉取代码</span><br><span class="line">def GetCode(SrcType, BranchName, GitHttpURL) &#123;</span><br><span class="line">    if (SrcType == &quot;git&quot;) &#123;</span><br><span class="line">        println(&quot;下载代码 --&gt; 分支： $&#123;BranchName&#125;&quot;)</span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;,</span><br><span class="line">            branches: [[name: &quot;$&#123;BranchName&#125;&quot;]],</span><br><span class="line">            extensions: [],</span><br><span class="line">            userRemoteConfigs: [[url: &quot;$&#123;GitHttpURL&#125;&quot;, credentialsId: &#x27;git-pull&#x27;,]]</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 构建类型</span><br><span class="line">def Build(BuildTools, BuildType) &#123;</span><br><span class="line">    switch(BuildType) &#123;</span><br><span class="line">        case &quot;maven&quot;:</span><br><span class="line">            sh &quot;$&#123;BuildTools[&quot;maven&quot;]&#125;/bin/mvn clean install -pl game-hall -am -Dmaven.test.skip=true -P test&quot;</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">        case &quot;gradle&quot;:</span><br><span class="line">            sh &quot;$&#123;BuildTools[&quot;gradle&quot;]&#125;/bin/gradle build -x test&quot;</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">        case &quot;npm&quot;:</span><br><span class="line">            sh &quot;&quot;&quot;$&#123;BuildTools[&quot;web&quot;]&#125;/bin/npm install &amp;&amp; $&#123;BuildTools[&quot;web&quot;]&#125;/bin/npm run build&quot;&quot;&quot;</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">        case &quot;golang&quot;:</span><br><span class="line">            sh &quot;$&#123;BuildTools[&quot;golang&quot;]&#125;/bin/go build demo.go&quot;    </span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">        default :</span><br><span class="line">            println(&quot;BuildType ==&gt; [maven|gradle|web|golang]&quot;)</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 变量定义</span><br><span class="line">// 构建工具变量（数组）</span><br><span class="line">def BuildTools = [&quot;maven&quot;: &quot;/opt/work/apache-maven-3.8.5&quot;, </span><br><span class="line">                &quot;gradle&quot;: &quot;/opt/work/gradle-6.8.3&quot;,</span><br><span class="line">                &quot;npm&quot;: &quot;/opt/work/node-v16.15.1-linux-x64&quot;,</span><br><span class="line">                &quot;yarn&quot;: &quot;/opt/work/yarn-xxx&quot;,</span><br><span class="line">                &quot;golang&quot;: &quot;/opt/work/go&quot;]</span><br><span class="line">// 构建相关变量（字符串）</span><br><span class="line">String BranchName = &quot;$&#123;env.BranchName&#125;&quot;</span><br><span class="line">String GitHttpURL = &quot;$&#123;env.GitHttpURL&#125;&quot;</span><br><span class="line">String BuildType = &quot;$&#123;env.BuildType&#125;&quot;</span><br><span class="line">String SrcType = &quot;$&#123;env.SrcType&#125;&quot;</span><br><span class="line"></span><br><span class="line">// 流水线</span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    options &#123;</span><br><span class="line">        skipDefaultCheckout true</span><br><span class="line">    &#125;</span><br><span class="line">    parameters &#123;</span><br><span class="line">        choice(name: &#x27;GitHttpURL&#x27;,</span><br><span class="line">                            choices: [&#x27;ssh://git@192.168.56.133:2022/root/tq.git&#x27;],</span><br><span class="line">                            description: &#x27;⚠ 选择项目URL&#x27;,)</span><br><span class="line">        gitParameter (name: &#x27;BranchName&#x27;,</span><br><span class="line">                        type: &#x27;PT_BRANCH&#x27;,</span><br><span class="line">                        branchFilter: &#x27;origin/(.*)&#x27;,</span><br><span class="line">                        defaultValue: &#x27;main&#x27;,</span><br><span class="line">                        selectedValue: &#x27;DEFAULT&#x27;,</span><br><span class="line">                        sortMode: &#x27;DESCENDING_SMART&#x27;,</span><br><span class="line">                        description: &#x27;⚠ 选择构建分支或标签&#x27;)</span><br><span class="line">        choice(name: &#x27;SrcType&#x27;,</span><br><span class="line">                            choices: [&#x27;git&#x27;, &#x27;svn&#x27;],</span><br><span class="line">                            description: &#x27;⚠ 选择代码版本控制工具&#x27;,)</span><br><span class="line">        choice(name: &#x27;BuildType&#x27;,</span><br><span class="line">                            choices: [&#x27;maven&#x27;, &#x27;gradle&#x27;, &#x27;npm&#x27;, &#x27;yarn&#x27;, &#x27;goloang&#x27;],</span><br><span class="line">                            description: &#x27;⚠ 选择对应构建工具&#x27;,)</span><br><span class="line">        choice(name: &#x27;SEV&#x27;,</span><br><span class="line">                            choices: [&#x27;192.168.56.133&#x27;],</span><br><span class="line">                            description: &#x27;⚠ 选择测试环境内网服务器&#x27;,)</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&quot;GetCode&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    GetCode(SrcType, BranchName, GitHttpURL)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&quot;Build&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    Build(BuildTools, BuildType)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，上面的案例也可写入共享库类，具体方法查看文档<code>第三节</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">// 加载共享库</span><br><span class="line">@Library([&#x27;gitscmlib@main&#x27;, &#x27;mytoolslib@main&#x27;]) _</span><br><span class="line">def Mygit = new org.devops.gitscm()</span><br><span class="line">def Mytool = new org.devops.mytools()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 变量定义</span><br><span class="line">// 构建工具变量（数组）</span><br><span class="line">def BuildTools = [&quot;maven&quot;: &quot;/opt/work/apache-maven-3.8.5&quot;, </span><br><span class="line">                &quot;gradle&quot;: &quot;/opt/work/gradle-6.8.3&quot;,</span><br><span class="line">                &quot;npm&quot;: &quot;/opt/work/node-v16.15.1-linux-x64&quot;,</span><br><span class="line">                &quot;yarn&quot;: &quot;/opt/work/yarn-xxx&quot;,</span><br><span class="line">                &quot;golang&quot;: &quot;/opt/work/go&quot;]</span><br><span class="line">// 构建相关变量（字符串）</span><br><span class="line">String BranchName = &quot;$&#123;env.BranchName&#125;&quot;</span><br><span class="line">String GitHttpURL = &quot;$&#123;env.GitHttpURL&#125;&quot;</span><br><span class="line">String BuildType = &quot;$&#123;env.BuildType&#125;&quot;</span><br><span class="line">String SrcType = &quot;$&#123;env.SrcType&#125;&quot;</span><br><span class="line"></span><br><span class="line">// 流水线</span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    options &#123;</span><br><span class="line">        skipDefaultCheckout true</span><br><span class="line">    &#125;</span><br><span class="line">    parameters &#123;</span><br><span class="line">        choice(name: &#x27;GitHttpURL&#x27;,</span><br><span class="line">                            choices: [&#x27;ssh://git@192.168.56.133:2022/root/tq.git&#x27;],</span><br><span class="line">                            description: &#x27;⚠ 选择项目URL&#x27;,)</span><br><span class="line">        gitParameter (name: &#x27;BranchName&#x27;,</span><br><span class="line">                        type: &#x27;PT_BRANCH&#x27;,</span><br><span class="line">                        branchFilter: &#x27;origin/(.*)&#x27;,</span><br><span class="line">                        defaultValue: &#x27;main&#x27;,</span><br><span class="line">                        selectedValue: &#x27;DEFAULT&#x27;,</span><br><span class="line">                        sortMode: &#x27;DESCENDING_SMART&#x27;,</span><br><span class="line">                        description: &#x27;⚠ 选择构建分支或标签&#x27;)</span><br><span class="line">        choice(name: &#x27;SrcType&#x27;,</span><br><span class="line">                            choices: [&#x27;git&#x27;, &#x27;svn&#x27;],</span><br><span class="line">                            description: &#x27;⚠ 选择代码版本控制工具&#x27;,)</span><br><span class="line">        choice(name: &#x27;BuildType&#x27;,</span><br><span class="line">                            choices: [&#x27;maven&#x27;, &#x27;gradle&#x27;, &#x27;npm&#x27;, &#x27;yarn&#x27;, &#x27;goloang&#x27;],</span><br><span class="line">                            description: &#x27;⚠ 选择对应构建工具&#x27;,)</span><br><span class="line">        choice(name: &#x27;SEV&#x27;,</span><br><span class="line">                            choices: [&#x27;192.168.56.133&#x27;],</span><br><span class="line">                            description: &#x27;⚠ 选择测试环境内网服务器&#x27;,)</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&quot;GetCode&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    Mygit.GetCode(SrcType, BranchName, GitHttpURL)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&quot;Build&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    Mytool.Build(BuildTools, BuildType)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面构建时，项目名称是写死的，如何获取项目名称呢？两种方法：调用 Gitlab API、参数化选项手写。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">// git拉取代码</span><br><span class="line">def GetCode(SrcType, BranchName, GitHttpURL) &#123;</span><br><span class="line">    if (SrcType == &quot;git&quot;) &#123;</span><br><span class="line">        println(&quot;下载代码 --&gt; 分支： $&#123;BranchName&#125;&quot;)</span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;,</span><br><span class="line">            branches: [[name: &quot;$&#123;BranchName&#125;&quot;]],</span><br><span class="line">            extensions: [],</span><br><span class="line">            userRemoteConfigs: [[url: &quot;$&#123;GitHttpURL&#125;&quot;, credentialsId: &#x27;git-pull&#x27;,]]</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 构建类型</span><br><span class="line">def Build(BuildTools, BuildType, BuildProject) &#123;</span><br><span class="line">    switch(BuildType) &#123;</span><br><span class="line">        case &quot;maven&quot;:</span><br><span class="line">        // 这里可以加个if判断语句，来选择是构建所有包还是独立包</span><br><span class="line">            sh &quot;$&#123;BuildTools[&quot;maven&quot;]&#125;/bin/mvn clean install -pl $&#123;BuildProject&#125; -am -Dmaven.test.skip=true -P test&quot;</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">        case &quot;gradle&quot;:</span><br><span class="line">            sh &quot;$&#123;BuildTools[&quot;gradle&quot;]&#125;/bin/gradle build -x test&quot;</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">        case &quot;npm&quot;:</span><br><span class="line">            sh &quot;&quot;&quot;$&#123;BuildTools[&quot;web&quot;]&#125;/bin/npm install &amp;&amp; $&#123;BuildTools[&quot;web&quot;]&#125;/bin/npm run build&quot;&quot;&quot;</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">        case &quot;golang&quot;:</span><br><span class="line">            sh &quot;$&#123;BuildTools[&quot;golang&quot;]&#125;/bin/go build demo.go&quot;    </span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">        default :</span><br><span class="line">            println(&quot;BuildType ==&gt; [maven|gradle|web|golang]&quot;)</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 请求地址</span><br><span class="line">def HttpReq(ApiUrl, Method) &#123;</span><br><span class="line">    GitlabAPI = &quot;http://192.168.56.133/api/v4&quot;</span><br><span class="line">    withCredentials([string(credentialsId: &#x27;gitlab-create-branch&#x27;, variable: &#x27;Gitlab_Token&#x27;)]) &#123;</span><br><span class="line">        response = sh returnStdout: true, script: &quot;&quot;&quot;</span><br><span class="line">            curl --location --request $&#123;Method&#125; \</span><br><span class="line">                &quot;$&#123;GitlabAPI&#125;/$&#123;ApiUrl&#125;&quot; \</span><br><span class="line">                --header &quot;PRIVATE-TOKEN: $&#123;Gitlab_Token&#125;&quot;</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    return response</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取项目名</span><br><span class="line">def AllListRepositoryTree() &#123;</span><br><span class="line">    ApiUrl = &quot;projects/3/repository/tree&quot;</span><br><span class="line">    Method = &quot;GET&quot;</span><br><span class="line">    result = HttpReq(ApiUrl, Method)</span><br><span class="line">    result = readJSON text: result</span><br><span class="line">    return result[9][&quot;name&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 变量定义</span><br><span class="line">// 构建工具变量（数组）</span><br><span class="line">def BuildTools = [&quot;maven&quot;: &quot;/opt/work/apache-maven-3.8.5&quot;, </span><br><span class="line">                &quot;gradle&quot;: &quot;/opt/work/gradle-6.8.3&quot;,</span><br><span class="line">                &quot;npm&quot;: &quot;/opt/work/node-v16.15.1-linux-x64&quot;,</span><br><span class="line">                &quot;yarn&quot;: &quot;/opt/work/yarn-xxx&quot;,</span><br><span class="line">                &quot;golang&quot;: &quot;/opt/work/go&quot;]</span><br><span class="line">// 构建相关变量（字符串）</span><br><span class="line">String BranchName = &quot;$&#123;env.BranchName&#125;&quot;</span><br><span class="line">String GitHttpURL = &quot;$&#123;env.GitHttpURL&#125;&quot;</span><br><span class="line">String BuildType = &quot;$&#123;env.BuildType&#125;&quot;</span><br><span class="line">String SrcType = &quot;$&#123;env.SrcType&#125;&quot;</span><br><span class="line"></span><br><span class="line">// 流水线</span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    options &#123;</span><br><span class="line">        skipDefaultCheckout true</span><br><span class="line">    &#125;</span><br><span class="line">    parameters &#123;</span><br><span class="line">        choice(name: &#x27;GitHttpURL&#x27;,</span><br><span class="line">                            choices: [&#x27;ssh://git@192.168.56.133:2022/root/tq.git&#x27;],</span><br><span class="line">                            description: &#x27;⚠ 选择项目URL&#x27;,)</span><br><span class="line">        gitParameter (name: &#x27;BranchName&#x27;,</span><br><span class="line">                        type: &#x27;PT_BRANCH&#x27;,</span><br><span class="line">                        branchFilter: &#x27;origin/(.*)&#x27;,</span><br><span class="line">                        defaultValue: &#x27;main&#x27;,</span><br><span class="line">                        selectedValue: &#x27;DEFAULT&#x27;,</span><br><span class="line">                        sortMode: &#x27;DESCENDING_SMART&#x27;,</span><br><span class="line">                        description: &#x27;⚠ 选择构建分支或标签&#x27;)</span><br><span class="line">        choice(name: &#x27;SrcType&#x27;,</span><br><span class="line">                            choices: [&#x27;git&#x27;, &#x27;svn&#x27;],</span><br><span class="line">                            description: &#x27;⚠ 选择代码版本控制工具&#x27;,)</span><br><span class="line">        choice(name: &#x27;BuildType&#x27;,</span><br><span class="line">                            choices: [&#x27;maven&#x27;, &#x27;gradle&#x27;, &#x27;npm&#x27;, &#x27;yarn&#x27;, &#x27;goloang&#x27;],</span><br><span class="line">                            description: &#x27;⚠ 选择对应构建工具&#x27;,)</span><br><span class="line">        choice(name: &#x27;SEV&#x27;,</span><br><span class="line">                            choices: [&#x27;192.168.56.133&#x27;],</span><br><span class="line">                            description: &#x27;⚠ 选择测试环境内网服务器&#x27;,)</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&quot;GetCode&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    GetCode(SrcType, BranchName, GitHttpURL)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&quot;Build&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    BuildProject = AllListRepositoryTree()</span><br><span class="line">                    Build(BuildTools, BuildType, &quot;$&#123;BuildProject&#125;&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，上面的流水线只有获取项目和构建项目的步骤，实际生产中还有发布、发布后操作环节，这里不再演示。</p><h3 id="5-5-WebHook"><a href="#5-5-WebHook" class="headerlink" title="5.5 WebHook"></a>5.5 WebHook</h3><blockquote><p>整体流程：</p></blockquote><ul><li>用户提交代码到 Git；</li><li>当代码提交到 Git 时根据你定义的规则自动触发构建。</li></ul><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220728142557050.png" alt="image-20220728142557050"></p><p>1、Jenkins 创建工程</p><blockquote><p>创建名为 <code>webhook-test</code> 的流水线工程。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220728103637104.png" alt="image-20220728103637104"></p><p>2、安装 WebHook 插件</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220728104314245.png" alt="image-20220728104314245"></p><p>3、生成触发 WebHook URL</p><blockquote><p>在 Jenkins 对应的工程项目配置中生成：</p><p>jenkins-webhook-test</p></blockquote><p><a href="http://192.168.56.131:8080/generic-webhook-trigger/invoke?token=jenkins-webhook-test">http://192.168.56.131:8080/generic-webhook-trigger/invoke?token=jenkins-webhook-test</a></p><p>正则匹配：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只有满足匹配master或production分支的情况下，且git项目名满足匹配字母或-大于1，且触发者（代码提交者）不能是rab，才能触发构建。</span></span><br><span class="line">表达式：refs/heads/(master|production)_[a-zA-Z0-9-]&#123;1&#125;_(?|rab)</span><br><span class="line">针对哪些变量：$ref_$project_$username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">feiji：http://39.97.189.19:3031/</span><br><span class="line">paopaolong：http://39.97.189.19:3032/</span><br><span class="line">xiaoxiaole：http://39.97.189.19:3033/</span><br><span class="line">zuma：http://39.97.189.19:3034/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、Gitlab 配置</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220728111656807.png" alt="image-20220728111656807"></p><blockquote><p>JENKINS_URL 换成你的 Jenkins IP 地址</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220728113442233.png" alt="image-20220728113442233"></p><blockquote><p>测试这个 URL 是否可用</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220728120755915.png" alt="image-20220728120755915"></p><blockquote><p>看输出结果</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220728120654191.png" alt="image-20220728120654191"></p><blockquote><p>如果报 <code>Url is blocked: Requests to the local network are not allowed</code></p><p>配置一下 Gitlab 即可。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220728121033555.png" alt="image-20220728121033555"></p><h2 id="六、SonarQube"><a href="#六、SonarQube" class="headerlink" title="六、SonarQube"></a>六、SonarQube</h2><blockquote><p>该工具一般部署于 Jenkins 服务上。</p></blockquote><h3 id="6-1-工作原理"><a href="#6-1-工作原理" class="headerlink" title="6.1 工作原理"></a>6.1 工作原理</h3><p><code>SonarQube</code> 是一种自动代码审查工具，可检测代码中的错误、漏洞等，其可与现有 CICD 工具实现集成，从而实现跨项目分支和拉取请求的持续代码检测，其工作流程如下图所示。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/dev-cycle.png" alt="SonarQube Instance Components"></p><h3 id="6-2-安装部署"><a href="#6-2-安装部署" class="headerlink" title="6.2 安装部署"></a>6.2 安装部署</h3><p>1、创建数据目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/sonarqube/&#123;conf,extensions,logs,data&#125;</span><br></pre></td></tr></table></figure><p>2、启动临时容器</p><blockquote><p>copy lib 文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动临时容器</span></span><br><span class="line">docker run -itd \</span><br><span class="line">       --user root \</span><br><span class="line">       --privileged=true  \</span><br><span class="line">       --name=temp \</span><br><span class="line">       --restart=always \</span><br><span class="line">       sonarqube:8.9.0-community</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">copy lib</span></span><br><span class="line">cd /data/sonarqube/</span><br><span class="line">docker cp temp:/opt/sonarqube/lib ./</span><br></pre></td></tr></table></figure><p>3、启动最终容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除临时容器</span></span><br><span class="line">docker stop temp</span><br><span class="line">docker rm temp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行新容器</span></span><br><span class="line">docker run -itd \</span><br><span class="line">       --user root \</span><br><span class="line">       --privileged=true  \</span><br><span class="line">       --name=sonarqube \</span><br><span class="line">       --restart=always \</span><br><span class="line">       -p 9000:9000 \</span><br><span class="line">       -v /data/sonarqube/conf:/opt/sonarqube/conf \</span><br><span class="line">       -v /data/sonarqube/extensions:/opt/sonarqube/extensions \</span><br><span class="line">       -v /data/sonarqube/logs:/opt/sonarqube/logs \</span><br><span class="line">       -v /data/sonarqube/data:/opt/sonarqube/data \</span><br><span class="line">       -v /data/sonarqube/lib:/opt/sonarqube/lib \</span><br><span class="line">       -v /etc/localtime:/etc/localtime \</span><br><span class="line">       sonarqube:8.9.0-community</span><br></pre></td></tr></table></figure><p>4、登录验证</p><blockquote><p><a href="http://ip:9000/">http://ip:9000/</a></p><p>初始用户：admin</p><p>初始密码：admin</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727111525551.png" alt="image-20220727111525551"></p><blockquote><p>修改初始密码</p><p>新密码为：zhurs@123</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727111641308.png" alt="image-20220727111641308"></p><blockquote><p>系统界面</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727111754461.png" alt="image-20220727111754461"></p><h3 id="6-3-基础配置"><a href="#6-3-基础配置" class="headerlink" title="6.3 基础配置"></a>6.3 基础配置</h3><h4 id="6-3-1-安装插件"><a href="#6-3-1-安装插件" class="headerlink" title="6.3.1 安装插件"></a>6.3.1 安装插件</h4><p>1、在线安装</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727112240587.png" alt="image-20220727112240587"></p><blockquote><p>此时你发现并没有 <code>Install</code> 安装按钮，此时你需要点击 <code>I understand the risk</code>（即我接收安装风险），此时你就会看到 <code>Install</code> 安装按钮了。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727112709859.png" alt="image-20220727112709859"></p><blockquote><p>这是一个中文插件，安装完成后重启 SonarQube 生效。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart sonarqube</span><br></pre></td></tr></table></figure><blockquote><p>再次验证插件是否被安装（web端是否正常显示中文）</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727112954126.png" alt="image-20220727112954126"></p><p>&#x3D;&#x3D;如何卸载插件？&#x3D;&#x3D;</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727113304523.png" alt="image-20220727113304523"></p><p>2、离线安装</p><ul><li><p>插件下载地址：<a href="https://update.sonarsource.org/">传送门</a></p></li><li><p>插件版本与 <code>sonarqube</code> 版本兼容对照表：<a href="https://docs.sonarqube.org/latest/instance-administration/plugin-version-matrix/">传送门</a></p></li><li><p>上传插件至 <code>sonarqube</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插件上传至该目录下</span></span><br><span class="line">cd /data/sonarqube/extensions/downloads</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wget或本地下载后上传</span></span><br><span class="line">wget https://github.com/xuhuisheng/sonar-l10n-zh/releases/download/sonar-l10n-zh-plugin-9.5/sonar-l10n-zh-plugin-9.5.jar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋予可执行权限</span></span><br><span class="line">chmod +x sonar-l10n-zh-plugin-9.5.jar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 sonarqube 生效</span></span><br><span class="line">doker restart sonarqube</span><br></pre></td></tr></table></figure></li></ul><p>&#x3D;&#x3D;常用语言插件安装&#x3D;&#x3D;</p><ul><li>Java</li></ul><h4 id="6-3-2-设置强制登录"><a href="#6-3-2-设置强制登录" class="headerlink" title="6.3.2 设置强制登录"></a>6.3.2 设置强制登录</h4><p>默认所有项目都是可以查看的，但在实际生产中是不被允许的，需要设置为私有的。并且我们需要设置用户强制，只有登录后才能查看。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727114945573.png" alt="image-20220727114945573"></p><h3 id="6-4-Scanner-扫描"><a href="#6-4-Scanner-扫描" class="headerlink" title="6.4 Scanner 扫描"></a>6.4 Scanner 扫描</h3><blockquote><p>部署于要扫描项目的服务器上。</p></blockquote><h4 id="6-4-1-安装部署"><a href="#6-4-1-安装部署" class="headerlink" title="6.4.1 安装部署"></a>6.4.1 安装部署</h4><p>1、下载二进制包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.0.2311-linux.zip</span><br></pre></td></tr></table></figure><p>2、配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">unzip sonar-scanner-cli-4.6.0.2311-linux.zip</span><br><span class="line">mv sonar-scanner-4.6.0.2311-linux/ /opt/ &amp;&amp; mv /opt/sonar-scanner-4.6.0.2311-linux/ /opt/scanner</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">环境变量</span></span><br><span class="line">vim /etc/profile.d/scanner.sh</span><br><span class="line">export PATH=/opt/scanner/bin:$PATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重载变量</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本（scanner的JDK版本为11）</span></span><br><span class="line">[root@jenkins-master opt]# sonar-scanner -v</span><br><span class="line">INFO: Scanner configuration file: /opt/scanner/conf/sonar-scanner.properties</span><br><span class="line">INFO: Project root configuration file: NONE</span><br><span class="line">INFO: SonarScanner 4.6.0.2311</span><br><span class="line">INFO: Java 11.0.3 AdoptOpenJDK (64-bit)</span><br><span class="line">INFO: Linux 3.10.0-1160.el7.x86_64 amd64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">而我的服务器安装的是1.8版本的（两者需统一下）为什么与本地不一致呢？因为sonar-scanner中默认集成了jre环境</span></span><br><span class="line">[root@jenkins-master opt]# java -version</span><br><span class="line">java version &quot;1.8.0_202&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_202-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)</span><br></pre></td></tr></table></figure><p>3、修改 scanner 的JDK版本</p><blockquote><p>一般默认即可</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/scanner/bin/sonar-scanner</span><br></pre></td></tr></table></figure><ul><li><p>修改前</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727121534997.png" alt="image-20220727121534997"></p></li><li><p>修改后</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727121616196.png" alt="image-20220727121616196"></p></li><li><p>再次查看 JDK 版本</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727121802813.png" alt="image-20220727121802813"></p></li></ul><h4 id="6-4-2-基本使用"><a href="#6-4-2-基本使用" class="headerlink" title="6.4.2 基本使用"></a>6.4.2 基本使用</h4><p>1、配置文件方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认配置文件</span></span><br><span class="line">ll /opt/scanner/conf/sonar-scanner.properties</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义唯一的关键字</span></span><br><span class="line">sonar.projectKey=devops-hello-service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义项目名称</span></span><br><span class="line">sonar.projectName=My project</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义项目的版本信息</span></span><br><span class="line">sonar.projectVersion=1.0</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定扫描代码的目录位置（多个逗号分隔）</span></span><br><span class="line">sonar.sources=.</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行项目编码</span></span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br><span class="line"></span><br><span class="line">sonar.host.url=http://xxxx:9000</span><br><span class="line">sonar.login=xxx</span><br><span class="line">sonar.password=xxx</span><br></pre></td></tr></table></figure><blockquote><p>当配置文件配置好后，就可以指定配置文件启动扫描程序了。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动扫描（指定配置文件）</span></span><br><span class="line">sonar-scanner -Dproject.settings=sonar-scanner.properties</span><br></pre></td></tr></table></figure><p>2、命令行方式</p><blockquote><p>如果你没有在配置文件（sonar-scanner.properties）中配置，也可使用命令行方式来传递参数</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行传参</span></span><br><span class="line">sonar-scanner -Dsonar.projectKey=myproject \</span><br><span class="line">              -Dsonar.sources=src1 \</span><br><span class="line">              -Dsonar.sourceEncoding=UTF-8</span><br><span class="line">              ... \</span><br><span class="line">              ...</span><br></pre></td></tr></table></figure><h4 id="6-4-3-项目扫描"><a href="#6-4-3-项目扫描" class="headerlink" title="6.4.3 项目扫描"></a>6.4.3 项目扫描</h4><p>1、Java</p><blockquote><p>初始化一个 Java demo</p></blockquote><p>快速生成：<a href="https://start.spring.io/">https://start.spring.io/</a></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727153337942.png" alt="image-20220727153337942"></p><blockquote><p>上传至 Gitlab</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727155100698.png" alt="image-20220727155100698"></p><blockquote><p>本地手动构建一下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone http://192.168.56.133/root/demo.git</span><br><span class="line">cd demo</span><br><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><blockquote><p>SonarQube 安装 Java 语言插件（该版本默认已经安装了）</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727161259149.png" alt="image-20220727161259149"></p><blockquote><p>开始扫描</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式一：命令行  执行后会在sonarqube上自动创建你指定的相关项目信息及分析结果（在拉取gitlab项目的家目录执行）</span></span><br><span class="line">sonar-scanner -Dsonar.host.url=http://192.168.56.131:9000 \</span><br><span class="line">-Dsonar.projectKey=rab_test_1 \</span><br><span class="line">-Dsonar.projectName=rab_test-1 \</span><br><span class="line">-Dsonar.projectVersion=1.0 \</span><br><span class="line">-Dsonar.login=admin \</span><br><span class="line">-Dsonar.password=zhurs@123 \</span><br><span class="line">-Dsonar.ws.timeout=30 \</span><br><span class="line">-Dsonar.projectDescription=&quot;my first project!&quot; \</span><br><span class="line">-Dsonar.links.homepage=http://192.168.56.131/devops/devops-maven-service \</span><br><span class="line">-Dsonar.links.ci=http://192.168.56.131:8080/job/其他/job/test/ \</span><br><span class="line">-Dsonar.sources=src \</span><br><span class="line">-Dsonar.sourceEncoding=UTF-8 \</span><br><span class="line">-Dsonar.java.binaries=target/classes \</span><br><span class="line">-Dsonar.java.test.binaries=target/test-classes \</span><br><span class="line">-Dsonar.java.surefire.report=target/surefire-reports</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二：命令行  提前在sonarqube上创建了项目，并生成了以下语句（在拉取gitlab项目的家目录执行）</span></span><br><span class="line">mvn sonar:sonar \</span><br><span class="line">  -Dsonar.projectKey=demo \</span><br><span class="line">  -Dsonar.host.url=http://192.168.56.131:9000 \</span><br><span class="line">  -Dsonar.login=f58b2783878a817320b834b57ba3323e17b2b325</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727170318256.png" alt="image-20220727170318256"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727170106848.png" alt="image-20220727170106848"></p><p>2、前端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sonar.projectKey=devops-web-service</span><br><span class="line">sonar.projectName=devops-web-service</span><br><span class="line">sonar.projectVersion=1.0</span><br><span class="line">sonar.sources=src</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sonar.sources=dist/static/js</span></span><br><span class="line">sonar.host.url=http://192.168.56.131:9000</span><br><span class="line">sonar.login=admin</span><br><span class="line">sonar.password=zhurs@123</span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure><p>3、golang</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sonar-scanner -Dsonar.projectKey=devops-golang-service \</span><br><span class="line">-Dsonar.projectName=devops-golang-service \</span><br><span class="line">-Dsonar.sources=src \</span><br><span class="line">-Dsonar.login=admin \</span><br><span class="line">-Dsonar.password=zhurs@123 \</span><br><span class="line">-Dsonar.host.url=http://192.168.56.131:9000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 有测试用例的情况</span></span></span><br><span class="line">sonar.exclusions=**/*_test.go</span><br><span class="line">sonar.tests=.</span><br><span class="line">sonar.test.inclusions=**/*_test.go</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;Pipeline 流水线配置&#x3D;&#x3D;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">def buildTools = [  &quot;maven&quot; : &quot;/usr/local/apache-maven-3.8.1&quot;,</span><br><span class="line">                    &quot;gradle&quot;: &quot;/usr/local/gradle-6.8.3/&quot;,</span><br><span class="line">                    &quot;golang&quot;: &quot;/usr/local/go&quot;,</span><br><span class="line">                    &quot;web&quot;   : &quot;/usr/local/node-v14.16.1-linux-x64/&quot;,</span><br><span class="line">                    &quot;sonar&quot; : &quot;/usr/local/sonar-scanner-4.6.0.2311-linux&quot;]</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">// xxx</span><br><span class="line">stages&#123;</span><br><span class="line">stage(&quot;SonarScan&quot;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    sh &quot;&quot;&quot;</span><br><span class="line">                        $&#123;buildTools[&quot;sonar&quot;]&#125;/bin/sonar-scanner -Dproject.settings=sonar.properties \</span><br><span class="line">                        -Dsonar.login=admin \</span><br><span class="line">                        -Dsonar.password=admin \</span><br><span class="line">                        -Dsonar.host.url=http://192.168.56.131:9000</span><br><span class="line">                       &quot;&quot;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&quot;...&quot;) &#123;</span><br><span class="line">        // xxx</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line"> &#125; </span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;官方参数详解及各语言扫描示例&#x3D;&#x3D;</p><p>关于项目参数可以参考：<a href="https://docs.sonarqube.org/latest/analysis/analysis-parameters/">https://docs.sonarqube.org/latest/analysis/analysis-parameters/</a></p><p>各种语言的扫描示例：<a href="https://docs.sonarqube.org/latest/analysis/languages/">https://docs.sonarqube.org/latest/analysis/languages/</a></p><h4 id="6-3-4-Jenkins-插件"><a href="#6-3-4-Jenkins-插件" class="headerlink" title="6.3.4 Jenkins 插件"></a>6.3.4 Jenkins 插件</h4><blockquote><p>除了以上在配置文件、命令行、jenkinsfile（命令行的一种体现方式）进行质量检测外，也可以使用 Jenkins 插件来实现。</p></blockquote><p>1、Jenkins 安装 <code>SonarQube Scanner</code> 插件</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727175147391.png" alt="image-20220727175147391"></p><p>2、SonarQube 生成 Token</p><blockquote><p>将 Token 复制下来：6124c774af3b8c0263c4a1d03d790b1f308dd2fd</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727175627910.png" alt="image-20220727175627910"></p><p>3、将 Token 保存到 Jenkins 凭据中</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727180205084.png" alt="image-20220727180205084"></p><p>4、Jenkins 系统配置</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727180555462.png" alt="image-20220727180555462"></p><p>5、利用 Jenkins 片段生成器生成代码片段</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220727180816942.png" alt="image-20220727180816942"></p><p>6、流水线配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//使用sonar服务器</span><br><span class="line">stage(&quot;SonarScanForPlugin&quot;)&#123;</span><br><span class="line">steps&#123;</span><br><span class="line">script&#123;</span><br><span class="line">withSonarQubeEnv(credentialsId: &#x27;SonarQube_Token&#x27;) &#123;</span><br><span class="line">def sonarDate = sh  returnStdout: true, script: &#x27;date  +%Y%m%d%H%M%S&#x27;</span><br><span class="line">sonarDate = sonarDate - &quot;\n&quot;</span><br><span class="line"></span><br><span class="line">sh &quot;&quot;&quot;</span><br><span class="line">$&#123;buildTools[&quot;sonar&quot;]&#125;/bin/sonar-scanner \</span><br><span class="line">-Dsonar.projectKey=$&#123;JOB_NAME&#125; \</span><br><span class="line">-Dsonar.projectName=$&#123;JOB_NAME&#125; \</span><br><span class="line">-Dsonar.projectVersion=$&#123;sonarDate&#125; \</span><br><span class="line">-Dsonar.ws.timeout=30 \</span><br><span class="line">-Dsonar.projectDescription=&quot;my test project&quot; \</span><br><span class="line">-Dsonar.links.homepage=http://www.baidu.com \</span><br><span class="line">-Dsonar.sources=src \</span><br><span class="line">-Dsonar.sourceEncoding=UTF-8 \</span><br><span class="line">-Dsonar.java.binaries=target/classes \</span><br><span class="line">-Dsonar.java.test.binaries=target/test-classes \</span><br><span class="line">-Dsonar.java.surefire.report=target/surefire-reports \</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-检测流程"><a href="#6-4-检测流程" class="headerlink" title="6.4 检测流程"></a>6.4 检测流程</h3><p>1、整体流程</p><ul><li>Scanner 扫描；</li><li>将扫描结果上传 SonarQube；</li><li>SonarQube 以 Web UI 形式进行展示。</li></ul><p>&#x3D;&#x3D;2、如何查看 SonarQube API 详情？&#x3D;&#x3D;</p><ul><li><p><a href="http://192.168.56.131:9000/web_api">http://192.168.56.131:9000/web_api</a></p></li><li><p>基本接口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 查找项目</span><br><span class="line">api/projects/search?projects=$&#123;projectName&#125;&quot;</span><br><span class="line"></span><br><span class="line">// 创建项目</span><br><span class="line">api/projects/create?name=$&#123;projectName&#125;&amp;project=$&#123;projectName&#125;&quot;</span><br><span class="line">   </span><br><span class="line">// 更新语言规则集</span><br><span class="line">api/qualityprofiles/add_project?language=$&#123;language&#125;&amp;qualityProfile=$&#123;qualityProfile&#125;&amp;project=$&#123;projectName&#125;&quot;</span><br><span class="line"></span><br><span class="line">// 项目授权</span><br><span class="line">api/permissions/apply_template?projectKey=$&#123;projectKey&#125;&amp;templateName=$&#123;templateName&#125;&quot;</span><br><span class="line"></span><br><span class="line">// 更新质量阈</span><br><span class="line">api/qualitygates/select?projectKey=$&#123;projectKey&#125;&amp;gateId=$&#123;gateId&#125;&quot;</span><br></pre></td></tr></table></figure></li><li><p>具体案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">// 封装HTTP</span><br><span class="line"></span><br><span class="line">def HttpReq(reqType,reqUrl,reqBody)&#123;</span><br><span class="line">    def sonarServer = &quot;http://192.168.1.200:9000/api&quot;</span><br><span class="line">   </span><br><span class="line">    response = httpRequest authentication: &#x27;4675830a-4330-4dd6-9185-cf62161967f0&#x27;,</span><br><span class="line">            httpMode: reqType, </span><br><span class="line">            contentType: &quot;APPLICATION_JSON&quot;,</span><br><span class="line">            consoleLogResponseBody: true,</span><br><span class="line">            ignoreSslErrors: true, </span><br><span class="line">            requestBody: reqBody,</span><br><span class="line">            url: &quot;$&#123;sonarServer&#125;/$&#123;reqUrl&#125;&quot;</span><br><span class="line">            //quiet: true</span><br><span class="line">    </span><br><span class="line">    return response</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 搜索Sonar项目</span><br><span class="line">def SerarchProject(projectName)&#123;</span><br><span class="line">    apiUrl = &quot;projects/search?projects=$&#123;projectName&#125;&quot;</span><br><span class="line">    response = HttpReq(&quot;GET&quot;,apiUrl,&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    response = readJSON text: &quot;&quot;&quot;$&#123;response.content&#125;&quot;&quot;&quot;</span><br><span class="line">    result = response[&quot;paging&quot;][&quot;total&quot;]</span><br><span class="line"></span><br><span class="line">    if(result.toString() == &quot;0&quot;)&#123;</span><br><span class="line">       return &quot;false&quot;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">       return &quot;true&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取Sonar质量阈状态</span><br><span class="line">def GetProjectStatus(projectName)&#123;</span><br><span class="line">    apiUrl = &quot;project_branches/list?project=$&#123;projectName&#125;&quot;</span><br><span class="line">    response = HttpReq(&quot;GET&quot;,apiUrl,&#x27;&#x27;)</span><br><span class="line">    </span><br><span class="line">    response = readJSON text: &quot;&quot;&quot;$&#123;response.content&#125;&quot;&quot;&quot;</span><br><span class="line">    result = response[&quot;branches&quot;][0][&quot;status&quot;][&quot;qualityGateStatus&quot;]</span><br><span class="line">    </span><br><span class="line">    //println(response)</span><br><span class="line">    </span><br><span class="line">   return result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建Sonar项目</span><br><span class="line">def CreateProject(projectName)&#123;</span><br><span class="line">    apiUrl =  &quot;projects/create?name=$&#123;projectName&#125;&amp;project=$&#123;projectName&#125;&quot;</span><br><span class="line">    response = HttpReq(&quot;POST&quot;,apiUrl,&#x27;&#x27;)</span><br><span class="line">    println(response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 配置项目质量规则</span><br><span class="line">def ConfigQualityProfiles(projectName,lang,qpname)&#123;</span><br><span class="line">    apiUrl = &quot;qualityprofiles/add_project?language=$&#123;lang&#125;&amp;project=$&#123;projectName&#125;&amp;qualityProfile=$&#123;qpname&#125;&quot;</span><br><span class="line">    response = HttpReq(&quot;POST&quot;,apiUrl,&#x27;&#x27;)</span><br><span class="line">    println(response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取质量阈ID</span><br><span class="line">def GetQualtyGateId(gateName)&#123;</span><br><span class="line">    apiUrl= &quot;qualitygates/show?name=$&#123;gateName&#125;&quot;</span><br><span class="line">    response = HttpReq(&quot;GET&quot;,apiUrl,&#x27;&#x27;)</span><br><span class="line">    response = readJSON text: &quot;&quot;&quot;$&#123;response.content&#125;&quot;&quot;&quot;</span><br><span class="line">    result = response[&quot;id&quot;]</span><br><span class="line">    </span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 配置项目质量阈</span><br><span class="line">def ConfigQualityGates(projectName,gateName)&#123;</span><br><span class="line">    gateId = GetQualtyGateId(gateName)</span><br><span class="line">    apiUrl = &quot;qualitygates/select?gateId=$&#123;gateId&#125;&amp;projectKey=$&#123;projectName&#125;&quot;</span><br><span class="line">    response = HttpReq(&quot;POST&quot;,apiUrl,&#x27;&#x27;)</span><br><span class="line">    println(response)println(response)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="七、制品库管理"><a href="#七、制品库管理" class="headerlink" title="七、制品库管理"></a>七、制品库管理</h2><p>Jenkins 通过与 <code>Nexus</code> 集成，实现制品上传下载。<a href="https://nexusjs.org/">Nexus 官网</a></p><h3 id="7-1-基本概念"><a href="#7-1-基本概念" class="headerlink" title="7.1 基本概念"></a>7.1 基本概念</h3><p>通常，我们开发项目并没有使用到虚线标识的那两部分，基本都是通过本机的 Maven 直接访问中央仓库，下载jar包到本地仓库，现在我们需要搭建中间虚线部分。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221018101731235.png" alt="image-20221018101731235"></p><h3 id="7-2-服务部署"><a href="#7-2-服务部署" class="headerlink" title="7.2 服务部署"></a>7.2 服务部署</h3><p>1、创建持久化目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/data/nexus</span><br><span class="line">chmod 777 /home/data/nexus</span><br></pre></td></tr></table></figure><p>2、运行容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --name=nexus \</span><br><span class="line">  -p 8081:8081 \</span><br><span class="line">  -v /data/docker/nexus:/nexus-data sonatype/nexus3:3.42.0</span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221018102440469.png" alt="image-20221018102440469"></p><p>3、查询 Nexus 初始密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it nexus /bin/bash</span><br><span class="line">cat /opt/sonatype/sonatype-work/nexus3/admin.password</span><br><span class="line">169cee29-ae5f-481b-b153-206371d93f29</span><br></pre></td></tr></table></figure><blockquote><p>用户名：admin</p><p>密码：169cee29-ae5f-481b-b153-206371d93f29</p><p>之后再按要求重新设置新密码即可（本次新密码：zhurs@123）。</p></blockquote><p>4、验证</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220609174626174.png" alt="image-20220609174626174"></p><p>右上角这里告警了，提示 CPU 至少 4C 及以上：由于我这是测试环境，先不用理会。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221018103554065.png" alt="image-20221018103554065"></p><h3 id="7-3-基本使用"><a href="#7-3-基本使用" class="headerlink" title="7.3 基本使用"></a>7.3 基本使用</h3><p>具体使用方法看我有道云笔记<code>基础服务部署</code>部分的《Docker 部署 Nexus》，这里不再重复演示。</p><h3 id="7-4-Jenkins-集成"><a href="#7-4-Jenkins-集成" class="headerlink" title="7.4 Jenkins 集成"></a>7.4 Jenkins 集成</h3><p>1、Pipeline 脚本</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    tools &#123;</span><br><span class="line">        maven <span class="string">&quot;M3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    environment &#123;</span><br><span class="line">        NEXUS_VERSION = <span class="string">&quot;nexus3&quot;</span></span><br><span class="line">        NEXUS_PROTOCOL = <span class="string">&quot;http&quot;</span></span><br><span class="line">        NEXUS_URL = <span class="string">&quot;192.168.56.142:8081&quot;</span></span><br><span class="line">        NEXUS_REPOSITORY = <span class="string">&quot;cicd_hosted&quot;</span></span><br><span class="line">        NEXUS_CREDENTIAL_ID = <span class="string">&quot;nexus_kps&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;初始化&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                checkout([<span class="attr">$class:</span> <span class="string">&#x27;GitSCM&#x27;</span>, <span class="attr">branches:</span> [[<span class="attr">name:</span> <span class="string">&quot;v1.0.1&quot;</span>]], <span class="attr">extensions:</span> [], <span class="attr">userRemoteConfigs:</span> [[<span class="attr">credentialsId:</span> <span class="string">&#x27;aliyun-devops&#x27;</span>, <span class="attr">url:</span> <span class="string">&#x27;git@codeup.aliyun.com:6277bcbc11fc0f0c9e2990ab/RAB-ZH/java_code.git&#x27;</span>]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;Git代码拉取&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                checkout([<span class="attr">$class:</span> <span class="string">&#x27;GitSCM&#x27;</span>, <span class="attr">branches:</span> [[<span class="attr">name:</span> <span class="string">&quot;v1.0.1&quot;</span>]], <span class="attr">extensions:</span> [], <span class="attr">userRemoteConfigs:</span> [[<span class="attr">credentialsId:</span> <span class="string">&#x27;aliyun-devops&#x27;</span>, <span class="attr">url:</span> <span class="string">&#x27;git@codeup.aliyun.com:6277bcbc11fc0f0c9e2990ab/RAB-ZH/java_code.git&#x27;</span>]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&quot;Maven打包&quot;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    sh <span class="string">&quot;/var/jenkins_home/maven/bin/mvn clean package -Dmaven.test.skip=true&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&quot;推送至Nexus制品库&quot;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    pom = readMavenPom <span class="attr">file:</span> <span class="string">&quot;pom.xml&quot;</span>;</span><br><span class="line">                    filesByGlob = findFiles(<span class="attr">glob:</span> <span class="string">&quot;target/*.$&#123;pom.packaging&#125;&quot;</span>);</span><br><span class="line">                    echo <span class="string">&quot;$&#123;filesByGlob[0].name&#125; $&#123;filesByGlob[0].path&#125; $&#123;filesByGlob[0].directory&#125; $&#123;filesByGlob[0].length&#125; $&#123;filesByGlob[0].lastModified&#125;&quot;</span></span><br><span class="line">                    artifactPath = filesByGlob[<span class="number">0</span>].path;</span><br><span class="line">                    artifactExists = fileExists artifactPath;</span><br><span class="line">                    <span class="keyword">if</span>(artifactExists) &#123;</span><br><span class="line">                        echo <span class="string">&quot;*** File: $&#123;artifactPath&#125;, group: $&#123;pom.groupId&#125;, packaging: $&#123;pom.packaging&#125;, version $&#123;pom.version&#125;&quot;</span>;</span><br><span class="line">                        nexusArtifactUploader(</span><br><span class="line">                            <span class="symbol">nexusVersion:</span> NEXUS_VERSION,</span><br><span class="line">                            <span class="symbol">protocol:</span> NEXUS_PROTOCOL,</span><br><span class="line">                            <span class="symbol">nexusUrl:</span> NEXUS_URL,</span><br><span class="line">                            <span class="symbol">groupId:</span> pom.groupId,</span><br><span class="line">                            <span class="symbol">version:</span> pom.version,</span><br><span class="line">                            <span class="symbol">repository:</span> NEXUS_REPOSITORY,</span><br><span class="line">                            <span class="symbol">credentialsId:</span> NEXUS_CREDENTIAL_ID,</span><br><span class="line">                            <span class="symbol">artifacts:</span> [</span><br><span class="line">                                [<span class="attr">artifactId:</span> pom.artifactId,</span><br><span class="line">                                <span class="symbol">classifier:</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                                <span class="symbol">file:</span> artifactPath,</span><br><span class="line">                                <span class="symbol">type:</span> pom.packaging],</span><br><span class="line">                                [<span class="attr">artifactId:</span> pom.artifactId,</span><br><span class="line">                                <span class="symbol">classifier:</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                                <span class="symbol">file:</span> <span class="string">&quot;pom.xml&quot;</span>,</span><br><span class="line">                                <span class="symbol">type:</span> <span class="string">&quot;pom&quot;</span>]</span><br><span class="line">                            ]</span><br><span class="line">                        );</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        error <span class="string">&quot;*** File: $&#123;artifactPath&#125;, could not be found&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、构建验证</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221018123030679.png" alt="image-20221018123030679"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221018120302885.png" alt="image-20221018120302885"></p><p>3、去 Nexus 查看一下</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221018120845661.png" alt="image-20221018120845661"></p><h2 id="八、FAQ"><a href="#八、FAQ" class="headerlink" title="八、FAQ"></a>八、FAQ</h2><h3 id="8-1-缺少-Docker-插件"><a href="#8-1-缺少-Docker-插件" class="headerlink" title="8.1 缺少 Docker 插件"></a>8.1 缺少 Docker 插件</h3><p>1、报错类型</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220610145809263.png" alt="image-20220610145809263"></p><p>2、解决方案</p><p>这是 Jenkins 缺少插件问题。Jenkins 安装 Docker 相关插件即可。</p><h3 id="8-2-docker-作为-agent-时报错"><a href="#8-2-docker-作为-agent-时报错" class="headerlink" title="8.2 docker 作为 agent 时报错"></a>8.2 docker 作为 agent 时报错</h3><p>1、报错类型</p><p>使用 docker 作为 agent 时报错，流水线脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        docker &#123;</span><br><span class="line">            image &#x27;maven:3-alpine&#x27;</span><br><span class="line">            args &#x27;-v /root/maven:/root/.m2&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;mvn -v&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建后报错：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220610145407929.png" alt="image-20220610145407929"></p><p>2、解决方案</p><p>这是权限问题。将 Jenkins 用户加入 root 用户组即可。</p><ul><li><p>创建 docker 用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd docker</span><br></pre></td></tr></table></figure></li><li><p>追加 jenkins 用户到 docker 用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -a -G docker jenkins</span><br></pre></td></tr></table></figure></li><li><p>查看是否添加成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group</span><br><span class="line">...</span><br><span class="line">docker:x:994:jenkins</span><br></pre></td></tr></table></figure></li><li><p>赋予 666 权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ll /var/run/docker.sock</span><br><span class="line">srw-rw---- 1 root docker 0 Jun 10 12:54 /var/run/docker.sock</span><br><span class="line"></span><br><span class="line">chmod 666 /var/run/docker.sock</span><br><span class="line"></span><br><span class="line">ll /var/run/docker.sock</span><br><span class="line">srw-rw-rw- 1 root docker 0 Jun 10 12:54 /var/run/docker.sock</span><br></pre></td></tr></table></figure></li></ul><p>再次构建即可。</p><h3 id="8-3-options-timestamps"><a href="#8-3-options-timestamps" class="headerlink" title="8.3 options timestamps()"></a>8.3 options timestamps()</h3><p>1、报错类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WorkflowScript: 21: Invalid option type &quot;timestamps&quot;. Valid option types: [authorizationMatrix, buildDiscarder, catchError, checkoutToSubdirectory, disableConcurrentBuilds, disableResume, durabilityHint, lock, overrideIndexTriggers, parallelsAlwaysFailFast, preserveStashes, quietPeriod, rateLimitBuilds, retry, script, skipDefaultCheckout, skipStagesAfterUnstable, timeout, waitUntil, warnError, withChecks, withContext, withCredentials, withEnv, wrap, ws] @ line 21, column 3.</span><br><span class="line">   timestamps()</span><br><span class="line">     ^</span><br></pre></td></tr></table></figure><p>2、解决方案</p><p>使用时间戳方式显示日志输出时间时，Jenkins 需要安装 <code>Timestamper</code> 插件，如下图，我已经安装过了，如果你还没安装，就点击 <code>Available</code> 选项进行搜索安装即可。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20220724163819555.png" alt="image-20220724163819555"></p><h3 id="8-4-jar-推送至制品库"><a href="#8-4-jar-推送至制品库" class="headerlink" title="8.4 jar 推送至制品库"></a>8.4 jar 推送至制品库</h3><h4 id="8-4-1-报错一"><a href="#8-4-1-报错一" class="headerlink" title="8.4.1 报错一"></a>8.4.1 报错一</h4><p>1、报错现象</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221018113733372.png" alt="image-20221018113733372"></p><p>2、解决方案</p><blockquote><p>Jenkins 服务安装 <code>pipeline-utility-steps</code> 插件</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221018113953087.png" alt="image-20221018113953087"> </p><h4 id="8-4-2-报错二"><a href="#8-4-2-报错二" class="headerlink" title="8.4.2 报错二"></a>8.4.2 报错二</h4><p>1、报错现象</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221018114245902.png" alt="image-20221018114245902"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221018114333710.png" alt="image-20221018114333710"></p><p>2、解决方案</p><p>该问题是因为 <code>jenkins</code> 的安全沙箱机制导致的，只要批准不安全的脚本运行即可，对 Jenkins 服务进行配置即可：</p><ul><li><p>系统配置 ——&gt; 安全（看下图）</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221018114604278.png" alt="image-20221018114604278"></p></li><li><p>点击允许使用模板</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221018115218685.png" alt="image-20221018115218685"></p></li><li><p>完成（这时候就可以了）</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221018115136967.png" alt="image-20221018115136967"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
            <tag> Jenkins_Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab 基础操作快速入门</title>
      <link href="/posts/articles/ad1bd1bd.html"/>
      <url>/posts/articles/ad1bd1bd.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Jenkins访问地址：<a href="http://10.20.10.62:2080/users/sign_in">http://10.20.10.62:2080/users/sign_in</a></p><p>测试的用户&#x2F;密码：zhurongsen&#x2F;moscow@123</p></blockquote><h4 id="1、创建群组"><a href="#1、创建群组" class="headerlink" title="1、创建群组"></a>1、创建群组</h4><blockquote><p>首先研发人员给到项目组所有成员名单（包括：姓名&#x2F;职位&#x2F;邮箱），用于账号注册。</p></blockquote><p>（1）创建群组</p><p>【群组】–&gt;【您的群组】–&gt;【新建群组】</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214173917870.png" alt="image-20221214173917870"></p><p>（2）设置群组</p><blockquote><p>私有：仅该组组员才有权限查看该项目</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214173933305.png" alt="image-20221214173933305"></p><p>（3）将用户添加到群组中</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214173956251.png" alt="image-20221214173956251"></p><h4 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h4><p>（1）创建项目</p><p>【项目】–&gt;【新建项目】</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174013966.png" alt="image-20221214174013966"></p><p>【创建空白项目】：当然也可导入项目</p><blockquote><p>注：不同的 Gitlab 版本可能有些差异，我这里是中文版的，英文版的话是 Create a project</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174032785.png" alt="image-20221214174032785"></p><p>（2）设置项目</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174107705.png" alt="image-20221214174107705"></p><p>（3）创建分支</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174135221.png" alt="image-20221214174135221"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174155642.png" alt="image-20221214174155642"></p><p>（4）合并分支</p><ul><li><p>研发人员的合并请求</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174221446.png" alt="image-20221214174221446"></p></li><li><p>项目主管批准并进行合并</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174355830.png" alt="image-20221214174355830"></p></li></ul><h4 id="3、Clone项目"><a href="#3、Clone项目" class="headerlink" title="3、Clone项目"></a>3、Clone项目</h4><p>（1）生成秘钥</p><blockquote><p>研发人员在 Windows 上生成秘钥</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -C <span class="string">&quot;xxxx@126.com&quot;</span></span></span><br></pre></td></tr></table></figure><p>（2）上传公钥至 Gitlab </p><blockquote><p>把公钥上传至自己的 Gitlab 上（登录gitlab，按下图操作）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub     <span class="comment"># 上传cat的内容至gitlab</span></span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174453562.png" alt="image-20221214174453562"></p><p>（3）配置个人的用户名称和电子邮件地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name <span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email <span class="string">&quot;test@163.com&quot;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>注：user.name 和 user.email 是你 gitlab 上的用户名称和电子邮件</p></blockquote><p>（4）clone 项目到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> ssh://git@10.20.10.62:2022/mygroup/myproject.git</span></span><br></pre></td></tr></table></figure><h4 id="4、Gitlab-语言设置"><a href="#4、Gitlab-语言设置" class="headerlink" title="4、Gitlab 语言设置"></a>4、Gitlab 语言设置</h4><p>如果不习惯使用英文版的 Gitlab，可自行设置为中文，保存后刷新一下即可，具体步骤如下：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174513126.png" alt="image-20221214174513126"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab 备份与迁移</title>
      <link href="/posts/articles/3da9adc.html"/>
      <url>/posts/articles/3da9adc.html</url>
      
        <content type="html"><![CDATA[<p><strong>1、服务器</strong></p><table><thead><tr><th>主机</th><th>版本</th><th>备注</th></tr></thead><tbody><tr><td>10.20.10.3</td><td>10.2.2</td><td>老服务器（数据备份）</td></tr><tr><td>10.20.10.4</td><td>10.2.2</td><td>新服务器（将老服务器迁移至新服务器）</td></tr></tbody></table><p><strong>2、需要备份的文件</strong></p><ul><li>gitlab.rb 配置文件：&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</li><li>nginx 配置文件：&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;nginx&#x2F;conf </li><li>postfix 配置文件：&#x2F;etc&#x2F;postfix&#x2F;main.cf</li></ul><p><strong>3、数据备份</strong></p><ul><li><p>备份整体数据</p><blockquote><p>在不停掉 Gitlab 的情况下进行备份，实际备份的数据会包含：数据库脚本、代码仓库、wiki、大文件、ssh用户秘钥等数据。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /var/opt/gitlab/backups  # 默认备份路径（可修改）</span><br><span class="line">gitlab-rake gitlab:backup:create</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定时备份</span></span><br><span class="line">00 00 * * 6 /usr/bin/gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure></li><li><p>备份 gitlab.rb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/gitlab/gitlab.rb /root/</span><br><span class="line">或</span><br><span class="line">rz 到本地</span><br></pre></td></tr></table></figure></li><li><p>备份 nginx conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /var/opt/gitlab/nginx/conf /root/ </span><br><span class="line">或</span><br><span class="line">rz 到本地</span><br></pre></td></tr></table></figure></li><li><p>备份 postfix</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/postfix/main.cf /root/</span><br><span class="line">或</span><br><span class="line">rz 到本地</span><br></pre></td></tr></table></figure></li><li><p>设置备份过期时间（单位：s）</p><blockquote><p>设置只保存最近7天的备份</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line">gitlab_rails[&#x27;backup_keep_time&#x27;] = 604800</span><br></pre></td></tr></table></figure></li></ul><p><strong>4、数据迁移</strong></p><ul><li><p>将老服务器备份数据 scp 到新服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp 1611821930_2021_01_28_10.2.2_gitlab_backup.tar root@10.20.10.4:/var/opt/gitlab/backups</span><br></pre></td></tr></table></figure></li><li><p>数据包权限</p><blockquote><p>如果是在本地进行恢复，可以不用赋权。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 1611821930_2021_01_28_10.2.2_gitlab_backup.tar</span><br></pre></td></tr></table></figure></li></ul><p><strong>5、数据恢复</strong></p><ul><li><p>停 Gitlab 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br></pre></td></tr></table></figure></li><li><p>进行数据恢复</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore BACKUP=1611821930_2021_01_28_10.2.2</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><ul><li><p>BACKUP&#x3D;备份文件编号，没有后面的_gitlab_backup.tar部分</p></li><li><p>恢复过程中出现两个（yes&#x2F;no），输入两个yes即可。</p></li><li><p>在进行数据恢复时，会根据新服务器的gitlab.rb配置路径进行恢复，如：旧服务器的仓库存储位置为&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;git-data&#x2F;repositories，新服务器的仓库存储位置为&#x2F;data&#x2F;gitlab&#x2F;git-data&#x2F;repositories。进行数据恢复时都会对&#x2F;data&#x2F;gitlab&#x2F;git-data&#x2F;repositories进行自动备份：&#x2F;data&#x2F;gitlab&#x2F;git-data&#x2F;repositories.old.1611903424</p></li><li><p>进行数据恢复时，尽量保持新老服务器的 Gitlab 文件配置一致，如：仓库路径、备份路径等。如果仓库路径不一致可能会导致数据恢复失败，恢复完成后再自行修改为其他的仓库路径。</p></li></ul></blockquote></li></ul><p><strong>6、Gitlab仓库存储更改</strong></p><blockquote><p><strong>注意：</strong></p><ul><li>每次修改仓库存储路径更改前，都<strong>必需</strong>先完整备份一次数据，用于更改仓库路径后进行数据恢复，否则会导致项目数据丢失。</li><li>该路径用于存放项目代码。默认路径：&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;git-data&#x2F;</li><li>git_data_dir “&#x2F;mnt&#x2F;sda3&#x2F;git-data”这种修改方式刷新配置时会错误，原因是该方式已经在11.0被废弃了，所以11.0以后版本使用git_data_dirs代替了。测试了10.2.2版本两种方式都可用。</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim /etc/gitlab/gitlab.rb</span></span><br><span class="line">git_data_dirs(&#123;</span><br><span class="line">  &quot;default&quot; =&gt; &#123;</span><br><span class="line">    &quot;path&quot; =&gt; &quot;/home/gitlab/git-data/&quot;,</span><br><span class="line">    &quot;failure_count_threshold&quot; =&gt; 10,</span><br><span class="line">    &quot;failure_wait_time&quot; =&gt; 30,</span><br><span class="line">    &quot;failure_reset_time&quot; =&gt; 1800,</span><br><span class="line">    &quot;failure_timeout&quot; =&gt; 30</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p><strong>7、Gitlab 备份路径</strong></p><blockquote><p>默认路径：&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim /etc/gitlab/gitlab.rb</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[‘manage_backup_path’] = true</span><br><span class="line">gitlab_rails[‘backup_path’] = &quot;/data/gitlab/backups&quot;    # gitlab备份目录</span><br><span class="line">gitlab_rails[‘backup_archive_permissions’] = 0644       # 生成的备份文件权限</span><br><span class="line">gitlab_rails[‘backup_keep_time’] = 604800               # 备份保留天数为7天</span><br><span class="line">“</span><br><span class="line">mkdir -p /data/gitlab/backups</span><br><span class="line">chown -R git.root /data/gitlab/backups</span><br><span class="line">chmod -R 777 /data/gitlab/backups</span><br><span class="line"></span><br><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab 备份与恢复</title>
      <link href="/posts/articles/7255efaf.html"/>
      <url>/posts/articles/7255efaf.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、查看版本信息"><a href="#一、查看版本信息" class="headerlink" title="一、查看版本信息"></a>一、查看版本信息</h3><p>在数据备份或数据迁移前，应查看对应的系统版本、软件版本等因素，否则可能会导致迁移后数据的不可用。这里以 CentOS 7 为例进行数据备份、恢复和迁移测试。CentOS 8 操作步骤一样。</p><p><strong>1、CentOS 系统版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /etc/redhat-release</span> </span><br><span class="line">CentOS Linux release 7.4.1708 (Core)</span><br></pre></td></tr></table></figure><p><strong>2、Gitlab 软件版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /opt/gitlab/embedded/service/gitlab-rails/VERSION</span></span><br><span class="line">13.5.1</span><br></pre></td></tr></table></figure><h3 id="二、数据备份"><a href="#二、数据备份" class="headerlink" title="二、数据备份"></a>二、数据备份</h3><p>在数据备份这里需要注意，当我们在执行备份操作时，为了保证备份数据的一致性，应事先停掉我们的Gitlab服务，如果不停掉的话，可能我们在备份的过程中有其他研发人员进行数据的上传，从而导致备份数据的不一致性和不完整性，甚至出现一些不可预估的错误。</p><p><strong>1、停Gitlab服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl stop unicorn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl stop sidekiq</span></span><br><span class="line">ok: down: sidekiq: 0s, normally up</span><br></pre></td></tr></table></figure><p>打开&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb配置文件，查看一个和备份相关的配置项：<code>gitlab_rails[&#39;backup_path&#39;] = &quot;/data/gitlab/backups&quot;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim /etc/gitlab/gitlab.rb</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214173313858.png" alt="image-20221214173313858"></p><p>该项定义了默认备份出文件的路径，可以通过修改该配置，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。</p><p><strong>2、开始备份</strong></p><blockquote><p>接下来我们通过备份命令进行数据备份，备份后的数据默认存放在该路径下：<code>/var/opt/gitlab/backups/</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /var/opt/gitlab/backups/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-rake gitlab:backup:create    <span class="comment"># 开始备份（等待..）</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">1604716638_2020_11_07_13.5.1_gitlab_backup.tar     # 备份后的数据包</span><br></pre></td></tr></table></figure><blockquote><p>也可以添加到 crontab 中定时执行：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 3 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>可以到&#x2F;data&#x2F;gitlab&#x2F;backups找到备份包，解压查看，会发现备份的还是比较全面的，数据库、repositories、build、upload等分类还是比较清晰的。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214173338006.png" alt="image-20221214173338006"></p><h3 id="三、数据恢复"><a href="#三、数据恢复" class="headerlink" title="三、数据恢复"></a>三、数据恢复</h3><p><strong>1、删除数据</strong></p><p>为了测试效果，这里我们模拟不小心删掉了项目的某个文件（当然了这里是可以通过<code>log</code>回滚的，假设这里已经删了很久了）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">html  README.md</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> -r html/   <span class="comment"># 删除文件</span></span></span><br><span class="line">rm &#x27;html/index.html&#x27;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&#x27;意外删除html文件&#x27;</span></span></span><br><span class="line">[dev 0c35330] 意外删除html文件</span><br><span class="line"> 1 file changed, 3 deletions(-)</span><br><span class="line"> delete mode 100644 html/index.html</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push sz dev   <span class="comment"># 提交代码</span></span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214173412504.png" alt="image-20221214173412504"></p><p><strong>2、数据恢复</strong></p><p>（1）停Gitlab服务</p><blockquote><p>当我们在做数据备份和数据迁移时，应先停这两个服务，目的是为了保证数据的一致性。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl stop unicorn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl stop sidekiq</span></span><br><span class="line">ok: down: sidekiq: 0s, normally up</span><br></pre></td></tr></table></figure><p>（2）权限</p><blockquote><p>注意权限：600权限是无权恢复的。 实验环境可改成了777，生产环境建议修改属主属组。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br><span class="line">/data/gitlab/backups</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chmod</span> 777 1604716638_2020_11_07_13.5.1_gitlab_backup.tar</span></span><br></pre></td></tr></table></figure><p>（3）开始恢复数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">1604716638_2020_11_07_13.5.1_gitlab_backup.tar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-rake gitlab:backup:restore BACKUP=1604716638_2020_11_07_13.5.1</span></span><br></pre></td></tr></table></figure><p>（3）启动Gitlab服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl start unicorn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl start sidekiq</span></span><br><span class="line">ok: run: sidekiq: (pid 9457) 1s</span><br><span class="line"></span><br><span class="line">或：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl restart</span></span><br></pre></td></tr></table></figure><p><strong>3、恢复验证</strong></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214173439273.png" alt="image-20221214173439273"></p><p>至此，数据成功恢复。</p><h3 id="四、数据迁移"><a href="#四、数据迁移" class="headerlink" title="四、数据迁移"></a>四、数据迁移</h3><p>（1）停Gitlab服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl stop unicorn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl stop sidekiq</span></span><br><span class="line">ok: down: sidekiq: 0s, normally up</span><br></pre></td></tr></table></figure><p>（2）数据迁移</p><p>将老服务器<code>/data/gitlab/backups</code>目录下的备份文件拷贝到新服务器上的<code>/data/gitlab/backups</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rsync -avz 1604716638_2020_11_07_13.5.1_gitlab_backup.tar 10.20.151.135:/data/gitlab/backups/</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab-ce 跨大版本升级</title>
      <link href="/posts/articles/8dd1dd53.html"/>
      <url>/posts/articles/8dd1dd53.html</url>
      
        <content type="html"><![CDATA[<p><strong>1、升级路径</strong></p><blockquote><p>官方提供的升级路径如下</p></blockquote><p><img src="https://note.youdao.com/yws/res/12735/WEBRESOURCEca80a2c0117da9dfeb5e58c5c5160b15" alt="gitlab升级.png"></p><table><thead><tr><th>目前版本</th><th>可升级路径</th><th>最终版本</th></tr></thead><tbody><tr><td>10.2.2</td><td>10.2.2-&gt;10.8.7-&gt;11.11.8-&gt;12.0.12-&gt;12.1.17-&gt;12.10.14-&gt;13.0.14-&gt;13.1.11-&gt;13.x(latest)</td><td>13.7.1</td></tr></tbody></table><p><strong>2、记录当前版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list | grep gitlab-ce</span><br></pre></td></tr></table></figure><p><strong>3、备份数据</strong></p><blockquote><p>提前修改备份目录（如果数据少，默认备份目录也行）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line">gitlab_rails[‘manage_backup_path’] = true</span><br><span class="line">gitlab_rails[‘backup_path’] = “/data/gitlab/backups”    # gitlab备份目录</span><br><span class="line">gitlab_rails[‘backup_archive_permissions’] = 0644       # 生成的备份文件权限</span><br><span class="line">gitlab_rails[‘backup_keep_time’] = 604800               # 备份保留天数为7天</span><br></pre></td></tr></table></figure><blockquote><p>权限：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/gitlab/backups</span><br><span class="line">chown -R git.root /data/gitlab/backups</span><br><span class="line">chmod -R 777 /data/gitlab/backups</span><br></pre></td></tr></table></figure><blockquote><p>重载：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><blockquote><p>备份：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p><strong>4、配置 gitlab-yum 源</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; /etc/yum.repos.d/gitlab-ce.repo</span><br><span class="line">[gitlab-ce]</span><br><span class="line">name=gitlab-ce</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgcheck=0</span><br><span class="line">enable=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gpg.key</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>5、 yum install 安装（在线升级）</strong></p><blockquote><p>参照官方推荐升级路径，依次执行下面指令逐步升级：每次只能升级到当前版本的最大版本，才能升级下一个大版本。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn &amp;&amp; gitlab-ctl stop sidekiq &amp;&amp; gitlab-ctl stop nginx</span><br><span class="line">yum install -y gitlab-ce-10.8.7</span><br><span class="line">gitlab-rake db:migrate</span><br><span class="line">gitlab-ctl start unicorn &amp;&amp; gitlab-ctl start sidekiq &amp;&amp; gitlab-ctl start nginx</span><br><span class="line">cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完成后会在备份目录自动备份一份数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果发现界面500，不可访问，那么执行gitlab-ctl reconfigure指令刷新配置文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一定保证数据可以正常访问方可执行下一步升级指令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以下按同样操作执行...</span><br><span class="line">yum install -y gitlab-ce-11.11.8</span><br><span class="line">yum install -y gitlab-ce-12.0.12</span><br><span class="line">yum install -y gitlab-ce-12.1.17</span><br><span class="line">yum install -y gitlab-ce-12.10.14</span><br><span class="line">yum install -y gitlab-ce-13.0.14</span><br><span class="line">yum install -y gitlab-ce-13.1.11</span><br><span class="line">yum install -y gitlab-ce-13.7.1     # 最终版本（根据实际情况选择最终版本）</span><br></pre></td></tr></table></figure><p><strong>6、注意事项</strong></p><p>安装完成后，根据需要修改配置文件<code>/etc/gitlab/gitlab.rb</code>，也可以直接使用原来备份好的<code>gitlab.rb</code>文件，执行重新配置命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>接着重启即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>如果返回500状态码，重载一下配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>数据库版本问题：</p><blockquote><p>升级完成后报错，有时候可能是数据库版本问题，可执行下条命令进行升级：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl pg-upgrade -V 12  # 指定对应版本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab 项目自动同步</title>
      <link href="/posts/articles/c74519c0.html"/>
      <url>/posts/articles/c74519c0.html</url>
      
        <content type="html"><![CDATA[<p><strong>1、同步思路</strong></p><ul><li><p>A 和 B 两台 Gitlab 服务；</p></li><li><p>将 A 项目同步到 B；</p></li><li><p>在 A 上 Settings –&gt; Repository –&gt; Mirroring repositories 设置 B 的镜像仓库；</p></li><li><p>当 A 每次 push 时，就会自动同步到 B。</p></li></ul><p><strong>2、版本问题</strong></p><ul><li><p>保证两台服务的 Gitlab 版本一致且版本不要太低，保证在 12 及以上，因为老版本可能没有 <strong>Mirroring repositories</strong> 这个设置；</p></li><li><p>版本过低，可进行版本升级。注意在升级前做好数据备份，防止升级失败；</p></li><li><p>Gitlab 向上兼容，新版本的数据无法导入旧版本；</p></li></ul><p><strong>3、目前版本</strong></p><ul><li><p>A：gitlab-ce      10.2.2</p></li><li><p>B：gitlab-ce      13.7.1</p><blockquote><p><strong>问题：</strong></p><p>由于 A 服务的 Gitlab 版本过低，缺少 <strong>Mirroring repositories</strong>（该参数用来配置远程服务器），所以无法实现项目自动同步。 </p><p><strong>解决方案：</strong></p><p>升级 A 服务的 Gitlab 版本同 B 一致。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab 详细操作入门</title>
      <link href="/posts/articles/9e594074.html"/>
      <url>/posts/articles/9e594074.html</url>
      
        <content type="html"><![CDATA[<h4 id="一、Gitlab-配置"><a href="#一、Gitlab-配置" class="headerlink" title="一、Gitlab 配置"></a>一、Gitlab 配置</h4><h5 id="1、部署方式"><a href="#1、部署方式" class="headerlink" title="1、部署方式"></a>1、部署方式</h5><p>通过 Docker 运行 Gitlab 容器，并对相关的端口和目录进行了映射。再就是 GitLab 是基于Ruby语言开发的，另外用了redis 和postgresql 数据库</p><h5 id="2、端口"><a href="#2、端口" class="headerlink" title="2、端口"></a>2、端口</h5><ul><li><p>22 端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2022:22      # 将 Gitlab 容器的 22 端口映射到宿主机的 2022 端口</span><br></pre></td></tr></table></figure></li><li><p>443 端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2443:443     # 将 Gitlab 容器的 443 端口映射到宿主机的 2443 端口</span><br></pre></td></tr></table></figure></li><li><p>80 端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2080:80      # 将 Gitlab 容器的 80 端口映射到宿主机的 2080 端口</span><br></pre></td></tr></table></figure><blockquote><p>因此访问 Gitlab 时，应跟上对应的 2080 端口</p></blockquote></li></ul><h5 id="3、文件路径"><a href="#3、文件路径" class="headerlink" title="3、文件路径"></a>3、文件路径</h5><ul><li><p>配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/data/gitlab/etc   # 宿主机</span><br><span class="line">/etc/gitlab             # Gitlab 容器</span><br></pre></td></tr></table></figure></li><li><p>数据文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/home/data/gitlab/data  # 宿主机</span><br><span class="line">/var/opt/gitlab         # Gitlab 容器</span><br><span class="line">/var/opt/gitlab/postgresql/data   # PostgreSQL 数据库，用于存放 Gitlab 数据</span><br></pre></td></tr></table></figure></li><li><p>日志文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/data/gitlab/log   # 宿主机</span><br><span class="line">/var/log/gitlab         # Gitlab 容器</span><br></pre></td></tr></table></figure></li></ul><h5 id="4、用户"><a href="#4、用户" class="headerlink" title="4、用户"></a>4、用户</h5><p>默认用户为 git ，这里也可以修改默认的用户。在 Gitlab 上可以创建相应的用户，用户的数据会存储到对应的数据文件之中。</p><h4 id="二、Gitlab-使用教程"><a href="#二、Gitlab-使用教程" class="headerlink" title="二、Gitlab 使用教程"></a>二、Gitlab 使用教程</h4><h5 id="1、创建用户"><a href="#1、创建用户" class="headerlink" title="1、创建用户"></a>1、创建用户</h5><blockquote><p>首先研发人员给到项目组所有成员名单（包括：姓名&#x2F;职位&#x2F;邮箱），用于账号注册。</p><p>这里是以管理员账号去创建的普通用户（注意是普通用户），权限在添加到群组中时再赋予。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174734982.png" alt="image-20221214174734982"></p><h5 id="2、用户访问"><a href="#2、用户访问" class="headerlink" title="2、用户访问"></a>2、用户访问</h5><p>账号注册完成后即可登录到自己的 Gitlab 端，首次登录用户需进行初始密码修改，修改后需牢记密码，防止数据丢失。</p><h5 id="3、创建群组"><a href="#3、创建群组" class="headerlink" title="3、创建群组"></a>3、创建群组</h5><p>（1）创建群组</p><p>【群组】–&gt;【您的群组】–&gt;【新建群组】</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174753848.png" alt="image-20221214174753848"></p><p>（2）设置群组</p><blockquote><p>私有：仅该组组员才有权限查看该项目</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174808158.png" alt="image-20221214174808158"></p><p>（3）将用户添加到群组中</p><ul><li><p>添加用户到群组</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174825153.png" alt="image-20221214174825153"></p></li><li><p>用户权限划分</p><p>在这里就涉及到了用户的权限问题，可根据项目组来确定，一般会设置我们的项目主管为该项目的项目管理员，其他成员则为普通的研发人员。</p><ul><li><p>项目管理员（Owner）</p><p>是该群组和项目组的管理员，权限仅次于 Gitlab 管理员，可批准代码合并请求并进行合并（合并到 master 分支）。</p></li><li><p>普通成员（Dev）</p><p>加入群组的普通成员均有权限查看所在组的项目详情，同时可进行相应的 clone 操作。</p></li></ul></li></ul><h5 id="4、创建项目"><a href="#4、创建项目" class="headerlink" title="4、创建项目"></a>4、创建项目</h5><p>（1）创建项目</p><p>【项目】–&gt;【新建项目】</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174839937.png" alt="image-20221214174839937"></p><p>【创建空白项目】：当然也可导入项目</p><blockquote><p>注：不同的 Gitlab 版本可能有些差异，我这里是中文版的，英文版的话是 Create a project（看不习惯中文可进行中英文切换，设置方法在后面）</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174854685.png" alt="image-20221214174854685"></p><p>（2）设置项目</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214174912124.png" alt="image-20221214174912124"></p><p>（3）创建分支</p><blockquote><p>具体的分支内容以研发那边为准进行确定。</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181204879.png" alt="image-20221214181204879"></p><blockquote><p>输入分支名称：</p></blockquote><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181222319.png" alt="image-20221214181222319"></p><p>（4）合并分支</p><ul><li><p>研发人员的合并请求操作</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181244230.png" alt="image-20221214181244230"></p></li><li><p>项目主管批准并进行合并操作</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181321758.png" alt="image-20221214181321758"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181345862.png" alt="image-20221214181345862"></p></li></ul><h5 id="5、Clone-项目"><a href="#5、Clone-项目" class="headerlink" title="5、Clone 项目"></a>5、Clone 项目</h5><p>（1）生成秘钥</p><blockquote><p>研发人员在 Windows 上生成秘钥</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen.exe -C <span class="string">&quot;xxxx@126.com&quot;</span></span></span><br></pre></td></tr></table></figure><p>（2）上传公钥至 Gitlab </p><blockquote><p>把公钥上传至自己的 Gitlab 上（登录gitlab，按下图操作）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub     <span class="comment"># 上传cat的内容至gitlab</span></span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181422324.png" alt="image-20221214181422324"></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181436337.png" alt="image-20221214181436337"></p><p>（3）配置个人的用户名称和电子邮件地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name <span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email <span class="string">&quot;test@163.com&quot;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>注：user.name 和 user.email 是你 gitlab 上的用户名称和电子邮件</p></blockquote><p>（4）clone 项目到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> ssh://git@10.20.10.62:2022/mygroup/myproject.git</span></span><br></pre></td></tr></table></figure><h5 id="6、Gitlab-语言设置"><a href="#6、Gitlab-语言设置" class="headerlink" title="6、Gitlab 语言设置"></a>6、Gitlab 语言设置</h5><p>每个用户登录 Gitlab 默认的语言是 English 可个人情况进行中英文切换，保存后刷新一下即可，具体步骤如下：</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181452446.png" alt="image-20221214181452446"></p><h4 id="三、Gitlab-管理"><a href="#三、Gitlab-管理" class="headerlink" title="三、Gitlab 管理"></a>三、Gitlab 管理</h4><h5 id="1、项目管理"><a href="#1、项目管理" class="headerlink" title="1、项目管理"></a>1、项目管理</h5><p>（1）代码管理</p><p>代码通过相应的开发人员进行开发，将开发好的代码 push 到 Gitlab 上进行代码托管。这里重点在于如何备份&#x2F;恢复&#x2F;迁移数据的问题。</p><p>（2）分支管理</p><p>分支主要有研发人员那边来确定，具体的操作步骤在上述【创建群组】中有提到。</p><h5 id="2、数据备份"><a href="#2、数据备份" class="headerlink" title="2、数据备份"></a>2、数据备份</h5><p>（1）查看版本信息</p><p>在数据备份或数据迁移前，应查看对应的系统版本、软件版本等因素，否则可能会导致迁移后数据的不可用。这里以 CentOS 7 为例进行数据备份、恢复和迁移测试。CentOS 8 操作步骤一样。</p><ul><li><p>CentOS 系统版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /etc/redhat-release</span> </span><br><span class="line">CentOS Linux release 7.4.1708 (Core)</span><br></pre></td></tr></table></figure></li><li><p>Gitlab 软件版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /opt/gitlab/embedded/service/gitlab-rails/VERSION</span></span><br><span class="line">13.5.1</span><br></pre></td></tr></table></figure></li></ul><p>（2）数据备份</p><p>在数据备份这里需要注意，当我们在执行备份操作时，为了保证备份数据的一致性，应事先停掉我们的Gitlab服务，如果不停掉的话，可能我们在备份的过程中有其他研发人员进行数据的上传，从而导致备份数据的不一致性和不完整性，甚至出现一些不可预估的错误。</p><ul><li><p>停Gitlab服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl stop unicorn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl stop sidekiq</span></span><br><span class="line">ok: down: sidekiq: 0s, normally up</span><br></pre></td></tr></table></figure><p>打开&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb配置文件，查看一个和备份相关的配置项：<code>gitlab_rails[&#39;backup_path&#39;] = &quot;/data/gitlab/backups&quot;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim /etc/gitlab/gitlab.rb</span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181519087.png" alt="image-20221214181519087"></p><p>该项定义了默认备份出文件的路径，可以通过修改该配置，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。</p></li></ul><p>（3）开始备份</p><blockquote><p>接下来我们通过备份命令进行数据备份，备份后的数据默认存放在该路径下：<code>/var/opt/gitlab/backups/</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /var/opt/gitlab/backups/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-rake gitlab:backup:create    <span class="comment"># 开始备份（等待..）</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">1604716638_2020_11_07_13.5.1_gitlab_backup.tar     # 备份后的数据包</span><br></pre></td></tr></table></figure><blockquote><p>也可以添加到 crontab 中定时执行：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 3 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>可以到&#x2F;data&#x2F;gitlab&#x2F;backups找到备份包，解压查看，会发现备份的还是比较全面的，数据库、repositories、build、upload等分类还是比较清晰的。</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181534308.png" alt="image-20221214181534308"></p><h5 id="3、数据恢复"><a href="#3、数据恢复" class="headerlink" title="3、数据恢复"></a>3、数据恢复</h5><p>（1）删除数据</p><p>为了测试效果，这里我们模拟不小心删掉了项目的某个文件（当然了这里是可以通过<code>log</code>回滚的，假设这里已经删了很久了）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">html  README.md</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> -r html/   <span class="comment"># 删除文件</span></span></span><br><span class="line">rm &#x27;html/index.html&#x27;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&#x27;意外删除html文件&#x27;</span></span></span><br><span class="line">[dev 0c35330] 意外删除html文件</span><br><span class="line"> 1 file changed, 3 deletions(-)</span><br><span class="line"> delete mode 100644 html/index.html</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push sz dev   <span class="comment"># 提交代码</span></span></span><br></pre></td></tr></table></figure><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181552992.png" alt="image-20221214181552992"></p><p>（2）停Gitlab服务</p><blockquote><p>当我们在做数据备份和数据迁移时，应先停这两个服务，目的是为了保证数据的一致性。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl stop unicorn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl stop sidekiq</span></span><br><span class="line">ok: down: sidekiq: 0s, normally up</span><br></pre></td></tr></table></figure><p>（3）权限</p><blockquote><p>注意权限：600权限是无权恢复的。 实验环境可改成了777，生产环境建议修改属主属组。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br><span class="line">/data/gitlab/backups</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chmod</span> 777 1604716638_2020_11_07_13.5.1_gitlab_backup.tar</span></span><br></pre></td></tr></table></figure><p>（4）开始恢复数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">1604716638_2020_11_07_13.5.1_gitlab_backup.tar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-rake gitlab:backup:restore BACKUP=1604716638_2020_11_07_13.5.1</span></span><br></pre></td></tr></table></figure><p>（5）启动Gitlab服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl start unicorn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl start sidekiq</span></span><br><span class="line">ok: run: sidekiq: (pid 9457) 1s</span><br><span class="line"></span><br><span class="line">或：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl restart</span></span><br></pre></td></tr></table></figure><p>（6）恢复验证</p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181610920.png" alt="image-20221214181610920"></p><p>至此，数据成功恢复。</p><h5 id="4、数据迁移"><a href="#4、数据迁移" class="headerlink" title="4、数据迁移"></a>4、数据迁移</h5><p>（1）停Gitlab服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl stop unicorn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gitlab-ctl stop sidekiq</span></span><br><span class="line">ok: down: sidekiq: 0s, normally up</span><br></pre></td></tr></table></figure><p>（2）数据迁移</p><p>将老服务器<code>/data/gitlab/backups</code>目录下的备份文件拷贝到新服务器上的<code>/data/gitlab/backups</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rsync -avz 1604716638_2020_11_07_13.5.1_gitlab_backup.tar 10.20.151.135:/data/gitlab/backups/</span> </span><br></pre></td></tr></table></figure><h5 id="5、用户管理"><a href="#5、用户管理" class="headerlink" title="5、用户管理"></a>5、用户管理</h5><p>（1）用户创建</p><p>用户创建的过程在使用教程的那一节已经做了详细的介绍，可按照该方法进行用户创建。</p><p>（2）用户权限</p><p>在创建用户的时候是不需要授权的，也就说刚开始创建的时候都是普通用户，其授权是在将成员添加到群组的时候进行的，即该用户对该群组所拥有的权限，一般我们的项目主管会设置为群组管理员，其他成员为普通的开发人员，在该群组的这些成员可以查看当前组的所有项目并进行 clone 操作。</p><p>（3）员工离职</p><p>对于员工离职删除员工账户数据保留的问题，员工要离职前，他应将他所写的代码 push 到 gitlab 的对应分支上，这样在后面有新员工入职时可接手其上一个项目。比如要离职的某员工先将代码 push 到 dev 分支上，后面新员工注册相应的账户后 <code>git pull --rebase origin dev</code>整合代码，该命令的作用是：取回远程主机某个分支的更新，再与本地的指定分支合并。</p><h4 id="四、Gitlab-客户端"><a href="#四、Gitlab-客户端" class="headerlink" title="四、Gitlab 客户端"></a>四、Gitlab 客户端</h4><h5 id="1、Client1"><a href="#1、Client1" class="headerlink" title="1、Client1"></a>1、Client1</h5><p>（1）Git下载</p><p>下载地址：<a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181630869.png" alt="image-20221214181630869"></p><p>（2）Git 使用教程</p><ul><li><p>打开 Git 客户端</p><p>安装完成后，点击【开始菜单】–&gt;【Git Bash】 </p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181650294.png" alt="image-20221214181650294"></p></li><li><p>生成秘钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen  -t rsa -C <span class="string">&quot;xxxx@126.com&quot;</span>    <span class="comment"># 你Gitlab对应的邮箱账户</span></span></span><br></pre></td></tr></table></figure></li><li><p>上传公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub     <span class="comment"># 将cat的内容上传至 Gitlab</span></span> </span><br></pre></td></tr></table></figure></li><li><p>配置 Git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email <span class="string">&quot;xxxx@126.com&quot;</span>     <span class="comment"># 你 Gitlab 邮箱对应的邮箱账户</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name <span class="string">&quot;win&quot;</span>      <span class="comment"># 你 Gitlab 的用户名</span></span></span><br></pre></td></tr></table></figure></li><li><p>Clone 项目</p><p>首先 clone 的项目需要放到哪里，选择好文件夹，比如我 D 盘下的 project 文件夹，操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /d/project/      <span class="comment"># 作为项目仓库</span></span></span><br></pre></td></tr></table></figure><p>SSH方式：</p><blockquote><p>这种方式clone项目的优势在于不需要每次clone时都需要输密码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> ssh://git@10.20.10.62:2022/mygroup/myproject.git</span></span><br></pre></td></tr></table></figure><p>HTTP方式：</p><blockquote><p>这种方式clone的项目时每次都需要输入账户和密码</p><p>账户：是你当前登录的 Gitlab 账户</p><p>密码：Gitlab 账户对应的登录密码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> http://10.20.10.62:2080/mygroup/myproject.git</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>在每次编写代码时，第一步先去 Git 仓库拉取（pull）代码，否则会造成冲突，因为不添加的话，你修改了别人的内容，就会造成相关错误。</p></li><li><p>创建分支</p><p>创建分支并切换到分支：一般会在 gitlab 上创建好分支，研发人员根据gitlab上的分支，再在Git客户端上创建对应的分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b dev    <span class="comment"># 创建dev分支并切换到dev分支</span></span></span><br><span class="line">或</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch dev      <span class="comment"># 创建dev分支</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout dev    <span class="comment"># 切换到dev分支</span></span></span><br></pre></td></tr></table></figure></li><li><p>删除分支</p><p>删除已合并分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名</span><br></pre></td></tr></table></figure><p>删除未合并分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D 分支名</span><br></pre></td></tr></table></figure></li></ul><h5 id="2、Client2"><a href="#2、Client2" class="headerlink" title="2、Client2"></a>2、Client2</h5><p>下载地址：<a href="https://tortoisegit.org/download/">https://tortoisegit.org/download/</a></p><p><img src="https://csdn-rab.oss-cn-chengdu.aliyuncs.com/img/image-20221214181720622.png" alt="image-20221214181720622"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
